/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// ServerInformation
    /// </summary>
    [DataContract(Name = "ServerInformation")]
    public partial class ServerInformation : IEquatable<ServerInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerInformation" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsApihasDataHolder">ApihasDataHolder.</param>
        /// <param name="httpsApihasServerEndpoint">ApihasServerEndpoint.</param>
        /// <param name="httpsApihasSupportedApiVersion">ApihasSupportedApiVersion.</param>
        /// <param name="httpsApihasSupportedContentType">ApihasSupportedContentType.</param>
        /// <param name="httpsApihasSupportedEncoding">ApihasSupportedEncoding.</param>
        /// <param name="httpsApihasSupportedLanguage">ApihasSupportedLanguage.</param>
        /// <param name="httpsApihasSupportedOntology">ApihasSupportedOntology.</param>
        public ServerInformation(string httpsId = default(string), List<string> httpsType = default(List<string>), Organization httpsApihasDataHolder = default(Organization), List<string> httpsApihasServerEndpoint = default(List<string>), List<string> httpsApihasSupportedApiVersion = default(List<string>), List<string> httpsApihasSupportedContentType = default(List<string>), List<string> httpsApihasSupportedEncoding = default(List<string>), List<string> httpsApihasSupportedLanguage = default(List<string>), List<string> httpsApihasSupportedOntology = default(List<string>))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsApihasDataHolder = httpsApihasDataHolder;
            this.HttpsApihasServerEndpoint = httpsApihasServerEndpoint;
            this.HttpsApihasSupportedApiVersion = httpsApihasSupportedApiVersion;
            this.HttpsApihasSupportedContentType = httpsApihasSupportedContentType;
            this.HttpsApihasSupportedEncoding = httpsApihasSupportedEncoding;
            this.HttpsApihasSupportedLanguage = httpsApihasSupportedLanguage;
            this.HttpsApihasSupportedOntology = httpsApihasSupportedOntology;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets ApihasDataHolder
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasDataHolder", EmitDefaultValue = false)]
        public Organization HttpsApihasDataHolder { get; set; }

        /// <summary>
        /// Gets or Sets ApihasServerEndpoint
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasServerEndpoint", EmitDefaultValue = false)]
        public List<string> HttpsApihasServerEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets ApihasSupportedApiVersion
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasSupportedApiVersion", EmitDefaultValue = false)]
        public List<string> HttpsApihasSupportedApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets ApihasSupportedContentType
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasSupportedContentType", EmitDefaultValue = false)]
        public List<string> HttpsApihasSupportedContentType { get; set; }

        /// <summary>
        /// Gets or Sets ApihasSupportedEncoding
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasSupportedEncoding", EmitDefaultValue = false)]
        public List<string> HttpsApihasSupportedEncoding { get; set; }

        /// <summary>
        /// Gets or Sets ApihasSupportedLanguage
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasSupportedLanguage", EmitDefaultValue = false)]
        public List<string> HttpsApihasSupportedLanguage { get; set; }

        /// <summary>
        /// Gets or Sets ApihasSupportedOntology
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasSupportedOntology", EmitDefaultValue = false)]
        public List<string> HttpsApihasSupportedOntology { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerInformation {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  ApihasDataHolder: ").Append(HttpsApihasDataHolder).Append("\n");
            sb.Append("  ApihasServerEndpoint: ").Append(HttpsApihasServerEndpoint).Append("\n");
            sb.Append("  ApihasSupportedApiVersion: ").Append(HttpsApihasSupportedApiVersion).Append("\n");
            sb.Append("  ApihasSupportedContentType: ").Append(HttpsApihasSupportedContentType).Append("\n");
            sb.Append("  ApihasSupportedEncoding: ").Append(HttpsApihasSupportedEncoding).Append("\n");
            sb.Append("  ApihasSupportedLanguage: ").Append(HttpsApihasSupportedLanguage).Append("\n");
            sb.Append("  ApihasSupportedOntology: ").Append(HttpsApihasSupportedOntology).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as ServerInformation);
        }

        /// <summary>
        /// Returns true if ServerInformation instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of ServerInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerInformation httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsApihasDataHolder == httpsInput.HttpsApihasDataHolder ||
                    (this.HttpsApihasDataHolder != null &&
                    this.HttpsApihasDataHolder.Equals(httpsInput.HttpsApihasDataHolder))
                ) && 
                (
                    this.HttpsApihasServerEndpoint == httpsInput.HttpsApihasServerEndpoint ||
                    this.HttpsApihasServerEndpoint != null &&
                    httpsInput.HttpsApihasServerEndpoint != null &&
                    this.HttpsApihasServerEndpoint.SequenceEqual(httpsInput.HttpsApihasServerEndpoint)
                ) && 
                (
                    this.HttpsApihasSupportedApiVersion == httpsInput.HttpsApihasSupportedApiVersion ||
                    this.HttpsApihasSupportedApiVersion != null &&
                    httpsInput.HttpsApihasSupportedApiVersion != null &&
                    this.HttpsApihasSupportedApiVersion.SequenceEqual(httpsInput.HttpsApihasSupportedApiVersion)
                ) && 
                (
                    this.HttpsApihasSupportedContentType == httpsInput.HttpsApihasSupportedContentType ||
                    this.HttpsApihasSupportedContentType != null &&
                    httpsInput.HttpsApihasSupportedContentType != null &&
                    this.HttpsApihasSupportedContentType.SequenceEqual(httpsInput.HttpsApihasSupportedContentType)
                ) && 
                (
                    this.HttpsApihasSupportedEncoding == httpsInput.HttpsApihasSupportedEncoding ||
                    this.HttpsApihasSupportedEncoding != null &&
                    httpsInput.HttpsApihasSupportedEncoding != null &&
                    this.HttpsApihasSupportedEncoding.SequenceEqual(httpsInput.HttpsApihasSupportedEncoding)
                ) && 
                (
                    this.HttpsApihasSupportedLanguage == httpsInput.HttpsApihasSupportedLanguage ||
                    this.HttpsApihasSupportedLanguage != null &&
                    httpsInput.HttpsApihasSupportedLanguage != null &&
                    this.HttpsApihasSupportedLanguage.SequenceEqual(httpsInput.HttpsApihasSupportedLanguage)
                ) && 
                (
                    this.HttpsApihasSupportedOntology == httpsInput.HttpsApihasSupportedOntology ||
                    this.HttpsApihasSupportedOntology != null &&
                    httpsInput.HttpsApihasSupportedOntology != null &&
                    this.HttpsApihasSupportedOntology.SequenceEqual(httpsInput.HttpsApihasSupportedOntology)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsApihasDataHolder != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasDataHolder.GetHashCode();
                }
                if (this.HttpsApihasServerEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasServerEndpoint.GetHashCode();
                }
                if (this.HttpsApihasSupportedApiVersion != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasSupportedApiVersion.GetHashCode();
                }
                if (this.HttpsApihasSupportedContentType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasSupportedContentType.GetHashCode();
                }
                if (this.HttpsApihasSupportedEncoding != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasSupportedEncoding.GetHashCode();
                }
                if (this.HttpsApihasSupportedLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasSupportedLanguage.GetHashCode();
                }
                if (this.HttpsApihasSupportedOntology != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasSupportedOntology.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
