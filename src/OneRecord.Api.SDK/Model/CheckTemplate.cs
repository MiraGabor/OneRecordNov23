/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// CheckTemplate
    /// </summary>
    [DataContract(Name = "CheckTemplate")]
    public partial class CheckTemplate : LogisticsObject, IEquatable<CheckTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckTemplate" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoinvolvedParties">CargoinvolvedParties.</param>
        /// <param name="httpsCargolegacyTemplate">CargolegacyTemplate.</param>
        /// <param name="httpsCargoquestions">Cargoquestions.</param>
        /// <param name="httpsCargodate">Cargodate.</param>
        /// <param name="httpsCargoname">Cargoname.</param>
        /// <param name="httpsCargotemplatePurpose">CargotemplatePurpose.</param>
        /// <param name="httpsCargoversion">Cargoversion.</param>
        public CheckTemplate(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<Party> httpsCargoinvolvedParties = default(List<Party>), ExternalReference httpsCargolegacyTemplate = default(ExternalReference), List<Question> httpsCargoquestions = default(List<Question>), DateTime httpsCargodate = default(DateTime), string httpsCargoname = default(string), string httpsCargotemplatePurpose = default(string), string httpsCargoversion = default(string))
        {
            this.Id = httpsId;
            this.Type = httpsType;
            this.Checks = httpsCargochecks;
            this.Events = httpsCargoevents;
            this.ExternalReferences = httpsCargoexternalReferences;
            this.CompanyIdentifier = httpsCargocompanyIdentifier;
            this.SkeletonIndicator = httpsCargoskeletonIndicator;
            this.InvolvedParties = httpsCargoinvolvedParties;
            this.LegacyTemplate = httpsCargolegacyTemplate;
            this.Questions = httpsCargoquestions;
            this.Date = httpsCargodate;
            this.Name = httpsCargoname;
            this.TemplatePurpose = httpsCargotemplatePurpose;
            this.Version = httpsCargoversion;
        }

        /// <summary>
        /// Gets or Sets CargoinvolvedParties
        /// </summary>
        [DataMember(Name = "cargo:involvedParties", EmitDefaultValue = false)]
        public List<Party> InvolvedParties { get; set; }

        /// <summary>
        /// Gets or Sets CargolegacyTemplate
        /// </summary>
        [DataMember(Name = "cargo:legacyTemplate", EmitDefaultValue = false)]
        public ExternalReference LegacyTemplate { get; set; }

        /// <summary>
        /// Gets or Sets Cargoquestions
        /// </summary>
        [DataMember(Name = "cargo:questions", EmitDefaultValue = false)]
        public List<Question> Questions { get; set; }

        /// <summary>
        /// Gets or Sets Cargodate
        /// </summary>
        [DataMember(Name = "cargo:date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets Cargoname
        /// </summary>
        [DataMember(Name = "cargo:name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CargotemplatePurpose
        /// </summary>
        [DataMember(Name = "cargo:templatePurpose", EmitDefaultValue = false)]
        public string TemplatePurpose { get; set; }

        /// <summary>
        /// Gets or Sets Cargoversion
        /// </summary>
        [DataMember(Name = "cargo:version", EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cargochecks: ").Append(Checks).Append("\n");
            sb.Append("  Cargoevents: ").Append(Events).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(ExternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(CompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(SkeletonIndicator).Append("\n");
            sb.Append("  CargoinvolvedParties: ").Append(InvolvedParties).Append("\n");
            sb.Append("  CargolegacyTemplate: ").Append(LegacyTemplate).Append("\n");
            sb.Append("  Cargoquestions: ").Append(Questions).Append("\n");
            sb.Append("  Cargodate: ").Append(Date).Append("\n");
            sb.Append("  Cargoname: ").Append(Name).Append("\n");
            sb.Append("  CargotemplatePurpose: ").Append(TemplatePurpose).Append("\n");
            sb.Append("  Cargoversion: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as CheckTemplate);
        }

        /// <summary>
        /// Returns true if CheckTemplate instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of CheckTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckTemplate httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Checks == httpsInput.Checks ||
                    this.Checks != null &&
                    httpsInput.Checks != null &&
                    this.Checks.SequenceEqual(httpsInput.Checks)
                ) && 
                (
                    this.Events == httpsInput.Events ||
                    this.Events != null &&
                    httpsInput.Events != null &&
                    this.Events.SequenceEqual(httpsInput.Events)
                ) && 
                (
                    this.ExternalReferences == httpsInput.ExternalReferences ||
                    this.ExternalReferences != null &&
                    httpsInput.ExternalReferences != null &&
                    this.ExternalReferences.SequenceEqual(httpsInput.ExternalReferences)
                ) && 
                (
                    this.CompanyIdentifier == httpsInput.CompanyIdentifier ||
                    (this.CompanyIdentifier != null &&
                    this.CompanyIdentifier.Equals(httpsInput.CompanyIdentifier))
                ) && 
                (
                    this.SkeletonIndicator == httpsInput.SkeletonIndicator ||
                    this.SkeletonIndicator.Equals(httpsInput.SkeletonIndicator)
                ) && 
                (
                    this.InvolvedParties == httpsInput.InvolvedParties ||
                    this.InvolvedParties != null &&
                    httpsInput.InvolvedParties != null &&
                    this.InvolvedParties.SequenceEqual(httpsInput.InvolvedParties)
                ) && 
                (
                    this.LegacyTemplate == httpsInput.LegacyTemplate ||
                    (this.LegacyTemplate != null &&
                    this.LegacyTemplate.Equals(httpsInput.LegacyTemplate))
                ) && 
                (
                    this.Questions == httpsInput.Questions ||
                    this.Questions != null &&
                    httpsInput.Questions != null &&
                    this.Questions.SequenceEqual(httpsInput.Questions)
                ) && 
                (
                    this.Date == httpsInput.Date ||
                    (this.Date != null &&
                    this.Date.Equals(httpsInput.Date))
                ) && 
                (
                    this.Name == httpsInput.Name ||
                    (this.Name != null &&
                    this.Name.Equals(httpsInput.Name))
                ) && 
                (
                    this.TemplatePurpose == httpsInput.TemplatePurpose ||
                    (this.TemplatePurpose != null &&
                    this.TemplatePurpose.Equals(httpsInput.TemplatePurpose))
                ) && 
                (
                    this.Version == httpsInput.Version ||
                    (this.Version != null &&
                    this.Version.Equals(httpsInput.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.ExternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReferences.GetHashCode();
                }
                if (this.CompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkeletonIndicator.GetHashCode();
                if (this.InvolvedParties != null)
                {
                    hashCode = (hashCode * 59) + this.InvolvedParties.GetHashCode();
                }
                if (this.LegacyTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.LegacyTemplate.GetHashCode();
                }
                if (this.Questions != null)
                {
                    hashCode = (hashCode * 59) + this.Questions.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.TemplatePurpose != null)
                {
                    hashCode = (hashCode * 59) + this.TemplatePurpose.GetHashCode();
                }
                if (this.Version != null)
                {
                    hashCode = (hashCode * 59) + this.Version.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
