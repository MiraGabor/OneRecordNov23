/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// CheckTemplate
    /// </summary>
    [DataContract(Name = "CheckTemplate")]
    public partial class CheckTemplate : IEquatable<CheckTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckTemplate" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoinvolvedParties">CargoinvolvedParties.</param>
        /// <param name="httpsCargolegacyTemplate">CargolegacyTemplate.</param>
        /// <param name="httpsCargoquestions">Cargoquestions.</param>
        /// <param name="httpsCargodate">Cargodate.</param>
        /// <param name="httpsCargoname">Cargoname.</param>
        /// <param name="httpsCargotemplatePurpose">CargotemplatePurpose.</param>
        /// <param name="httpsCargoversion">Cargoversion.</param>
        public CheckTemplate(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<Party> httpsCargoinvolvedParties = default(List<Party>), ExternalReference httpsCargolegacyTemplate = default(ExternalReference), List<Question> httpsCargoquestions = default(List<Question>), DateTime httpsCargodate = default(DateTime), string httpsCargoname = default(string), string httpsCargotemplatePurpose = default(string), string httpsCargoversion = default(string))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoinvolvedParties = httpsCargoinvolvedParties;
            this.HttpsCargolegacyTemplate = httpsCargolegacyTemplate;
            this.HttpsCargoquestions = httpsCargoquestions;
            this.HttpsCargodate = httpsCargodate;
            this.HttpsCargoname = httpsCargoname;
            this.HttpsCargotemplatePurpose = httpsCargotemplatePurpose;
            this.HttpsCargoversion = httpsCargoversion;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedParties
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#involvedParties", EmitDefaultValue = false)]
        public List<Party> HttpsCargoinvolvedParties { get; set; }

        /// <summary>
        /// Gets or Sets CargolegacyTemplate
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#legacyTemplate", EmitDefaultValue = false)]
        public ExternalReference HttpsCargolegacyTemplate { get; set; }

        /// <summary>
        /// Gets or Sets Cargoquestions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#questions", EmitDefaultValue = false)]
        public List<Question> HttpsCargoquestions { get; set; }

        /// <summary>
        /// Gets or Sets Cargodate
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#date", EmitDefaultValue = false)]
        public DateTime HttpsCargodate { get; set; }

        /// <summary>
        /// Gets or Sets Cargoname
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#name", EmitDefaultValue = false)]
        public string HttpsCargoname { get; set; }

        /// <summary>
        /// Gets or Sets CargotemplatePurpose
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#templatePurpose", EmitDefaultValue = false)]
        public string HttpsCargotemplatePurpose { get; set; }

        /// <summary>
        /// Gets or Sets Cargoversion
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#version", EmitDefaultValue = false)]
        public string HttpsCargoversion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckTemplate {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargoinvolvedParties: ").Append(HttpsCargoinvolvedParties).Append("\n");
            sb.Append("  CargolegacyTemplate: ").Append(HttpsCargolegacyTemplate).Append("\n");
            sb.Append("  Cargoquestions: ").Append(HttpsCargoquestions).Append("\n");
            sb.Append("  Cargodate: ").Append(HttpsCargodate).Append("\n");
            sb.Append("  Cargoname: ").Append(HttpsCargoname).Append("\n");
            sb.Append("  CargotemplatePurpose: ").Append(HttpsCargotemplatePurpose).Append("\n");
            sb.Append("  Cargoversion: ").Append(HttpsCargoversion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as CheckTemplate);
        }

        /// <summary>
        /// Returns true if CheckTemplate instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of CheckTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckTemplate httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoinvolvedParties == httpsInput.HttpsCargoinvolvedParties ||
                    this.HttpsCargoinvolvedParties != null &&
                    httpsInput.HttpsCargoinvolvedParties != null &&
                    this.HttpsCargoinvolvedParties.SequenceEqual(httpsInput.HttpsCargoinvolvedParties)
                ) && 
                (
                    this.HttpsCargolegacyTemplate == httpsInput.HttpsCargolegacyTemplate ||
                    (this.HttpsCargolegacyTemplate != null &&
                    this.HttpsCargolegacyTemplate.Equals(httpsInput.HttpsCargolegacyTemplate))
                ) && 
                (
                    this.HttpsCargoquestions == httpsInput.HttpsCargoquestions ||
                    this.HttpsCargoquestions != null &&
                    httpsInput.HttpsCargoquestions != null &&
                    this.HttpsCargoquestions.SequenceEqual(httpsInput.HttpsCargoquestions)
                ) && 
                (
                    this.HttpsCargodate == httpsInput.HttpsCargodate ||
                    (this.HttpsCargodate != null &&
                    this.HttpsCargodate.Equals(httpsInput.HttpsCargodate))
                ) && 
                (
                    this.HttpsCargoname == httpsInput.HttpsCargoname ||
                    (this.HttpsCargoname != null &&
                    this.HttpsCargoname.Equals(httpsInput.HttpsCargoname))
                ) && 
                (
                    this.HttpsCargotemplatePurpose == httpsInput.HttpsCargotemplatePurpose ||
                    (this.HttpsCargotemplatePurpose != null &&
                    this.HttpsCargotemplatePurpose.Equals(httpsInput.HttpsCargotemplatePurpose))
                ) && 
                (
                    this.HttpsCargoversion == httpsInput.HttpsCargoversion ||
                    (this.HttpsCargoversion != null &&
                    this.HttpsCargoversion.Equals(httpsInput.HttpsCargoversion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoinvolvedParties != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoinvolvedParties.GetHashCode();
                }
                if (this.HttpsCargolegacyTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargolegacyTemplate.GetHashCode();
                }
                if (this.HttpsCargoquestions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoquestions.GetHashCode();
                }
                if (this.HttpsCargodate != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodate.GetHashCode();
                }
                if (this.HttpsCargoname != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoname.GetHashCode();
                }
                if (this.HttpsCargotemplatePurpose != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotemplatePurpose.GetHashCode();
                }
                if (this.HttpsCargoversion != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoversion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
