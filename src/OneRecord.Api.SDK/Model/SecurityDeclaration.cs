/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// SecurityDeclaration
    /// </summary>
    [DataContract(Name = "SecurityDeclaration")]
    public partial class SecurityDeclaration : IEquatable<SecurityDeclaration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityDeclaration" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="checks">Cargochecks.</param>
        /// <param name="events">Cargoevents.</param>
        /// <param name="externalReferences">CargoexternalReferences.</param>
        /// <param name="companyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="skeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="issuedBy">CargoissuedBy.</param>
        /// <param name="issuedForPiece">CargoissuedForPiece.</param>
        /// <param name="otherRegulatedEntities">CargootherRegulatedEntities.</param>
        /// <param name="receivedFrom">CargoreceivedFrom.</param>
        /// <param name="regulatedEntityIssuer">CargoregulatedEntityIssuer.</param>
        /// <param name="additionalSecurityInformation">CargoadditionalSecurityInformation.</param>
        /// <param name="groundsForExemption">CargogroundsForExemption.</param>
        /// <param name="issuedOn">CargoissuedOn.</param>
        /// <param name="otherScreeningMethods">CargootherScreeningMethods.</param>
        /// <param name="screeningMethods">CargoscreeningMethods.</param>
        /// <param name="securityStatus">CargosecurityStatus.</param>
        public SecurityDeclaration(string id = default(string), List<string> type = default(List<string>), List<Check> checks = default(List<Check>), List<LogisticsEvent> events = default(List<LogisticsEvent>), List<ExternalReference> externalReferences = default(List<ExternalReference>), string companyIdentifier = default(string), bool skeletonIndicator = default(bool), Person issuedBy = default(Person), Piece issuedForPiece = default(Piece), List<RegulatedEntity> otherRegulatedEntities = default(List<RegulatedEntity>), RegulatedEntity receivedFrom = default(RegulatedEntity), RegulatedEntity regulatedEntityIssuer = default(RegulatedEntity), string additionalSecurityInformation = default(string), List<string> groundsForExemption = default(List<string>), DateTime issuedOn = default(DateTime), List<string> otherScreeningMethods = default(List<string>), List<string> screeningMethods = default(List<string>), string securityStatus = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.Checks = checks;
            this.Events = events;
            this.ExternalReferences = externalReferences;
            this.CompanyIdentifier = companyIdentifier;
            this.SkeletonIndicator = skeletonIndicator;
            this.IssuedBy = issuedBy;
            this.IssuedForPiece = issuedForPiece;
            this.OtherRegulatedEntities = otherRegulatedEntities;
            this.ReceivedFrom = receivedFrom;
            this.RegulatedEntityIssuer = regulatedEntityIssuer;
            this.AdditionalSecurityInformation = additionalSecurityInformation;
            this.GroundsForExemption = groundsForExemption;
            this.IssuedOn = issuedOn;
            this.OtherScreeningMethods = otherScreeningMethods;
            this.ScreeningMethods = screeningMethods;
            this.SecurityStatus = securityStatus;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> Type { get; set; }

        /// <summary>
        /// Gets or Sets Checks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> Checks { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets ExternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> ExternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string CompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SkeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool SkeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets IssuedBy
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#issuedBy", EmitDefaultValue = false)]
        public Person IssuedBy { get; set; }

        /// <summary>
        /// Gets or Sets IssuedForPiece
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#issuedForPiece", EmitDefaultValue = false)]
        public Piece IssuedForPiece { get; set; }

        /// <summary>
        /// Gets or Sets OtherRegulatedEntities
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#otherRegulatedEntities", EmitDefaultValue = false)]
        public List<RegulatedEntity> OtherRegulatedEntities { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedFrom
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#receivedFrom", EmitDefaultValue = false)]
        public RegulatedEntity ReceivedFrom { get; set; }

        /// <summary>
        /// Gets or Sets RegulatedEntityIssuer
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#regulatedEntityIssuer", EmitDefaultValue = false)]
        public RegulatedEntity RegulatedEntityIssuer { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalSecurityInformation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#additionalSecurityInformation", EmitDefaultValue = false)]
        public string AdditionalSecurityInformation { get; set; }

        /// <summary>
        /// Gets or Sets GroundsForExemption
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#groundsForExemption", EmitDefaultValue = false)]
        public List<string> GroundsForExemption { get; set; }

        /// <summary>
        /// Gets or Sets IssuedOn
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#issuedOn", EmitDefaultValue = false)]
        public DateTime IssuedOn { get; set; }

        /// <summary>
        /// Gets or Sets OtherScreeningMethods
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#otherScreeningMethods", EmitDefaultValue = false)]
        public List<string> OtherScreeningMethods { get; set; }

        /// <summary>
        /// Gets or Sets ScreeningMethods
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#screeningMethods", EmitDefaultValue = false)]
        public List<string> ScreeningMethods { get; set; }

        /// <summary>
        /// Gets or Sets SecurityStatus
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#securityStatus", EmitDefaultValue = false)]
        public string SecurityStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityDeclaration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  checks: ").Append(Checks).Append("\n");
            sb.Append("  events: ").Append(Events).Append("\n");
            sb.Append("  externalReferences: ").Append(ExternalReferences).Append("\n");
            sb.Append("  companyIdentifier: ").Append(CompanyIdentifier).Append("\n");
            sb.Append("  skeletonIndicator: ").Append(SkeletonIndicator).Append("\n");
            sb.Append("  issuedBy: ").Append(IssuedBy).Append("\n");
            sb.Append("  issuedForPiece: ").Append(IssuedForPiece).Append("\n");
            sb.Append("  otherRegulatedEntities: ").Append(OtherRegulatedEntities).Append("\n");
            sb.Append("  receivedFrom: ").Append(ReceivedFrom).Append("\n");
            sb.Append("  regulatedEntityIssuer: ").Append(RegulatedEntityIssuer).Append("\n");
            sb.Append("  additionalSecurityInformation: ").Append(AdditionalSecurityInformation).Append("\n");
            sb.Append("  groundsForExemption: ").Append(GroundsForExemption).Append("\n");
            sb.Append("  issuedOn: ").Append(IssuedOn).Append("\n");
            sb.Append("  otherScreeningMethods: ").Append(OtherScreeningMethods).Append("\n");
            sb.Append("  screeningMethods: ").Append(ScreeningMethods).Append("\n");
            sb.Append("  securityStatus: ").Append(SecurityStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as SecurityDeclaration);
        }

        /// <summary>
        /// Returns true if SecurityDeclaration instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of SecurityDeclaration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityDeclaration httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Checks == httpsInput.Checks ||
                    this.Checks != null &&
                    httpsInput.Checks != null &&
                    this.Checks.SequenceEqual(httpsInput.Checks)
                ) && 
                (
                    this.Events == httpsInput.Events ||
                    this.Events != null &&
                    httpsInput.Events != null &&
                    this.Events.SequenceEqual(httpsInput.Events)
                ) && 
                (
                    this.ExternalReferences == httpsInput.ExternalReferences ||
                    this.ExternalReferences != null &&
                    httpsInput.ExternalReferences != null &&
                    this.ExternalReferences.SequenceEqual(httpsInput.ExternalReferences)
                ) && 
                (
                    this.CompanyIdentifier == httpsInput.CompanyIdentifier ||
                    (this.CompanyIdentifier != null &&
                    this.CompanyIdentifier.Equals(httpsInput.CompanyIdentifier))
                ) && 
                (
                    this.SkeletonIndicator == httpsInput.SkeletonIndicator ||
                    this.SkeletonIndicator.Equals(httpsInput.SkeletonIndicator)
                ) && 
                (
                    this.IssuedBy == httpsInput.IssuedBy ||
                    (this.IssuedBy != null &&
                    this.IssuedBy.Equals(httpsInput.IssuedBy))
                ) && 
                (
                    this.IssuedForPiece == httpsInput.IssuedForPiece ||
                    (this.IssuedForPiece != null &&
                    this.IssuedForPiece.Equals(httpsInput.IssuedForPiece))
                ) && 
                (
                    this.OtherRegulatedEntities == httpsInput.OtherRegulatedEntities ||
                    this.OtherRegulatedEntities != null &&
                    httpsInput.OtherRegulatedEntities != null &&
                    this.OtherRegulatedEntities.SequenceEqual(httpsInput.OtherRegulatedEntities)
                ) && 
                (
                    this.ReceivedFrom == httpsInput.ReceivedFrom ||
                    (this.ReceivedFrom != null &&
                    this.ReceivedFrom.Equals(httpsInput.ReceivedFrom))
                ) && 
                (
                    this.RegulatedEntityIssuer == httpsInput.RegulatedEntityIssuer ||
                    (this.RegulatedEntityIssuer != null &&
                    this.RegulatedEntityIssuer.Equals(httpsInput.RegulatedEntityIssuer))
                ) && 
                (
                    this.AdditionalSecurityInformation == httpsInput.AdditionalSecurityInformation ||
                    (this.AdditionalSecurityInformation != null &&
                    this.AdditionalSecurityInformation.Equals(httpsInput.AdditionalSecurityInformation))
                ) && 
                (
                    this.GroundsForExemption == httpsInput.GroundsForExemption ||
                    this.GroundsForExemption != null &&
                    httpsInput.GroundsForExemption != null &&
                    this.GroundsForExemption.SequenceEqual(httpsInput.GroundsForExemption)
                ) && 
                (
                    this.IssuedOn == httpsInput.IssuedOn ||
                    (this.IssuedOn != null &&
                    this.IssuedOn.Equals(httpsInput.IssuedOn))
                ) && 
                (
                    this.OtherScreeningMethods == httpsInput.OtherScreeningMethods ||
                    this.OtherScreeningMethods != null &&
                    httpsInput.OtherScreeningMethods != null &&
                    this.OtherScreeningMethods.SequenceEqual(httpsInput.OtherScreeningMethods)
                ) && 
                (
                    this.ScreeningMethods == httpsInput.ScreeningMethods ||
                    this.ScreeningMethods != null &&
                    httpsInput.ScreeningMethods != null &&
                    this.ScreeningMethods.SequenceEqual(httpsInput.ScreeningMethods)
                ) && 
                (
                    this.SecurityStatus == httpsInput.SecurityStatus ||
                    (this.SecurityStatus != null &&
                    this.SecurityStatus.Equals(httpsInput.SecurityStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.ExternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReferences.GetHashCode();
                }
                if (this.CompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkeletonIndicator.GetHashCode();
                if (this.IssuedBy != null)
                {
                    hashCode = (hashCode * 59) + this.IssuedBy.GetHashCode();
                }
                if (this.IssuedForPiece != null)
                {
                    hashCode = (hashCode * 59) + this.IssuedForPiece.GetHashCode();
                }
                if (this.OtherRegulatedEntities != null)
                {
                    hashCode = (hashCode * 59) + this.OtherRegulatedEntities.GetHashCode();
                }
                if (this.ReceivedFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivedFrom.GetHashCode();
                }
                if (this.RegulatedEntityIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.RegulatedEntityIssuer.GetHashCode();
                }
                if (this.AdditionalSecurityInformation != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalSecurityInformation.GetHashCode();
                }
                if (this.GroundsForExemption != null)
                {
                    hashCode = (hashCode * 59) + this.GroundsForExemption.GetHashCode();
                }
                if (this.IssuedOn != null)
                {
                    hashCode = (hashCode * 59) + this.IssuedOn.GetHashCode();
                }
                if (this.OtherScreeningMethods != null)
                {
                    hashCode = (hashCode * 59) + this.OtherScreeningMethods.GetHashCode();
                }
                if (this.ScreeningMethods != null)
                {
                    hashCode = (hashCode * 59) + this.ScreeningMethods.GetHashCode();
                }
                if (this.SecurityStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
