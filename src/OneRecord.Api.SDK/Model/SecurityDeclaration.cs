/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// SecurityDeclaration
    /// </summary>
    [DataContract(Name = "SecurityDeclaration")]
    public partial class SecurityDeclaration : IEquatable<SecurityDeclaration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityDeclaration" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoissuedBy">CargoissuedBy.</param>
        /// <param name="httpsCargoissuedForPiece">CargoissuedForPiece.</param>
        /// <param name="httpsCargootherRegulatedEntities">CargootherRegulatedEntities.</param>
        /// <param name="httpsCargoreceivedFrom">CargoreceivedFrom.</param>
        /// <param name="httpsCargoregulatedEntityIssuer">CargoregulatedEntityIssuer.</param>
        /// <param name="httpsCargoadditionalSecurityInformation">CargoadditionalSecurityInformation.</param>
        /// <param name="httpsCargogroundsForExemption">CargogroundsForExemption.</param>
        /// <param name="httpsCargoissuedOn">CargoissuedOn.</param>
        /// <param name="httpsCargootherScreeningMethods">CargootherScreeningMethods.</param>
        /// <param name="httpsCargoscreeningMethods">CargoscreeningMethods.</param>
        /// <param name="httpsCargosecurityStatus">CargosecurityStatus.</param>
        public SecurityDeclaration(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), Person httpsCargoissuedBy = default(Person), Piece httpsCargoissuedForPiece = default(Piece), List<RegulatedEntity> httpsCargootherRegulatedEntities = default(List<RegulatedEntity>), RegulatedEntity httpsCargoreceivedFrom = default(RegulatedEntity), RegulatedEntity httpsCargoregulatedEntityIssuer = default(RegulatedEntity), string httpsCargoadditionalSecurityInformation = default(string), List<string> httpsCargogroundsForExemption = default(List<string>), DateTime httpsCargoissuedOn = default(DateTime), List<string> httpsCargootherScreeningMethods = default(List<string>), List<string> httpsCargoscreeningMethods = default(List<string>), string httpsCargosecurityStatus = default(string))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoissuedBy = httpsCargoissuedBy;
            this.HttpsCargoissuedForPiece = httpsCargoissuedForPiece;
            this.HttpsCargootherRegulatedEntities = httpsCargootherRegulatedEntities;
            this.HttpsCargoreceivedFrom = httpsCargoreceivedFrom;
            this.HttpsCargoregulatedEntityIssuer = httpsCargoregulatedEntityIssuer;
            this.HttpsCargoadditionalSecurityInformation = httpsCargoadditionalSecurityInformation;
            this.HttpsCargogroundsForExemption = httpsCargogroundsForExemption;
            this.HttpsCargoissuedOn = httpsCargoissuedOn;
            this.HttpsCargootherScreeningMethods = httpsCargootherScreeningMethods;
            this.HttpsCargoscreeningMethods = httpsCargoscreeningMethods;
            this.HttpsCargosecurityStatus = httpsCargosecurityStatus;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoissuedBy
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#issuedBy", EmitDefaultValue = false)]
        public Person HttpsCargoissuedBy { get; set; }

        /// <summary>
        /// Gets or Sets CargoissuedForPiece
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#issuedForPiece", EmitDefaultValue = false)]
        public Piece HttpsCargoissuedForPiece { get; set; }

        /// <summary>
        /// Gets or Sets CargootherRegulatedEntities
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#otherRegulatedEntities", EmitDefaultValue = false)]
        public List<RegulatedEntity> HttpsCargootherRegulatedEntities { get; set; }

        /// <summary>
        /// Gets or Sets CargoreceivedFrom
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#receivedFrom", EmitDefaultValue = false)]
        public RegulatedEntity HttpsCargoreceivedFrom { get; set; }

        /// <summary>
        /// Gets or Sets CargoregulatedEntityIssuer
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#regulatedEntityIssuer", EmitDefaultValue = false)]
        public RegulatedEntity HttpsCargoregulatedEntityIssuer { get; set; }

        /// <summary>
        /// Gets or Sets CargoadditionalSecurityInformation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#additionalSecurityInformation", EmitDefaultValue = false)]
        public string HttpsCargoadditionalSecurityInformation { get; set; }

        /// <summary>
        /// Gets or Sets CargogroundsForExemption
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#groundsForExemption", EmitDefaultValue = false)]
        public List<string> HttpsCargogroundsForExemption { get; set; }

        /// <summary>
        /// Gets or Sets CargoissuedOn
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#issuedOn", EmitDefaultValue = false)]
        public DateTime HttpsCargoissuedOn { get; set; }

        /// <summary>
        /// Gets or Sets CargootherScreeningMethods
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#otherScreeningMethods", EmitDefaultValue = false)]
        public List<string> HttpsCargootherScreeningMethods { get; set; }

        /// <summary>
        /// Gets or Sets CargoscreeningMethods
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#screeningMethods", EmitDefaultValue = false)]
        public List<string> HttpsCargoscreeningMethods { get; set; }

        /// <summary>
        /// Gets or Sets CargosecurityStatus
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#securityStatus", EmitDefaultValue = false)]
        public string HttpsCargosecurityStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityDeclaration {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargoissuedBy: ").Append(HttpsCargoissuedBy).Append("\n");
            sb.Append("  CargoissuedForPiece: ").Append(HttpsCargoissuedForPiece).Append("\n");
            sb.Append("  CargootherRegulatedEntities: ").Append(HttpsCargootherRegulatedEntities).Append("\n");
            sb.Append("  CargoreceivedFrom: ").Append(HttpsCargoreceivedFrom).Append("\n");
            sb.Append("  CargoregulatedEntityIssuer: ").Append(HttpsCargoregulatedEntityIssuer).Append("\n");
            sb.Append("  CargoadditionalSecurityInformation: ").Append(HttpsCargoadditionalSecurityInformation).Append("\n");
            sb.Append("  CargogroundsForExemption: ").Append(HttpsCargogroundsForExemption).Append("\n");
            sb.Append("  CargoissuedOn: ").Append(HttpsCargoissuedOn).Append("\n");
            sb.Append("  CargootherScreeningMethods: ").Append(HttpsCargootherScreeningMethods).Append("\n");
            sb.Append("  CargoscreeningMethods: ").Append(HttpsCargoscreeningMethods).Append("\n");
            sb.Append("  CargosecurityStatus: ").Append(HttpsCargosecurityStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as SecurityDeclaration);
        }

        /// <summary>
        /// Returns true if SecurityDeclaration instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of SecurityDeclaration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityDeclaration httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoissuedBy == httpsInput.HttpsCargoissuedBy ||
                    (this.HttpsCargoissuedBy != null &&
                    this.HttpsCargoissuedBy.Equals(httpsInput.HttpsCargoissuedBy))
                ) && 
                (
                    this.HttpsCargoissuedForPiece == httpsInput.HttpsCargoissuedForPiece ||
                    (this.HttpsCargoissuedForPiece != null &&
                    this.HttpsCargoissuedForPiece.Equals(httpsInput.HttpsCargoissuedForPiece))
                ) && 
                (
                    this.HttpsCargootherRegulatedEntities == httpsInput.HttpsCargootherRegulatedEntities ||
                    this.HttpsCargootherRegulatedEntities != null &&
                    httpsInput.HttpsCargootherRegulatedEntities != null &&
                    this.HttpsCargootherRegulatedEntities.SequenceEqual(httpsInput.HttpsCargootherRegulatedEntities)
                ) && 
                (
                    this.HttpsCargoreceivedFrom == httpsInput.HttpsCargoreceivedFrom ||
                    (this.HttpsCargoreceivedFrom != null &&
                    this.HttpsCargoreceivedFrom.Equals(httpsInput.HttpsCargoreceivedFrom))
                ) && 
                (
                    this.HttpsCargoregulatedEntityIssuer == httpsInput.HttpsCargoregulatedEntityIssuer ||
                    (this.HttpsCargoregulatedEntityIssuer != null &&
                    this.HttpsCargoregulatedEntityIssuer.Equals(httpsInput.HttpsCargoregulatedEntityIssuer))
                ) && 
                (
                    this.HttpsCargoadditionalSecurityInformation == httpsInput.HttpsCargoadditionalSecurityInformation ||
                    (this.HttpsCargoadditionalSecurityInformation != null &&
                    this.HttpsCargoadditionalSecurityInformation.Equals(httpsInput.HttpsCargoadditionalSecurityInformation))
                ) && 
                (
                    this.HttpsCargogroundsForExemption == httpsInput.HttpsCargogroundsForExemption ||
                    this.HttpsCargogroundsForExemption != null &&
                    httpsInput.HttpsCargogroundsForExemption != null &&
                    this.HttpsCargogroundsForExemption.SequenceEqual(httpsInput.HttpsCargogroundsForExemption)
                ) && 
                (
                    this.HttpsCargoissuedOn == httpsInput.HttpsCargoissuedOn ||
                    (this.HttpsCargoissuedOn != null &&
                    this.HttpsCargoissuedOn.Equals(httpsInput.HttpsCargoissuedOn))
                ) && 
                (
                    this.HttpsCargootherScreeningMethods == httpsInput.HttpsCargootherScreeningMethods ||
                    this.HttpsCargootherScreeningMethods != null &&
                    httpsInput.HttpsCargootherScreeningMethods != null &&
                    this.HttpsCargootherScreeningMethods.SequenceEqual(httpsInput.HttpsCargootherScreeningMethods)
                ) && 
                (
                    this.HttpsCargoscreeningMethods == httpsInput.HttpsCargoscreeningMethods ||
                    this.HttpsCargoscreeningMethods != null &&
                    httpsInput.HttpsCargoscreeningMethods != null &&
                    this.HttpsCargoscreeningMethods.SequenceEqual(httpsInput.HttpsCargoscreeningMethods)
                ) && 
                (
                    this.HttpsCargosecurityStatus == httpsInput.HttpsCargosecurityStatus ||
                    (this.HttpsCargosecurityStatus != null &&
                    this.HttpsCargosecurityStatus.Equals(httpsInput.HttpsCargosecurityStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoissuedBy != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoissuedBy.GetHashCode();
                }
                if (this.HttpsCargoissuedForPiece != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoissuedForPiece.GetHashCode();
                }
                if (this.HttpsCargootherRegulatedEntities != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargootherRegulatedEntities.GetHashCode();
                }
                if (this.HttpsCargoreceivedFrom != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoreceivedFrom.GetHashCode();
                }
                if (this.HttpsCargoregulatedEntityIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoregulatedEntityIssuer.GetHashCode();
                }
                if (this.HttpsCargoadditionalSecurityInformation != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoadditionalSecurityInformation.GetHashCode();
                }
                if (this.HttpsCargogroundsForExemption != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargogroundsForExemption.GetHashCode();
                }
                if (this.HttpsCargoissuedOn != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoissuedOn.GetHashCode();
                }
                if (this.HttpsCargootherScreeningMethods != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargootherScreeningMethods.GetHashCode();
                }
                if (this.HttpsCargoscreeningMethods != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoscreeningMethods.GetHashCode();
                }
                if (this.HttpsCargosecurityStatus != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargosecurityStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
