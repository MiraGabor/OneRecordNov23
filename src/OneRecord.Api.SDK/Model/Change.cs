/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// Change
    /// </summary>
    [DataContract(Name = "Change")]
    public partial class Change : IEquatable<Change>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Change" /> class.
        /// </summary>
        /// <param name="Id">id.</param>
        /// <param name="Type">type.</param>
        /// <param name="httpsApihasLogisticsObject">ApihasLogisticsObject.</param>
        /// <param name="httpsApihasOperation">ApihasOperation.</param>
        /// <param name="httpsApihasDescription">ApihasDescription.</param>
        /// <param name="httpsApihasRevision">ApihasRevision.</param>
        /// <param name="httpsApinotifyRequestStatusChange">ApinotifyRequestStatusChange.</param>
        public Change(string Id = default(string), string Type = default(string), LogisticsObject httpsApihasLogisticsObject = default(LogisticsObject), List<Operation> httpsApihasOperation = default(List<Operation>), string httpsApihasDescription = default(string), Revision httpsApihasRevision = default(Revision), bool httpsApinotifyRequestStatusChange = default(bool))
        {
            this.Id = Id;
            this.Type = Type;
            this.HasLogisticsObject = httpsApihasLogisticsObject;
            this.HasOperation = httpsApihasOperation;
            this.HasDescription = httpsApihasDescription;
            this.HasRevision = httpsApihasRevision;
            this.NotifyRequestStatusChange = httpsApinotifyRequestStatusChange;
        }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "@context", EmitDefaultValue = true)]
        public Context Context = new Context
        {
            Cargo = "https://onerecord.iata.org/ns/cargo#",
            Api = "https://onerecord.iata.org/ns/api#"
        };

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ApihasLogisticsObject
        /// </summary>
        [DataMember(Name = "api:hasLogisticsObject", EmitDefaultValue = false)]
        public LogisticsObject HasLogisticsObject { get; set; }

        /// <summary>
        /// Gets or Sets ApihasOperation
        /// </summary>
        [DataMember(Name = "api:hasOperation", EmitDefaultValue = false)]
        public List<Operation> HasOperation { get; set; }

        /// <summary>
        /// Gets or Sets ApihasDescription
        /// </summary>
        [DataMember(Name = "api:hasDescription", EmitDefaultValue = false)]
        public string HasDescription { get; set; }

        /// <summary>
        /// Gets or Sets ApihasRevision
        /// </summary>
        [DataMember(Name = "api:hasRevision", EmitDefaultValue = false)]
        public Revision HasRevision { get; set; }

        /// <summary>
        /// Gets or Sets ApinotifyRequestStatusChange
        /// </summary>
        [DataMember(Name = "api:notifyRequestStatusChange", EmitDefaultValue = false)]
        public bool NotifyRequestStatusChange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Change {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ApihasLogisticsObject: ").Append(HasLogisticsObject).Append("\n");
            sb.Append("  ApihasOperation: ").Append(HasOperation).Append("\n");
            sb.Append("  ApihasDescription: ").Append(HasDescription).Append("\n");
            sb.Append("  ApihasRevision: ").Append(HasRevision).Append("\n");
            sb.Append("  ApinotifyRequestStatusChange: ").Append(NotifyRequestStatusChange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as Change);
        }

        /// <summary>
        /// Returns true if Change instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of Change to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Change httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.HasLogisticsObject == httpsInput.HasLogisticsObject ||
                    (this.HasLogisticsObject != null &&
                    this.HasLogisticsObject.Equals(httpsInput.HasLogisticsObject))
                ) && 
                (
                    this.HasOperation == httpsInput.HasOperation ||
                    this.HasOperation != null &&
                    httpsInput.HasOperation != null &&
                    this.HasOperation.SequenceEqual(httpsInput.HasOperation)
                ) && 
                (
                    this.HasDescription == httpsInput.HasDescription ||
                    (this.HasDescription != null &&
                    this.HasDescription.Equals(httpsInput.HasDescription))
                ) && 
                (
                    this.HasRevision == httpsInput.HasRevision ||
                    this.HasRevision != null &&
                    httpsInput.HasRevision != null &&
                    this.HasRevision.Equals(httpsInput.HasRevision)
                ) && 
                (
                    this.NotifyRequestStatusChange == httpsInput.NotifyRequestStatusChange ||
                    this.NotifyRequestStatusChange.Equals(httpsInput.NotifyRequestStatusChange)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.HasLogisticsObject != null)
                {
                    hashCode = (hashCode * 59) + this.HasLogisticsObject.GetHashCode();
                }
                if (this.HasOperation != null)
                {
                    hashCode = (hashCode * 59) + this.HasOperation.GetHashCode();
                }
                if (this.HasDescription != null)
                {
                    hashCode = (hashCode * 59) + this.HasDescription.GetHashCode();
                }
                if (this.HasRevision != null)
                {
                    hashCode = (hashCode * 59) + this.HasRevision.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotifyRequestStatusChange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
