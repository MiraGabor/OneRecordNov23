/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// BookingOptionRequest
    /// </summary>
    [DataContract(Name = "BookingOptionRequest")]
    public partial class BookingOptionRequest : IEquatable<BookingOptionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingOptionRequest" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargobookingOption">CargobookingOption.</param>
        /// <param name="httpsCargobookingSegment">CargobookingSegment.</param>
        /// <param name="httpsCargobookingShipmentDetails">CargobookingShipmentDetails.</param>
        /// <param name="httpsCargoratingsPreference">CargoratingsPreference.</param>
        /// <param name="httpsCargoroutingPreference">CargoroutingPreference.</param>
        /// <param name="httpsCargoshipmentDetails">CargoshipmentDetails.</param>
        /// <param name="httpsCargotimePreferences">CargotimePreferences.</param>
        /// <param name="httpsCargotransportMovement">CargotransportMovement.</param>
        /// <param name="httpsCargounitsPreference">CargounitsPreference.</param>
        /// <param name="httpsCargoallotment">Cargoallotment.</param>
        /// <param name="httpsCargoexpectedCommodities">CargoexpectedCommodities.</param>
        /// <param name="httpsCargorequestedHandling">CargorequestedHandling.</param>
        /// <param name="httpsCargoshipmentSecurityStatus">CargoshipmentSecurityStatus.</param>
        public BookingOptionRequest(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<BookingOption> httpsCargobookingOption = default(List<BookingOption>), BookingSegment httpsCargobookingSegment = default(BookingSegment), BookingShipment httpsCargobookingShipmentDetails = default(BookingShipment), Ratings httpsCargoratingsPreference = default(Ratings), Routing httpsCargoroutingPreference = default(Routing), Shipment httpsCargoshipmentDetails = default(Shipment), BookingTimes httpsCargotimePreferences = default(BookingTimes), TransportMovement httpsCargotransportMovement = default(TransportMovement), Value httpsCargounitsPreference = default(Value), string httpsCargoallotment = default(string), List<string> httpsCargoexpectedCommodities = default(List<string>), List<string> httpsCargorequestedHandling = default(List<string>), string httpsCargoshipmentSecurityStatus = default(string))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargobookingOption = httpsCargobookingOption;
            this.HttpsCargobookingSegment = httpsCargobookingSegment;
            this.HttpsCargobookingShipmentDetails = httpsCargobookingShipmentDetails;
            this.HttpsCargoratingsPreference = httpsCargoratingsPreference;
            this.HttpsCargoroutingPreference = httpsCargoroutingPreference;
            this.HttpsCargoshipmentDetails = httpsCargoshipmentDetails;
            this.HttpsCargotimePreferences = httpsCargotimePreferences;
            this.HttpsCargotransportMovement = httpsCargotransportMovement;
            this.HttpsCargounitsPreference = httpsCargounitsPreference;
            this.HttpsCargoallotment = httpsCargoallotment;
            this.HttpsCargoexpectedCommodities = httpsCargoexpectedCommodities;
            this.HttpsCargorequestedHandling = httpsCargorequestedHandling;
            this.HttpsCargoshipmentSecurityStatus = httpsCargoshipmentSecurityStatus;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingOption
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#bookingOption", EmitDefaultValue = false)]
        public List<BookingOption> HttpsCargobookingOption { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingSegment
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#bookingSegment", EmitDefaultValue = false)]
        public BookingSegment HttpsCargobookingSegment { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingShipmentDetails
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#bookingShipmentDetails", EmitDefaultValue = false)]
        public BookingShipment HttpsCargobookingShipmentDetails { get; set; }

        /// <summary>
        /// Gets or Sets CargoratingsPreference
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#ratingsPreference", EmitDefaultValue = false)]
        public Ratings HttpsCargoratingsPreference { get; set; }

        /// <summary>
        /// Gets or Sets CargoroutingPreference
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#routingPreference", EmitDefaultValue = false)]
        public Routing HttpsCargoroutingPreference { get; set; }

        /// <summary>
        /// Gets or Sets CargoshipmentDetails
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#shipmentDetails", EmitDefaultValue = false)]
        public Shipment HttpsCargoshipmentDetails { get; set; }

        /// <summary>
        /// Gets or Sets CargotimePreferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#timePreferences", EmitDefaultValue = false)]
        public BookingTimes HttpsCargotimePreferences { get; set; }

        /// <summary>
        /// Gets or Sets CargotransportMovement
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#transportMovement", EmitDefaultValue = false)]
        public TransportMovement HttpsCargotransportMovement { get; set; }

        /// <summary>
        /// Gets or Sets CargounitsPreference
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#unitsPreference", EmitDefaultValue = false)]
        public Value HttpsCargounitsPreference { get; set; }

        /// <summary>
        /// Gets or Sets Cargoallotment
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#allotment", EmitDefaultValue = false)]
        public string HttpsCargoallotment { get; set; }

        /// <summary>
        /// Gets or Sets CargoexpectedCommodities
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#expectedCommodities", EmitDefaultValue = false)]
        public List<string> HttpsCargoexpectedCommodities { get; set; }

        /// <summary>
        /// Gets or Sets CargorequestedHandling
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#requestedHandling", EmitDefaultValue = false)]
        public List<string> HttpsCargorequestedHandling { get; set; }

        /// <summary>
        /// Gets or Sets CargoshipmentSecurityStatus
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#shipmentSecurityStatus", EmitDefaultValue = false)]
        public string HttpsCargoshipmentSecurityStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookingOptionRequest {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargobookingOption: ").Append(HttpsCargobookingOption).Append("\n");
            sb.Append("  CargobookingSegment: ").Append(HttpsCargobookingSegment).Append("\n");
            sb.Append("  CargobookingShipmentDetails: ").Append(HttpsCargobookingShipmentDetails).Append("\n");
            sb.Append("  CargoratingsPreference: ").Append(HttpsCargoratingsPreference).Append("\n");
            sb.Append("  CargoroutingPreference: ").Append(HttpsCargoroutingPreference).Append("\n");
            sb.Append("  CargoshipmentDetails: ").Append(HttpsCargoshipmentDetails).Append("\n");
            sb.Append("  CargotimePreferences: ").Append(HttpsCargotimePreferences).Append("\n");
            sb.Append("  CargotransportMovement: ").Append(HttpsCargotransportMovement).Append("\n");
            sb.Append("  CargounitsPreference: ").Append(HttpsCargounitsPreference).Append("\n");
            sb.Append("  Cargoallotment: ").Append(HttpsCargoallotment).Append("\n");
            sb.Append("  CargoexpectedCommodities: ").Append(HttpsCargoexpectedCommodities).Append("\n");
            sb.Append("  CargorequestedHandling: ").Append(HttpsCargorequestedHandling).Append("\n");
            sb.Append("  CargoshipmentSecurityStatus: ").Append(HttpsCargoshipmentSecurityStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as BookingOptionRequest);
        }

        /// <summary>
        /// Returns true if BookingOptionRequest instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of BookingOptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingOptionRequest httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargobookingOption == httpsInput.HttpsCargobookingOption ||
                    this.HttpsCargobookingOption != null &&
                    httpsInput.HttpsCargobookingOption != null &&
                    this.HttpsCargobookingOption.SequenceEqual(httpsInput.HttpsCargobookingOption)
                ) && 
                (
                    this.HttpsCargobookingSegment == httpsInput.HttpsCargobookingSegment ||
                    (this.HttpsCargobookingSegment != null &&
                    this.HttpsCargobookingSegment.Equals(httpsInput.HttpsCargobookingSegment))
                ) && 
                (
                    this.HttpsCargobookingShipmentDetails == httpsInput.HttpsCargobookingShipmentDetails ||
                    (this.HttpsCargobookingShipmentDetails != null &&
                    this.HttpsCargobookingShipmentDetails.Equals(httpsInput.HttpsCargobookingShipmentDetails))
                ) && 
                (
                    this.HttpsCargoratingsPreference == httpsInput.HttpsCargoratingsPreference ||
                    (this.HttpsCargoratingsPreference != null &&
                    this.HttpsCargoratingsPreference.Equals(httpsInput.HttpsCargoratingsPreference))
                ) && 
                (
                    this.HttpsCargoroutingPreference == httpsInput.HttpsCargoroutingPreference ||
                    (this.HttpsCargoroutingPreference != null &&
                    this.HttpsCargoroutingPreference.Equals(httpsInput.HttpsCargoroutingPreference))
                ) && 
                (
                    this.HttpsCargoshipmentDetails == httpsInput.HttpsCargoshipmentDetails ||
                    (this.HttpsCargoshipmentDetails != null &&
                    this.HttpsCargoshipmentDetails.Equals(httpsInput.HttpsCargoshipmentDetails))
                ) && 
                (
                    this.HttpsCargotimePreferences == httpsInput.HttpsCargotimePreferences ||
                    (this.HttpsCargotimePreferences != null &&
                    this.HttpsCargotimePreferences.Equals(httpsInput.HttpsCargotimePreferences))
                ) && 
                (
                    this.HttpsCargotransportMovement == httpsInput.HttpsCargotransportMovement ||
                    (this.HttpsCargotransportMovement != null &&
                    this.HttpsCargotransportMovement.Equals(httpsInput.HttpsCargotransportMovement))
                ) && 
                (
                    this.HttpsCargounitsPreference == httpsInput.HttpsCargounitsPreference ||
                    (this.HttpsCargounitsPreference != null &&
                    this.HttpsCargounitsPreference.Equals(httpsInput.HttpsCargounitsPreference))
                ) && 
                (
                    this.HttpsCargoallotment == httpsInput.HttpsCargoallotment ||
                    (this.HttpsCargoallotment != null &&
                    this.HttpsCargoallotment.Equals(httpsInput.HttpsCargoallotment))
                ) && 
                (
                    this.HttpsCargoexpectedCommodities == httpsInput.HttpsCargoexpectedCommodities ||
                    this.HttpsCargoexpectedCommodities != null &&
                    httpsInput.HttpsCargoexpectedCommodities != null &&
                    this.HttpsCargoexpectedCommodities.SequenceEqual(httpsInput.HttpsCargoexpectedCommodities)
                ) && 
                (
                    this.HttpsCargorequestedHandling == httpsInput.HttpsCargorequestedHandling ||
                    this.HttpsCargorequestedHandling != null &&
                    httpsInput.HttpsCargorequestedHandling != null &&
                    this.HttpsCargorequestedHandling.SequenceEqual(httpsInput.HttpsCargorequestedHandling)
                ) && 
                (
                    this.HttpsCargoshipmentSecurityStatus == httpsInput.HttpsCargoshipmentSecurityStatus ||
                    (this.HttpsCargoshipmentSecurityStatus != null &&
                    this.HttpsCargoshipmentSecurityStatus.Equals(httpsInput.HttpsCargoshipmentSecurityStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargobookingOption != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobookingOption.GetHashCode();
                }
                if (this.HttpsCargobookingSegment != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobookingSegment.GetHashCode();
                }
                if (this.HttpsCargobookingShipmentDetails != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobookingShipmentDetails.GetHashCode();
                }
                if (this.HttpsCargoratingsPreference != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoratingsPreference.GetHashCode();
                }
                if (this.HttpsCargoroutingPreference != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoroutingPreference.GetHashCode();
                }
                if (this.HttpsCargoshipmentDetails != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoshipmentDetails.GetHashCode();
                }
                if (this.HttpsCargotimePreferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotimePreferences.GetHashCode();
                }
                if (this.HttpsCargotransportMovement != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotransportMovement.GetHashCode();
                }
                if (this.HttpsCargounitsPreference != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargounitsPreference.GetHashCode();
                }
                if (this.HttpsCargoallotment != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoallotment.GetHashCode();
                }
                if (this.HttpsCargoexpectedCommodities != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexpectedCommodities.GetHashCode();
                }
                if (this.HttpsCargorequestedHandling != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargorequestedHandling.GetHashCode();
                }
                if (this.HttpsCargoshipmentSecurityStatus != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoshipmentSecurityStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
