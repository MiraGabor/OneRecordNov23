/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// Piece
    /// </summary>
    [DataContract(Name = "Piece")]
    public partial class Piece : LogisticsObject, IEquatable<Piece>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Piece" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="checks">checks.</param>
        /// <param name="events">events.</param>
        /// <param name="externalReferences">externalReferences.</param>
        /// <param name="companyIdentifier">companyIdentifier.</param>
        /// <param name="skeletonIndicator">skeletonIndicator.</param>
        /// <param name="attachedIotDevices">attachedIotDevices.</param>
        /// <param name="involvedInActions">involvedInActions.</param>
        /// <param name="containedItems">containedItems.</param>
        /// <param name="containedPieceInPiece">containedPieceInPiece.</param>
        /// <param name="containedPieces">containedPieces.</param>
        /// <param name="contentDescribedByProducts">contentDescribedByProducts.</param>
        /// <param name="contentProductionCountry">contentProductionCountry.</param>
        /// <param name="customsInformation">customsInformation.</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="grossWeight">grossWeight.</param>
        /// <param name="handlingInstructions">handlingInstructions.</param>
        /// <param name="involvedParties">involvedParties.</param>
        /// <param name="otherIdentifiers">otherIdentifiers.</param>
        /// <param name="packagingType">packagingType.</param>
        /// <param name="partOfShipment">partOfShipment.</param>
        /// <param name="securityDeclaration">securityDeclaration.</param>
        /// <param name="uldReference">uldReference.</param>
        /// <param name="volumetricWeight">volumetricWeight.</param>
        /// <param name="coload">coload.</param>
        /// <param name="declaredValueForCarriage">declaredValueForCarriage.</param>
        /// <param name="declaredValueForCustoms">declaredValueForCustoms.</param>
        /// <param name="fulfillsUldTypeCode">fulfillsUldTypeCode.</param>
        /// <param name="goodsDescription">goodsDescription.</param>
        /// <param name="loadType">loadType.</param>
        /// <param name="nvdForCarriage">nvdForCarriage.</param>
        /// <param name="nvdForCustoms">nvdForCustoms.</param>
        /// <param name="packageMarkCoded">packageMarkCoded.</param>
        /// <param name="packagedeIdentifier">packagedeIdentifier.</param>
        /// <param name="shippingMarks">shippingMarks.</param>
        /// <param name="slac">slac.</param>
        /// <param name="stackable">stackable.</param>
        /// <param name="turnable">turnable.</param>
        /// <param name="upid">upid.</param>
        public Piece(string id = default(string), List<string> type = default(List<string>),
            List<Check> checks = default(List<Check>), List<LogisticsEvent> events = default(List<LogisticsEvent>),
            List<ExternalReference> externalReferences = default(List<ExternalReference>),
            string companyIdentifier = default(string), bool skeletonIndicator = default(bool),
            List<IotDevice> attachedIotDevices = default(List<IotDevice>),
            List<LogisticsAction> involvedInActions = default(List<LogisticsAction>),
            List<Item> containedItems = default(List<Item>), Piece containedPieceInPiece = default(Piece),
            List<Piece> containedPieces = default(List<Piece>),
            List<Product> contentDescribedByProducts = default(List<Product>),
            Country contentProductionCountry = default(Country),
            List<CustomsInformation> customsInformation = default(List<CustomsInformation>),
            Dimensions dimensions = default(Dimensions), Value grossWeight = default(Value),
            List<HandlingInstructions> handlingInstructions = default(List<HandlingInstructions>),
            List<Party> involvedParties = default(List<Party>),
            List<OtherIdentifier> otherIdentifiers = default(List<OtherIdentifier>),
            PackagingType packagingType = default(PackagingType), Shipment partOfShipment = default(Shipment),
            SecurityDeclaration securityDeclaration = default(SecurityDeclaration),
            LoadingUnit uldReference = default(LoadingUnit),
            VolumetricWeight volumetricWeight = default(VolumetricWeight), bool coload = default(bool),
            string declaredValueForCarriage = default(string), string declaredValueForCustoms = default(string),
            string fulfillsUldTypeCode = default(string), string goodsDescription = default(string),
            string loadType = default(string), bool nvdForCarriage = default(bool), bool nvdForCustoms = default(bool),
            string packageMarkCoded = default(string), string packagedeIdentifier = default(string),
            List<string> shippingMarks = default(List<string>), int slac = default(int), bool stackable = default(bool),
            bool turnable = default(bool), string upid = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.Checks = checks;
            this.Events = events;
            this.ExternalReferences = externalReferences;
            this.CompanyIdentifier = companyIdentifier;
            this.SkeletonIndicator = skeletonIndicator;
            this.AttachedIotDevices = attachedIotDevices;
            this.InvolvedInActions = involvedInActions;
            this.ContainedItems = containedItems;
            this.ContainedPieceInPiece = containedPieceInPiece;
            this.ContainedPieces = containedPieces;
            this.ContentDescribedByProducts = contentDescribedByProducts;
            this.ContentProductionCountry = contentProductionCountry;
            this.CustomsInformation = customsInformation;
            this.Dimensions = dimensions;
            this.GrossWeight = grossWeight;
            this.HandlingInstructions = handlingInstructions;
            this.InvolvedParties = involvedParties;
            this.OtherIdentifiers = otherIdentifiers;
            this.PackagingType = packagingType;
            this.PartOfShipment = partOfShipment;
            this.SecurityDeclaration = securityDeclaration;
            this.UldReference = uldReference;
            this.VolumetricWeight = volumetricWeight;
            this.Coload = coload;
            this.DeclaredValueForCarriage = declaredValueForCarriage;
            this.DeclaredValueForCustoms = declaredValueForCustoms;
            this.FulfillsUldTypeCode = fulfillsUldTypeCode;
            this.GoodsDescription = goodsDescription;
            this.LoadType = loadType;
            this.NvdForCarriage = nvdForCarriage;
            this.NvdForCustoms = nvdForCustoms;
            this.PackageMarkCoded = packageMarkCoded;
            this.PackagedeIdentifier = packagedeIdentifier;
            this.ShippingMarks = shippingMarks;
            this.Slac = slac;
            this.Stackable = stackable;
            this.Turnable = turnable;
            this.Upid = upid;
        }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "@context", EmitDefaultValue = true)]
        public Context Context = new Context
        {
            Cargo = "https://onerecord.iata.org/ns/cargo#"
        };

        /// <summary>
        /// Gets or Sets AttachedIotDevices
        /// </summary>
        [DataMember(Name = "cargo:attachedIotDevices", EmitDefaultValue = false)]
        public List<IotDevice> AttachedIotDevices { get; set; }

        /// <summary>
        /// Gets or Sets InvolvedInActions
        /// </summary>
        [DataMember(Name = "cargo:involvedInActions", EmitDefaultValue = false)]
        public List<LogisticsAction> InvolvedInActions { get; set; }

        /// <summary>
        /// Gets or Sets ContainedItems
        /// </summary>
        [DataMember(Name = "cargo:containedItems", EmitDefaultValue = false)]
        public List<Item> ContainedItems { get; set; }

        /// <summary>
        /// Gets or Sets ContainedPieceInPiece
        /// </summary>
        [DataMember(Name = "cargo:containedPieceInPiece", EmitDefaultValue = false)]
        public Piece ContainedPieceInPiece { get; set; }

        /// <summary>
        /// Gets or Sets ContainedPieces
        /// </summary>
        [DataMember(Name = "cargo:containedPieces", EmitDefaultValue = false)]
        public List<Piece> ContainedPieces { get; set; }

        /// <summary>
        /// Gets or Sets CargocontentDescribedByProducts
        /// </summary>
        [DataMember(Name = "cargo:contentDescribedByProducts", EmitDefaultValue = false)]
        public List<Product> ContentDescribedByProducts { get; set; }

        /// <summary>
        /// Gets or Sets ContentProductionCountry
        /// </summary>
        [DataMember(Name = "cargo:contentProductionCountry", EmitDefaultValue = false)]
        public Country ContentProductionCountry { get; set; }

        /// <summary>
        /// Gets or Sets CustomsInformation
        /// </summary>
        [DataMember(Name = "cargo:customsInformation", EmitDefaultValue = false)]
        public List<CustomsInformation> CustomsInformation { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "cargo:dimensions", EmitDefaultValue = false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets GrossWeight
        /// </summary>
        [DataMember(Name = "cargo:grossWeight", EmitDefaultValue = false)]
        public Value GrossWeight { get; set; }

        /// <summary>
        /// Gets or Sets HandlingInstructions
        /// </summary>
        [DataMember(Name = "cargo:handlingInstructions", EmitDefaultValue = false)]
        public List<HandlingInstructions> HandlingInstructions { get; set; }

        /// <summary>
        /// Gets or Sets InvolvedParties
        /// </summary>
        [DataMember(Name = "cargo:involvedParties", EmitDefaultValue = false)]
        public List<Party> InvolvedParties { get; set; }

        /// <summary>
        /// Gets or Sets OtherIdentifiers
        /// </summary>
        [DataMember(Name = "cargo:otherIdentifiers", EmitDefaultValue = false)]
        public List<OtherIdentifier> OtherIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets PackagingType
        /// </summary>
        [DataMember(Name = "cargo:packagingType", EmitDefaultValue = false)]
        public PackagingType PackagingType { get; set; }

        /// <summary>
        /// Gets or Sets PartOfShipment
        /// </summary>
        [DataMember(Name = "cargo:partOfShipment", EmitDefaultValue = false)]
        public Shipment PartOfShipment { get; set; }

        /// <summary>
        /// Gets or Sets SecurityDeclaration
        /// </summary>
        [DataMember(Name = "cargo:securityDeclaration", EmitDefaultValue = false)]
        public SecurityDeclaration SecurityDeclaration { get; set; }

        /// <summary>
        /// Gets or Sets UldReference
        /// </summary>
        [DataMember(Name = "cargo:uldReference", EmitDefaultValue = false)]
        public LoadingUnit UldReference { get; set; }

        /// <summary>
        /// Gets or Sets VolumetricWeight
        /// </summary>
        [DataMember(Name = "cargo:volumetricWeight", EmitDefaultValue = false)]
        public VolumetricWeight VolumetricWeight { get; set; }

        /// <summary>
        /// Gets or Sets Coload
        /// </summary>
        [DataMember(Name = "cargo:coload", EmitDefaultValue = true)]
        public bool Coload { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredValueForCarriage
        /// </summary>
        [DataMember(Name = "cargo:declaredValueForCarriage", EmitDefaultValue = false)]
        public string DeclaredValueForCarriage { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredValueForCustoms
        /// </summary>
        [DataMember(Name = "cargo:declaredValueForCustoms", EmitDefaultValue = false)]
        public string DeclaredValueForCustoms { get; set; }

        /// <summary>
        /// Gets or Sets FulfillsUldTypeCode
        /// </summary>
        [DataMember(Name = "cargo:fulfillsUldTypeCode", EmitDefaultValue = false)]
        public string FulfillsUldTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets GoodsDescription
        /// </summary>
        [DataMember(Name = "cargo:goodsDescription", EmitDefaultValue = false)]
        public string GoodsDescription { get; set; }

        /// <summary>
        /// Gets or Sets LoadType
        /// </summary>
        [DataMember(Name = "cargo:loadType", EmitDefaultValue = false)]
        public string LoadType { get; set; }

        /// <summary>
        /// Gets or Sets NvdForCarriage
        /// </summary>
        [DataMember(Name = "cargo:nvdForCarriage", EmitDefaultValue = true)]
        public bool NvdForCarriage { get; set; }

        /// <summary>
        /// Gets or Sets NvdForCustoms
        /// </summary>
        [DataMember(Name = "cargo:nvdForCustoms", EmitDefaultValue = true)]
        public bool NvdForCustoms { get; set; }

        /// <summary>
        /// Gets or Sets PackageMarkCoded
        /// </summary>
        [DataMember(Name = "cargo:packageMarkCoded", EmitDefaultValue = false)]
        public string PackageMarkCoded { get; set; }

        /// <summary>
        /// Gets or Sets PackagedeIdentifier
        /// </summary>
        [DataMember(Name = "cargo:packagedeIdentifier", EmitDefaultValue = false)]
        public string PackagedeIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ShippingMarks
        /// </summary>
        [DataMember(Name = "cargo:shippingMarks", EmitDefaultValue = false)]
        public List<string> ShippingMarks { get; set; }

        /// <summary>
        /// Gets or Sets Slac
        /// </summary>
        [DataMember(Name = "cargo:slac", EmitDefaultValue = false)]
        public int Slac { get; set; }

        /// <summary>
        /// Gets or Sets Stackable
        /// </summary>
        [DataMember(Name = "cargo:stackable", EmitDefaultValue = true)]
        public bool Stackable { get; set; }

        /// <summary>
        /// Gets or Sets Turnable
        /// </summary>
        [DataMember(Name = "cargo:turnable", EmitDefaultValue = true)]
        public bool Turnable { get; set; }

        /// <summary>
        /// Gets or Sets Upid
        /// </summary>
        [DataMember(Name = "cargo:upid", EmitDefaultValue = false)]
        public string Upid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Piece {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cargochecks: ").Append(Checks).Append("\n");
            sb.Append("  Cargoevents: ").Append(Events).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(ExternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(CompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(SkeletonIndicator).Append("\n");
            sb.Append("  CargoattachedIotDevices: ").Append(AttachedIotDevices).Append("\n");
            sb.Append("  CargoinvolvedInActions: ").Append(InvolvedInActions).Append("\n");
            sb.Append("  CargocontainedItems: ").Append(ContainedItems).Append("\n");
            sb.Append("  CargocontainedPieceInPiece: ").Append(ContainedPieceInPiece).Append("\n");
            sb.Append("  CargocontainedPieces: ").Append(ContainedPieces).Append("\n");
            sb.Append("  CargocontentDescribedByProducts: ").Append(ContentDescribedByProducts).Append("\n");
            sb.Append("  CargocontentProductionCountry: ").Append(ContentProductionCountry).Append("\n");
            sb.Append("  CargocustomsInformation: ").Append(CustomsInformation).Append("\n");
            sb.Append("  Cargodimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  CargogrossWeight: ").Append(GrossWeight).Append("\n");
            sb.Append("  CargohandlingInstructions: ").Append(HandlingInstructions).Append("\n");
            sb.Append("  CargoinvolvedParties: ").Append(InvolvedParties).Append("\n");
            sb.Append("  CargootherIdentifiers: ").Append(OtherIdentifiers).Append("\n");
            sb.Append("  CargopackagingType: ").Append(PackagingType).Append("\n");
            sb.Append("  CargopartOfShipment: ").Append(PartOfShipment).Append("\n");
            sb.Append("  CargosecurityDeclaration: ").Append(SecurityDeclaration).Append("\n");
            sb.Append("  CargouldReference: ").Append(UldReference).Append("\n");
            sb.Append("  CargovolumetricWeight: ").Append(VolumetricWeight).Append("\n");
            sb.Append("  Cargocoload: ").Append(Coload).Append("\n");
            sb.Append("  CargodeclaredValueForCarriage: ").Append(DeclaredValueForCarriage).Append("\n");
            sb.Append("  CargodeclaredValueForCustoms: ").Append(DeclaredValueForCustoms).Append("\n");
            sb.Append("  CargofulfillsUldTypeCode: ").Append(FulfillsUldTypeCode).Append("\n");
            sb.Append("  CargogoodsDescription: ").Append(GoodsDescription).Append("\n");
            sb.Append("  CargoloadType: ").Append(LoadType).Append("\n");
            sb.Append("  CargonvdForCarriage: ").Append(NvdForCarriage).Append("\n");
            sb.Append("  CargonvdForCustoms: ").Append(NvdForCustoms).Append("\n");
            sb.Append("  CargopackageMarkCoded: ").Append(PackageMarkCoded).Append("\n");
            sb.Append("  CargopackagedeIdentifier: ").Append(PackagedeIdentifier).Append("\n");
            sb.Append("  CargoshippingMarks: ").Append(ShippingMarks).Append("\n");
            sb.Append("  Cargoslac: ").Append(Slac).Append("\n");
            sb.Append("  Cargostackable: ").Append(Stackable).Append("\n");
            sb.Append("  Cargoturnable: ").Append(Turnable).Append("\n");
            sb.Append("  Cargoupid: ").Append(Upid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as Piece);
        }

        /// <summary>
        /// Returns true if Piece instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of Piece to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Piece httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Checks == httpsInput.Checks ||
                    this.Checks != null &&
                    httpsInput.Checks != null &&
                    this.Checks.SequenceEqual(httpsInput.Checks)
                ) && 
                (
                    this.Events == httpsInput.Events ||
                    this.Events != null &&
                    httpsInput.Events != null &&
                    this.Events.SequenceEqual(httpsInput.Events)
                ) && 
                (
                    this.ExternalReferences == httpsInput.ExternalReferences ||
                    this.ExternalReferences != null &&
                    httpsInput.ExternalReferences != null &&
                    this.ExternalReferences.SequenceEqual(httpsInput.ExternalReferences)
                ) && 
                (
                    this.CompanyIdentifier == httpsInput.CompanyIdentifier ||
                    (this.CompanyIdentifier != null &&
                    this.CompanyIdentifier.Equals(httpsInput.CompanyIdentifier))
                ) && 
                (
                    this.SkeletonIndicator == httpsInput.SkeletonIndicator ||
                    this.SkeletonIndicator.Equals(httpsInput.SkeletonIndicator)
                ) && 
                (
                    this.AttachedIotDevices == httpsInput.AttachedIotDevices ||
                    this.AttachedIotDevices != null &&
                    httpsInput.AttachedIotDevices != null &&
                    this.AttachedIotDevices.SequenceEqual(httpsInput.AttachedIotDevices)
                ) && 
                (
                    this.InvolvedInActions == httpsInput.InvolvedInActions ||
                    this.InvolvedInActions != null &&
                    httpsInput.InvolvedInActions != null &&
                    this.InvolvedInActions.SequenceEqual(httpsInput.InvolvedInActions)
                ) && 
                (
                    this.ContainedItems == httpsInput.ContainedItems ||
                    this.ContainedItems != null &&
                    httpsInput.ContainedItems != null &&
                    this.ContainedItems.SequenceEqual(httpsInput.ContainedItems)
                ) && 
                (
                    this.ContainedPieceInPiece == httpsInput.ContainedPieceInPiece ||
                    (this.ContainedPieceInPiece != null &&
                    this.ContainedPieceInPiece.Equals(httpsInput.ContainedPieceInPiece))
                ) && 
                (
                    this.ContainedPieces == httpsInput.ContainedPieces ||
                    this.ContainedPieces != null &&
                    httpsInput.ContainedPieces != null &&
                    this.ContainedPieces.SequenceEqual(httpsInput.ContainedPieces)
                ) && 
                (
                    this.ContentDescribedByProducts == httpsInput.ContentDescribedByProducts ||
                    this.ContentDescribedByProducts != null &&
                    httpsInput.ContentDescribedByProducts != null &&
                    this.ContentDescribedByProducts.SequenceEqual(httpsInput.ContentDescribedByProducts)
                ) && 
                (
                    this.ContentProductionCountry == httpsInput.ContentProductionCountry ||
                    (this.ContentProductionCountry != null &&
                    this.ContentProductionCountry.Equals(httpsInput.ContentProductionCountry))
                ) && 
                (
                    this.CustomsInformation == httpsInput.CustomsInformation ||
                    this.CustomsInformation != null &&
                    httpsInput.CustomsInformation != null &&
                    this.CustomsInformation.SequenceEqual(httpsInput.CustomsInformation)
                ) && 
                (
                    this.Dimensions == httpsInput.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(httpsInput.Dimensions))
                ) && 
                (
                    this.GrossWeight == httpsInput.GrossWeight ||
                    (this.GrossWeight != null &&
                    this.GrossWeight.Equals(httpsInput.GrossWeight))
                ) && 
                (
                    this.HandlingInstructions == httpsInput.HandlingInstructions ||
                    this.HandlingInstructions != null &&
                    httpsInput.HandlingInstructions != null &&
                    this.HandlingInstructions.SequenceEqual(httpsInput.HandlingInstructions)
                ) && 
                (
                    this.InvolvedParties == httpsInput.InvolvedParties ||
                    this.InvolvedParties != null &&
                    httpsInput.InvolvedParties != null &&
                    this.InvolvedParties.SequenceEqual(httpsInput.InvolvedParties)
                ) && 
                (
                    this.OtherIdentifiers == httpsInput.OtherIdentifiers ||
                    this.OtherIdentifiers != null &&
                    httpsInput.OtherIdentifiers != null &&
                    this.OtherIdentifiers.SequenceEqual(httpsInput.OtherIdentifiers)
                ) && 
                (
                    this.PackagingType == httpsInput.PackagingType ||
                    (this.PackagingType != null &&
                    this.PackagingType.Equals(httpsInput.PackagingType))
                ) && 
                (
                    this.PartOfShipment == httpsInput.PartOfShipment ||
                    (this.PartOfShipment != null &&
                    this.PartOfShipment.Equals(httpsInput.PartOfShipment))
                ) && 
                (
                    this.SecurityDeclaration == httpsInput.SecurityDeclaration ||
                    (this.SecurityDeclaration != null &&
                    this.SecurityDeclaration.Equals(httpsInput.SecurityDeclaration))
                ) && 
                (
                    this.UldReference == httpsInput.UldReference ||
                    (this.UldReference != null &&
                    this.UldReference.Equals(httpsInput.UldReference))
                ) && 
                (
                    this.VolumetricWeight == httpsInput.VolumetricWeight ||
                    (this.VolumetricWeight != null &&
                    this.VolumetricWeight.Equals(httpsInput.VolumetricWeight))
                ) && 
                (
                    this.Coload == httpsInput.Coload ||
                    this.Coload.Equals(httpsInput.Coload)
                ) && 
                (
                    this.DeclaredValueForCarriage == httpsInput.DeclaredValueForCarriage ||
                    (this.DeclaredValueForCarriage != null &&
                    this.DeclaredValueForCarriage.Equals(httpsInput.DeclaredValueForCarriage))
                ) && 
                (
                    this.DeclaredValueForCustoms == httpsInput.DeclaredValueForCustoms ||
                    (this.DeclaredValueForCustoms != null &&
                    this.DeclaredValueForCustoms.Equals(httpsInput.DeclaredValueForCustoms))
                ) && 
                (
                    this.FulfillsUldTypeCode == httpsInput.FulfillsUldTypeCode ||
                    (this.FulfillsUldTypeCode != null &&
                    this.FulfillsUldTypeCode.Equals(httpsInput.FulfillsUldTypeCode))
                ) && 
                (
                    this.GoodsDescription == httpsInput.GoodsDescription ||
                    (this.GoodsDescription != null &&
                    this.GoodsDescription.Equals(httpsInput.GoodsDescription))
                ) && 
                (
                    this.LoadType == httpsInput.LoadType ||
                    (this.LoadType != null &&
                    this.LoadType.Equals(httpsInput.LoadType))
                ) && 
                (
                    this.NvdForCarriage == httpsInput.NvdForCarriage ||
                    this.NvdForCarriage.Equals(httpsInput.NvdForCarriage)
                ) && 
                (
                    this.NvdForCustoms == httpsInput.NvdForCustoms ||
                    this.NvdForCustoms.Equals(httpsInput.NvdForCustoms)
                ) && 
                (
                    this.PackageMarkCoded == httpsInput.PackageMarkCoded ||
                    (this.PackageMarkCoded != null &&
                    this.PackageMarkCoded.Equals(httpsInput.PackageMarkCoded))
                ) && 
                (
                    this.PackagedeIdentifier == httpsInput.PackagedeIdentifier ||
                    (this.PackagedeIdentifier != null &&
                    this.PackagedeIdentifier.Equals(httpsInput.PackagedeIdentifier))
                ) && 
                (
                    this.ShippingMarks == httpsInput.ShippingMarks ||
                    this.ShippingMarks != null &&
                    httpsInput.ShippingMarks != null &&
                    this.ShippingMarks.SequenceEqual(httpsInput.ShippingMarks)
                ) && 
                (
                    this.Slac == httpsInput.Slac ||
                    this.Slac.Equals(httpsInput.Slac)
                ) && 
                (
                    this.Stackable == httpsInput.Stackable ||
                    this.Stackable.Equals(httpsInput.Stackable)
                ) && 
                (
                    this.Turnable == httpsInput.Turnable ||
                    this.Turnable.Equals(httpsInput.Turnable)
                ) && 
                (
                    this.Upid == httpsInput.Upid ||
                    (this.Upid != null &&
                    this.Upid.Equals(httpsInput.Upid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.ExternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReferences.GetHashCode();
                }
                if (this.CompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkeletonIndicator.GetHashCode();
                if (this.AttachedIotDevices != null)
                {
                    hashCode = (hashCode * 59) + this.AttachedIotDevices.GetHashCode();
                }
                if (this.InvolvedInActions != null)
                {
                    hashCode = (hashCode * 59) + this.InvolvedInActions.GetHashCode();
                }
                if (this.ContainedItems != null)
                {
                    hashCode = (hashCode * 59) + this.ContainedItems.GetHashCode();
                }
                if (this.ContainedPieceInPiece != null)
                {
                    hashCode = (hashCode * 59) + this.ContainedPieceInPiece.GetHashCode();
                }
                if (this.ContainedPieces != null)
                {
                    hashCode = (hashCode * 59) + this.ContainedPieces.GetHashCode();
                }
                if (this.ContentDescribedByProducts != null)
                {
                    hashCode = (hashCode * 59) + this.ContentDescribedByProducts.GetHashCode();
                }
                if (this.ContentProductionCountry != null)
                {
                    hashCode = (hashCode * 59) + this.ContentProductionCountry.GetHashCode();
                }
                if (this.CustomsInformation != null)
                {
                    hashCode = (hashCode * 59) + this.CustomsInformation.GetHashCode();
                }
                if (this.Dimensions != null)
                {
                    hashCode = (hashCode * 59) + this.Dimensions.GetHashCode();
                }
                if (this.GrossWeight != null)
                {
                    hashCode = (hashCode * 59) + this.GrossWeight.GetHashCode();
                }
                if (this.HandlingInstructions != null)
                {
                    hashCode = (hashCode * 59) + this.HandlingInstructions.GetHashCode();
                }
                if (this.InvolvedParties != null)
                {
                    hashCode = (hashCode * 59) + this.InvolvedParties.GetHashCode();
                }
                if (this.OtherIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.OtherIdentifiers.GetHashCode();
                }
                if (this.PackagingType != null)
                {
                    hashCode = (hashCode * 59) + this.PackagingType.GetHashCode();
                }
                if (this.PartOfShipment != null)
                {
                    hashCode = (hashCode * 59) + this.PartOfShipment.GetHashCode();
                }
                if (this.SecurityDeclaration != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityDeclaration.GetHashCode();
                }
                if (this.UldReference != null)
                {
                    hashCode = (hashCode * 59) + this.UldReference.GetHashCode();
                }
                if (this.VolumetricWeight != null)
                {
                    hashCode = (hashCode * 59) + this.VolumetricWeight.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Coload.GetHashCode();
                if (this.DeclaredValueForCarriage != null)
                {
                    hashCode = (hashCode * 59) + this.DeclaredValueForCarriage.GetHashCode();
                }
                if (this.DeclaredValueForCustoms != null)
                {
                    hashCode = (hashCode * 59) + this.DeclaredValueForCustoms.GetHashCode();
                }
                if (this.FulfillsUldTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.FulfillsUldTypeCode.GetHashCode();
                }
                if (this.GoodsDescription != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsDescription.GetHashCode();
                }
                if (this.LoadType != null)
                {
                    hashCode = (hashCode * 59) + this.LoadType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NvdForCarriage.GetHashCode();
                hashCode = (hashCode * 59) + this.NvdForCustoms.GetHashCode();
                if (this.PackageMarkCoded != null)
                {
                    hashCode = (hashCode * 59) + this.PackageMarkCoded.GetHashCode();
                }
                if (this.PackagedeIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.PackagedeIdentifier.GetHashCode();
                }
                if (this.ShippingMarks != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMarks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Slac.GetHashCode();
                hashCode = (hashCode * 59) + this.Stackable.GetHashCode();
                hashCode = (hashCode * 59) + this.Turnable.GetHashCode();
                if (this.Upid != null)
                {
                    hashCode = (hashCode * 59) + this.Upid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }
}
