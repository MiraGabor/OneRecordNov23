/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// Waybill
    /// </summary>
    [DataContract(Name = "Waybill")]
    public partial class Waybill : IEquatable<Waybill>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Waybill" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoarrivalLocation">CargoarrivalLocation.</param>
        /// <param name="httpsCargobillingDetails">CargobillingDetails.</param>
        /// <param name="httpsCargocarrierDeclarationPlace">CargocarrierDeclarationPlace.</param>
        /// <param name="httpsCargodepartureLocation">CargodepartureLocation.</param>
        /// <param name="httpsCargohouseWaybills">CargohouseWaybills.</param>
        /// <param name="httpsCargoinvolvedParties">CargoinvolvedParties.</param>
        /// <param name="httpsCargomasterWaybill">CargomasterWaybill.</param>
        /// <param name="httpsCargoreferredBookingOption">CargoreferredBookingOption.</param>
        /// <param name="httpsCargoshipment">Cargoshipment.</param>
        /// <param name="httpsCargoaccountingInformation">CargoaccountingInformation.</param>
        /// <param name="httpsCargocarrierDeclarationDate">CargocarrierDeclarationDate.</param>
        /// <param name="httpsCargocarrierDeclarationSignature">CargocarrierDeclarationSignature.</param>
        /// <param name="httpsCargoconsignorDeclarationSignature">CargoconsignorDeclarationSignature.</param>
        /// <param name="httpsCargocustomsOriginCode">CargocustomsOriginCode.</param>
        /// <param name="httpsCargodestinationCharges">CargodestinationCharges.</param>
        /// <param name="httpsCargodestinationCurrencyCode">CargodestinationCurrencyCode.</param>
        /// <param name="httpsCargodestinationCurrencyRate">CargodestinationCurrencyRate.</param>
        /// <param name="httpsCargomodularCheckNumber">CargomodularCheckNumber.</param>
        /// <param name="httpsCargooriginCurrency">CargooriginCurrency.</param>
        /// <param name="httpsCargoshippingInfo">CargoshippingInfo.</param>
        /// <param name="httpsCargoshippingRefNo">CargoshippingRefNo.</param>
        /// <param name="httpsCargowaybillNumber">CargowaybillNumber.</param>
        /// <param name="httpsCargowaybillPrefix">CargowaybillPrefix.</param>
        /// <param name="httpsCargowaybillType">CargowaybillType.</param>
        public Waybill(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), Location httpsCargoarrivalLocation = default(Location), BillingDetails httpsCargobillingDetails = default(BillingDetails), Location httpsCargocarrierDeclarationPlace = default(Location), Location httpsCargodepartureLocation = default(Location), List<Waybill> httpsCargohouseWaybills = default(List<Waybill>), List<Party> httpsCargoinvolvedParties = default(List<Party>), Waybill httpsCargomasterWaybill = default(Waybill), Booking httpsCargoreferredBookingOption = default(Booking), Shipment httpsCargoshipment = default(Shipment), string httpsCargoaccountingInformation = default(string), DateTime httpsCargocarrierDeclarationDate = default(DateTime), string httpsCargocarrierDeclarationSignature = default(string), string httpsCargoconsignorDeclarationSignature = default(string), string httpsCargocustomsOriginCode = default(string), List<double> httpsCargodestinationCharges = default(List<double>), string httpsCargodestinationCurrencyCode = default(string), double httpsCargodestinationCurrencyRate = default(double), bool httpsCargomodularCheckNumber = default(bool), string httpsCargooriginCurrency = default(string), string httpsCargoshippingInfo = default(string), string httpsCargoshippingRefNo = default(string), string httpsCargowaybillNumber = default(string), string httpsCargowaybillPrefix = default(string), string httpsCargowaybillType = default(string))
        {
            this.Id = httpsId;
            this.Type = httpsType;
            this.Checks = httpsCargochecks;
            this.Events = httpsCargoevents;
            this.ExternalReferences = httpsCargoexternalReferences;
            this.CompanyIdentifier = httpsCargocompanyIdentifier;
            this.SkeletonIndicator = httpsCargoskeletonIndicator;
            this.ArrivalLocation = httpsCargoarrivalLocation;
            this.BillingDetails = httpsCargobillingDetails;
            this.CarrierDeclarationPlace = httpsCargocarrierDeclarationPlace;
            this.DepartureLocation = httpsCargodepartureLocation;
            this.HouseWaybills = httpsCargohouseWaybills;
            this.InvolvedParties = httpsCargoinvolvedParties;
            this.MasterWaybill = httpsCargomasterWaybill;
            this.ReferredBookingOption = httpsCargoreferredBookingOption;
            this.Shipment = httpsCargoshipment;
            this.AccountingInformation = httpsCargoaccountingInformation;
            this.CarrierDeclarationDate = httpsCargocarrierDeclarationDate;
            this.CarrierDeclarationSignature = httpsCargocarrierDeclarationSignature;
            this.ConsignorDeclarationSignature = httpsCargoconsignorDeclarationSignature;
            this.CustomsOriginCode = httpsCargocustomsOriginCode;
            this.DestinationCharges = httpsCargodestinationCharges;
            this.DestinationCurrencyCode = httpsCargodestinationCurrencyCode;
            this.DestinationCurrencyRate = httpsCargodestinationCurrencyRate;
            this.ModularCheckNumber = httpsCargomodularCheckNumber;
            this.OriginCurrency = httpsCargooriginCurrency;
            this.ShippingInfo = httpsCargoshippingInfo;
            this.HttpsCargoshippingRefNo = httpsCargoshippingRefNo;
            this.HttpsCargowaybillNumber = httpsCargowaybillNumber;
            this.HttpsCargowaybillPrefix = httpsCargowaybillPrefix;
            this.HttpsCargowaybillType = httpsCargowaybillType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> Type { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> Checks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> ExternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string CompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool SkeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoarrivalLocation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#arrivalLocation", EmitDefaultValue = false)]
        public Location ArrivalLocation { get; set; }

        /// <summary>
        /// Gets or Sets CargobillingDetails
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#billingDetails", EmitDefaultValue = false)]
        public BillingDetails BillingDetails { get; set; }

        /// <summary>
        /// Gets or Sets CargocarrierDeclarationPlace
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#carrierDeclarationPlace", EmitDefaultValue = false)]
        public Location CarrierDeclarationPlace { get; set; }

        /// <summary>
        /// Gets or Sets CargodepartureLocation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#departureLocation", EmitDefaultValue = false)]
        public Location DepartureLocation { get; set; }

        /// <summary>
        /// Gets or Sets CargohouseWaybills
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#houseWaybills", EmitDefaultValue = false)]
        public List<Waybill> HouseWaybills { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedParties
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#involvedParties", EmitDefaultValue = false)]
        public List<Party> InvolvedParties { get; set; }

        /// <summary>
        /// Gets or Sets CargomasterWaybill
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#masterWaybill", EmitDefaultValue = false)]
        public Waybill MasterWaybill { get; set; }

        /// <summary>
        /// Gets or Sets CargoreferredBookingOption
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#referredBookingOption", EmitDefaultValue = false)]
        public Booking ReferredBookingOption { get; set; }

        /// <summary>
        /// Gets or Sets Cargoshipment
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#shipment", EmitDefaultValue = false)]
        public Shipment Shipment { get; set; }

        /// <summary>
        /// Gets or Sets CargoaccountingInformation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#accountingInformation", EmitDefaultValue = false)]
        public string AccountingInformation { get; set; }

        /// <summary>
        /// Gets or Sets CargocarrierDeclarationDate
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#carrierDeclarationDate", EmitDefaultValue = false)]
        public DateTime CarrierDeclarationDate { get; set; }

        /// <summary>
        /// Gets or Sets CargocarrierDeclarationSignature
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#carrierDeclarationSignature", EmitDefaultValue = false)]
        public string CarrierDeclarationSignature { get; set; }

        /// <summary>
        /// Gets or Sets CargoconsignorDeclarationSignature
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#consignorDeclarationSignature", EmitDefaultValue = false)]
        public string ConsignorDeclarationSignature { get; set; }

        /// <summary>
        /// Gets or Sets CargocustomsOriginCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#customsOriginCode", EmitDefaultValue = false)]
        public string CustomsOriginCode { get; set; }

        /// <summary>
        /// Gets or Sets CargodestinationCharges
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#destinationCharges", EmitDefaultValue = false)]
        public List<double> DestinationCharges { get; set; }

        /// <summary>
        /// Gets or Sets CargodestinationCurrencyCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#destinationCurrencyCode", EmitDefaultValue = false)]
        public string DestinationCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CargodestinationCurrencyRate
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#destinationCurrencyRate", EmitDefaultValue = false)]
        public double DestinationCurrencyRate { get; set; }

        /// <summary>
        /// Gets or Sets CargomodularCheckNumber
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#modularCheckNumber", EmitDefaultValue = true)]
        public bool ModularCheckNumber { get; set; }

        /// <summary>
        /// Gets or Sets CargooriginCurrency
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#originCurrency", EmitDefaultValue = false)]
        public string OriginCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CargoshippingInfo
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#shippingInfo", EmitDefaultValue = false)]
        public string ShippingInfo { get; set; }

        /// <summary>
        /// Gets or Sets CargoshippingRefNo
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#shippingRefNo", EmitDefaultValue = false)]
        public string HttpsCargoshippingRefNo { get; set; }

        /// <summary>
        /// Gets or Sets CargowaybillNumber
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#waybillNumber", EmitDefaultValue = false)]
        public string HttpsCargowaybillNumber { get; set; }

        /// <summary>
        /// Gets or Sets CargowaybillPrefix
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#waybillPrefix", EmitDefaultValue = false)]
        public string HttpsCargowaybillPrefix { get; set; }

        /// <summary>
        /// Gets or Sets CargowaybillType
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#waybillType", EmitDefaultValue = false)]
        public string HttpsCargowaybillType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Waybill {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cargochecks: ").Append(Checks).Append("\n");
            sb.Append("  Cargoevents: ").Append(Events).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(ExternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(CompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(SkeletonIndicator).Append("\n");
            sb.Append("  CargoarrivalLocation: ").Append(ArrivalLocation).Append("\n");
            sb.Append("  CargobillingDetails: ").Append(BillingDetails).Append("\n");
            sb.Append("  CargocarrierDeclarationPlace: ").Append(CarrierDeclarationPlace).Append("\n");
            sb.Append("  CargodepartureLocation: ").Append(DepartureLocation).Append("\n");
            sb.Append("  CargohouseWaybills: ").Append(HouseWaybills).Append("\n");
            sb.Append("  CargoinvolvedParties: ").Append(InvolvedParties).Append("\n");
            sb.Append("  CargomasterWaybill: ").Append(MasterWaybill).Append("\n");
            sb.Append("  CargoreferredBookingOption: ").Append(ReferredBookingOption).Append("\n");
            sb.Append("  Cargoshipment: ").Append(Shipment).Append("\n");
            sb.Append("  CargoaccountingInformation: ").Append(AccountingInformation).Append("\n");
            sb.Append("  CargocarrierDeclarationDate: ").Append(CarrierDeclarationDate).Append("\n");
            sb.Append("  CargocarrierDeclarationSignature: ").Append(CarrierDeclarationSignature).Append("\n");
            sb.Append("  CargoconsignorDeclarationSignature: ").Append(ConsignorDeclarationSignature).Append("\n");
            sb.Append("  CargocustomsOriginCode: ").Append(CustomsOriginCode).Append("\n");
            sb.Append("  CargodestinationCharges: ").Append(DestinationCharges).Append("\n");
            sb.Append("  CargodestinationCurrencyCode: ").Append(DestinationCurrencyCode).Append("\n");
            sb.Append("  CargodestinationCurrencyRate: ").Append(DestinationCurrencyRate).Append("\n");
            sb.Append("  CargomodularCheckNumber: ").Append(ModularCheckNumber).Append("\n");
            sb.Append("  CargooriginCurrency: ").Append(OriginCurrency).Append("\n");
            sb.Append("  CargoshippingInfo: ").Append(ShippingInfo).Append("\n");
            sb.Append("  CargoshippingRefNo: ").Append(HttpsCargoshippingRefNo).Append("\n");
            sb.Append("  CargowaybillNumber: ").Append(HttpsCargowaybillNumber).Append("\n");
            sb.Append("  CargowaybillPrefix: ").Append(HttpsCargowaybillPrefix).Append("\n");
            sb.Append("  CargowaybillType: ").Append(HttpsCargowaybillType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as Waybill);
        }

        /// <summary>
        /// Returns true if Waybill instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of Waybill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Waybill httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Checks == httpsInput.Checks ||
                    this.Checks != null &&
                    httpsInput.Checks != null &&
                    this.Checks.SequenceEqual(httpsInput.Checks)
                ) && 
                (
                    this.Events == httpsInput.Events ||
                    this.Events != null &&
                    httpsInput.Events != null &&
                    this.Events.SequenceEqual(httpsInput.Events)
                ) && 
                (
                    this.ExternalReferences == httpsInput.ExternalReferences ||
                    this.ExternalReferences != null &&
                    httpsInput.ExternalReferences != null &&
                    this.ExternalReferences.SequenceEqual(httpsInput.ExternalReferences)
                ) && 
                (
                    this.CompanyIdentifier == httpsInput.CompanyIdentifier ||
                    (this.CompanyIdentifier != null &&
                    this.CompanyIdentifier.Equals(httpsInput.CompanyIdentifier))
                ) && 
                (
                    this.SkeletonIndicator == httpsInput.SkeletonIndicator ||
                    this.SkeletonIndicator.Equals(httpsInput.SkeletonIndicator)
                ) && 
                (
                    this.ArrivalLocation == httpsInput.ArrivalLocation ||
                    (this.ArrivalLocation != null &&
                    this.ArrivalLocation.Equals(httpsInput.ArrivalLocation))
                ) && 
                (
                    this.BillingDetails == httpsInput.BillingDetails ||
                    (this.BillingDetails != null &&
                    this.BillingDetails.Equals(httpsInput.BillingDetails))
                ) && 
                (
                    this.CarrierDeclarationPlace == httpsInput.CarrierDeclarationPlace ||
                    (this.CarrierDeclarationPlace != null &&
                    this.CarrierDeclarationPlace.Equals(httpsInput.CarrierDeclarationPlace))
                ) && 
                (
                    this.DepartureLocation == httpsInput.DepartureLocation ||
                    (this.DepartureLocation != null &&
                    this.DepartureLocation.Equals(httpsInput.DepartureLocation))
                ) && 
                (
                    this.HouseWaybills == httpsInput.HouseWaybills ||
                    this.HouseWaybills != null &&
                    httpsInput.HouseWaybills != null &&
                    this.HouseWaybills.SequenceEqual(httpsInput.HouseWaybills)
                ) && 
                (
                    this.InvolvedParties == httpsInput.InvolvedParties ||
                    this.InvolvedParties != null &&
                    httpsInput.InvolvedParties != null &&
                    this.InvolvedParties.SequenceEqual(httpsInput.InvolvedParties)
                ) && 
                (
                    this.MasterWaybill == httpsInput.MasterWaybill ||
                    (this.MasterWaybill != null &&
                    this.MasterWaybill.Equals(httpsInput.MasterWaybill))
                ) && 
                (
                    this.ReferredBookingOption == httpsInput.ReferredBookingOption ||
                    (this.ReferredBookingOption != null &&
                    this.ReferredBookingOption.Equals(httpsInput.ReferredBookingOption))
                ) && 
                (
                    this.Shipment == httpsInput.Shipment ||
                    (this.Shipment != null &&
                    this.Shipment.Equals(httpsInput.Shipment))
                ) && 
                (
                    this.AccountingInformation == httpsInput.AccountingInformation ||
                    (this.AccountingInformation != null &&
                    this.AccountingInformation.Equals(httpsInput.AccountingInformation))
                ) && 
                (
                    this.CarrierDeclarationDate == httpsInput.CarrierDeclarationDate ||
                    (this.CarrierDeclarationDate != null &&
                    this.CarrierDeclarationDate.Equals(httpsInput.CarrierDeclarationDate))
                ) && 
                (
                    this.CarrierDeclarationSignature == httpsInput.CarrierDeclarationSignature ||
                    (this.CarrierDeclarationSignature != null &&
                    this.CarrierDeclarationSignature.Equals(httpsInput.CarrierDeclarationSignature))
                ) && 
                (
                    this.ConsignorDeclarationSignature == httpsInput.ConsignorDeclarationSignature ||
                    (this.ConsignorDeclarationSignature != null &&
                    this.ConsignorDeclarationSignature.Equals(httpsInput.ConsignorDeclarationSignature))
                ) && 
                (
                    this.CustomsOriginCode == httpsInput.CustomsOriginCode ||
                    (this.CustomsOriginCode != null &&
                    this.CustomsOriginCode.Equals(httpsInput.CustomsOriginCode))
                ) && 
                (
                    this.DestinationCharges == httpsInput.DestinationCharges ||
                    this.DestinationCharges != null &&
                    httpsInput.DestinationCharges != null &&
                    this.DestinationCharges.SequenceEqual(httpsInput.DestinationCharges)
                ) && 
                (
                    this.DestinationCurrencyCode == httpsInput.DestinationCurrencyCode ||
                    (this.DestinationCurrencyCode != null &&
                    this.DestinationCurrencyCode.Equals(httpsInput.DestinationCurrencyCode))
                ) && 
                (
                    this.DestinationCurrencyRate == httpsInput.DestinationCurrencyRate ||
                    this.DestinationCurrencyRate.Equals(httpsInput.DestinationCurrencyRate)
                ) && 
                (
                    this.ModularCheckNumber == httpsInput.ModularCheckNumber ||
                    this.ModularCheckNumber.Equals(httpsInput.ModularCheckNumber)
                ) && 
                (
                    this.OriginCurrency == httpsInput.OriginCurrency ||
                    (this.OriginCurrency != null &&
                    this.OriginCurrency.Equals(httpsInput.OriginCurrency))
                ) && 
                (
                    this.ShippingInfo == httpsInput.ShippingInfo ||
                    (this.ShippingInfo != null &&
                    this.ShippingInfo.Equals(httpsInput.ShippingInfo))
                ) && 
                (
                    this.HttpsCargoshippingRefNo == httpsInput.HttpsCargoshippingRefNo ||
                    (this.HttpsCargoshippingRefNo != null &&
                    this.HttpsCargoshippingRefNo.Equals(httpsInput.HttpsCargoshippingRefNo))
                ) && 
                (
                    this.HttpsCargowaybillNumber == httpsInput.HttpsCargowaybillNumber ||
                    (this.HttpsCargowaybillNumber != null &&
                    this.HttpsCargowaybillNumber.Equals(httpsInput.HttpsCargowaybillNumber))
                ) && 
                (
                    this.HttpsCargowaybillPrefix == httpsInput.HttpsCargowaybillPrefix ||
                    (this.HttpsCargowaybillPrefix != null &&
                    this.HttpsCargowaybillPrefix.Equals(httpsInput.HttpsCargowaybillPrefix))
                ) && 
                (
                    this.HttpsCargowaybillType == httpsInput.HttpsCargowaybillType ||
                    (this.HttpsCargowaybillType != null &&
                    this.HttpsCargowaybillType.Equals(httpsInput.HttpsCargowaybillType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.ExternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReferences.GetHashCode();
                }
                if (this.CompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkeletonIndicator.GetHashCode();
                if (this.ArrivalLocation != null)
                {
                    hashCode = (hashCode * 59) + this.ArrivalLocation.GetHashCode();
                }
                if (this.BillingDetails != null)
                {
                    hashCode = (hashCode * 59) + this.BillingDetails.GetHashCode();
                }
                if (this.CarrierDeclarationPlace != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierDeclarationPlace.GetHashCode();
                }
                if (this.DepartureLocation != null)
                {
                    hashCode = (hashCode * 59) + this.DepartureLocation.GetHashCode();
                }
                if (this.HouseWaybills != null)
                {
                    hashCode = (hashCode * 59) + this.HouseWaybills.GetHashCode();
                }
                if (this.InvolvedParties != null)
                {
                    hashCode = (hashCode * 59) + this.InvolvedParties.GetHashCode();
                }
                if (this.MasterWaybill != null)
                {
                    hashCode = (hashCode * 59) + this.MasterWaybill.GetHashCode();
                }
                if (this.ReferredBookingOption != null)
                {
                    hashCode = (hashCode * 59) + this.ReferredBookingOption.GetHashCode();
                }
                if (this.Shipment != null)
                {
                    hashCode = (hashCode * 59) + this.Shipment.GetHashCode();
                }
                if (this.AccountingInformation != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingInformation.GetHashCode();
                }
                if (this.CarrierDeclarationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierDeclarationDate.GetHashCode();
                }
                if (this.CarrierDeclarationSignature != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierDeclarationSignature.GetHashCode();
                }
                if (this.ConsignorDeclarationSignature != null)
                {
                    hashCode = (hashCode * 59) + this.ConsignorDeclarationSignature.GetHashCode();
                }
                if (this.CustomsOriginCode != null)
                {
                    hashCode = (hashCode * 59) + this.CustomsOriginCode.GetHashCode();
                }
                if (this.DestinationCharges != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationCharges.GetHashCode();
                }
                if (this.DestinationCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationCurrencyCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DestinationCurrencyRate.GetHashCode();
                hashCode = (hashCode * 59) + this.ModularCheckNumber.GetHashCode();
                if (this.OriginCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.OriginCurrency.GetHashCode();
                }
                if (this.ShippingInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingInfo.GetHashCode();
                }
                if (this.HttpsCargoshippingRefNo != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoshippingRefNo.GetHashCode();
                }
                if (this.HttpsCargowaybillNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargowaybillNumber.GetHashCode();
                }
                if (this.HttpsCargowaybillPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargowaybillPrefix.GetHashCode();
                }
                if (this.HttpsCargowaybillType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargowaybillType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
