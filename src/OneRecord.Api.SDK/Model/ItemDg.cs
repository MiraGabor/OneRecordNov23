/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// ItemDg
    /// </summary>
    [DataContract(Name = "ItemDg")]
    public partial class ItemDg : IEquatable<ItemDg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemDg" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoattachedIotDevices">CargoattachedIotDevices.</param>
        /// <param name="httpsCargoinvolvedInActions">CargoinvolvedInActions.</param>
        /// <param name="httpsCargocontainedItemInPiece">CargocontainedItemInPiece.</param>
        /// <param name="httpsCargodescribedByProduct">CargodescribedByProduct.</param>
        /// <param name="httpsCargodimensions">Cargodimensions.</param>
        /// <param name="httpsCargoitemQuantity">CargoitemQuantity.</param>
        /// <param name="httpsCargootherIdentifiers">CargootherIdentifiers.</param>
        /// <param name="httpsCargoproductionCountry">CargoproductionCountry.</param>
        /// <param name="httpsCargotargetCountry">CargotargetCountry.</param>
        /// <param name="httpsCargounitPrice">CargounitPrice.</param>
        /// <param name="httpsCargoweight">Cargoweight.</param>
        /// <param name="httpsCargobatchNumber">CargobatchNumber.</param>
        /// <param name="httpsCargoexpiryDate">CargoexpiryDate.</param>
        /// <param name="httpsCargolotNumber">CargolotNumber.</param>
        /// <param name="httpsCargoproductionDate">CargoproductionDate.</param>
        /// <param name="httpsCargoquantityForUnitPrice">CargoquantityForUnitPrice.</param>
        /// <param name="httpsCargoemergencyContact">CargoemergencyContact.</param>
        /// <param name="httpsCargonetWeightMeasure">CargonetWeightMeasure.</param>
        /// <param name="httpsCargoreportableQuantity">CargoreportableQuantity.</param>
        /// <param name="httpsCargosupplementaryInfoPrefix">CargosupplementaryInfoPrefix.</param>
        /// <param name="httpsCargosupplementaryInfoSuffix">CargosupplementaryInfoSuffix.</param>
        public ItemDg(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<IotDevice> httpsCargoattachedIotDevices = default(List<IotDevice>), List<LogisticsAction> httpsCargoinvolvedInActions = default(List<LogisticsAction>), Piece httpsCargocontainedItemInPiece = default(Piece), Product httpsCargodescribedByProduct = default(Product), Dimensions httpsCargodimensions = default(Dimensions), Value httpsCargoitemQuantity = default(Value), List<OtherIdentifier> httpsCargootherIdentifiers = default(List<OtherIdentifier>), Country httpsCargoproductionCountry = default(Country), Country httpsCargotargetCountry = default(Country), Value httpsCargounitPrice = default(Value), Value httpsCargoweight = default(Value), string httpsCargobatchNumber = default(string), DateTime httpsCargoexpiryDate = default(DateTime), string httpsCargolotNumber = default(string), DateTime httpsCargoproductionDate = default(DateTime), double httpsCargoquantityForUnitPrice = default(double), Person httpsCargoemergencyContact = default(Person), Value httpsCargonetWeightMeasure = default(Value), string httpsCargoreportableQuantity = default(string), string httpsCargosupplementaryInfoPrefix = default(string), string httpsCargosupplementaryInfoSuffix = default(string))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoattachedIotDevices = httpsCargoattachedIotDevices;
            this.HttpsCargoinvolvedInActions = httpsCargoinvolvedInActions;
            this.HttpsCargocontainedItemInPiece = httpsCargocontainedItemInPiece;
            this.HttpsCargodescribedByProduct = httpsCargodescribedByProduct;
            this.HttpsCargodimensions = httpsCargodimensions;
            this.HttpsCargoitemQuantity = httpsCargoitemQuantity;
            this.HttpsCargootherIdentifiers = httpsCargootherIdentifiers;
            this.HttpsCargoproductionCountry = httpsCargoproductionCountry;
            this.HttpsCargotargetCountry = httpsCargotargetCountry;
            this.HttpsCargounitPrice = httpsCargounitPrice;
            this.HttpsCargoweight = httpsCargoweight;
            this.HttpsCargobatchNumber = httpsCargobatchNumber;
            this.HttpsCargoexpiryDate = httpsCargoexpiryDate;
            this.HttpsCargolotNumber = httpsCargolotNumber;
            this.HttpsCargoproductionDate = httpsCargoproductionDate;
            this.HttpsCargoquantityForUnitPrice = httpsCargoquantityForUnitPrice;
            this.HttpsCargoemergencyContact = httpsCargoemergencyContact;
            this.HttpsCargonetWeightMeasure = httpsCargonetWeightMeasure;
            this.HttpsCargoreportableQuantity = httpsCargoreportableQuantity;
            this.HttpsCargosupplementaryInfoPrefix = httpsCargosupplementaryInfoPrefix;
            this.HttpsCargosupplementaryInfoSuffix = httpsCargosupplementaryInfoSuffix;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoattachedIotDevices
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#attachedIotDevices", EmitDefaultValue = false)]
        public List<IotDevice> HttpsCargoattachedIotDevices { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedInActions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#involvedInActions", EmitDefaultValue = false)]
        public List<LogisticsAction> HttpsCargoinvolvedInActions { get; set; }

        /// <summary>
        /// Gets or Sets CargocontainedItemInPiece
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#containedItemInPiece", EmitDefaultValue = false)]
        public Piece HttpsCargocontainedItemInPiece { get; set; }

        /// <summary>
        /// Gets or Sets CargodescribedByProduct
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#describedByProduct", EmitDefaultValue = false)]
        public Product HttpsCargodescribedByProduct { get; set; }

        /// <summary>
        /// Gets or Sets Cargodimensions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#dimensions", EmitDefaultValue = false)]
        public Dimensions HttpsCargodimensions { get; set; }

        /// <summary>
        /// Gets or Sets CargoitemQuantity
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#itemQuantity", EmitDefaultValue = false)]
        public Value HttpsCargoitemQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CargootherIdentifiers
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#otherIdentifiers", EmitDefaultValue = false)]
        public List<OtherIdentifier> HttpsCargootherIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets CargoproductionCountry
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#productionCountry", EmitDefaultValue = false)]
        public Country HttpsCargoproductionCountry { get; set; }

        /// <summary>
        /// Gets or Sets CargotargetCountry
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#targetCountry", EmitDefaultValue = false)]
        public Country HttpsCargotargetCountry { get; set; }

        /// <summary>
        /// Gets or Sets CargounitPrice
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#unitPrice", EmitDefaultValue = false)]
        public Value HttpsCargounitPrice { get; set; }

        /// <summary>
        /// Gets or Sets Cargoweight
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#weight", EmitDefaultValue = false)]
        public Value HttpsCargoweight { get; set; }

        /// <summary>
        /// Gets or Sets CargobatchNumber
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#batchNumber", EmitDefaultValue = false)]
        public string HttpsCargobatchNumber { get; set; }

        /// <summary>
        /// Gets or Sets CargoexpiryDate
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#expiryDate", EmitDefaultValue = false)]
        public DateTime HttpsCargoexpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets CargolotNumber
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#lotNumber", EmitDefaultValue = false)]
        public string HttpsCargolotNumber { get; set; }

        /// <summary>
        /// Gets or Sets CargoproductionDate
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#productionDate", EmitDefaultValue = false)]
        public DateTime HttpsCargoproductionDate { get; set; }

        /// <summary>
        /// Gets or Sets CargoquantityForUnitPrice
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#quantityForUnitPrice", EmitDefaultValue = false)]
        public double HttpsCargoquantityForUnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets CargoemergencyContact
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#emergencyContact", EmitDefaultValue = false)]
        public Person HttpsCargoemergencyContact { get; set; }

        /// <summary>
        /// Gets or Sets CargonetWeightMeasure
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#netWeightMeasure", EmitDefaultValue = false)]
        public Value HttpsCargonetWeightMeasure { get; set; }

        /// <summary>
        /// Gets or Sets CargoreportableQuantity
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#reportableQuantity", EmitDefaultValue = false)]
        public string HttpsCargoreportableQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CargosupplementaryInfoPrefix
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#supplementaryInfoPrefix", EmitDefaultValue = false)]
        public string HttpsCargosupplementaryInfoPrefix { get; set; }

        /// <summary>
        /// Gets or Sets CargosupplementaryInfoSuffix
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#supplementaryInfoSuffix", EmitDefaultValue = false)]
        public string HttpsCargosupplementaryInfoSuffix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemDg {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargoattachedIotDevices: ").Append(HttpsCargoattachedIotDevices).Append("\n");
            sb.Append("  CargoinvolvedInActions: ").Append(HttpsCargoinvolvedInActions).Append("\n");
            sb.Append("  CargocontainedItemInPiece: ").Append(HttpsCargocontainedItemInPiece).Append("\n");
            sb.Append("  CargodescribedByProduct: ").Append(HttpsCargodescribedByProduct).Append("\n");
            sb.Append("  Cargodimensions: ").Append(HttpsCargodimensions).Append("\n");
            sb.Append("  CargoitemQuantity: ").Append(HttpsCargoitemQuantity).Append("\n");
            sb.Append("  CargootherIdentifiers: ").Append(HttpsCargootherIdentifiers).Append("\n");
            sb.Append("  CargoproductionCountry: ").Append(HttpsCargoproductionCountry).Append("\n");
            sb.Append("  CargotargetCountry: ").Append(HttpsCargotargetCountry).Append("\n");
            sb.Append("  CargounitPrice: ").Append(HttpsCargounitPrice).Append("\n");
            sb.Append("  Cargoweight: ").Append(HttpsCargoweight).Append("\n");
            sb.Append("  CargobatchNumber: ").Append(HttpsCargobatchNumber).Append("\n");
            sb.Append("  CargoexpiryDate: ").Append(HttpsCargoexpiryDate).Append("\n");
            sb.Append("  CargolotNumber: ").Append(HttpsCargolotNumber).Append("\n");
            sb.Append("  CargoproductionDate: ").Append(HttpsCargoproductionDate).Append("\n");
            sb.Append("  CargoquantityForUnitPrice: ").Append(HttpsCargoquantityForUnitPrice).Append("\n");
            sb.Append("  CargoemergencyContact: ").Append(HttpsCargoemergencyContact).Append("\n");
            sb.Append("  CargonetWeightMeasure: ").Append(HttpsCargonetWeightMeasure).Append("\n");
            sb.Append("  CargoreportableQuantity: ").Append(HttpsCargoreportableQuantity).Append("\n");
            sb.Append("  CargosupplementaryInfoPrefix: ").Append(HttpsCargosupplementaryInfoPrefix).Append("\n");
            sb.Append("  CargosupplementaryInfoSuffix: ").Append(HttpsCargosupplementaryInfoSuffix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as ItemDg);
        }

        /// <summary>
        /// Returns true if ItemDg instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of ItemDg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemDg httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoattachedIotDevices == httpsInput.HttpsCargoattachedIotDevices ||
                    this.HttpsCargoattachedIotDevices != null &&
                    httpsInput.HttpsCargoattachedIotDevices != null &&
                    this.HttpsCargoattachedIotDevices.SequenceEqual(httpsInput.HttpsCargoattachedIotDevices)
                ) && 
                (
                    this.HttpsCargoinvolvedInActions == httpsInput.HttpsCargoinvolvedInActions ||
                    this.HttpsCargoinvolvedInActions != null &&
                    httpsInput.HttpsCargoinvolvedInActions != null &&
                    this.HttpsCargoinvolvedInActions.SequenceEqual(httpsInput.HttpsCargoinvolvedInActions)
                ) && 
                (
                    this.HttpsCargocontainedItemInPiece == httpsInput.HttpsCargocontainedItemInPiece ||
                    (this.HttpsCargocontainedItemInPiece != null &&
                    this.HttpsCargocontainedItemInPiece.Equals(httpsInput.HttpsCargocontainedItemInPiece))
                ) && 
                (
                    this.HttpsCargodescribedByProduct == httpsInput.HttpsCargodescribedByProduct ||
                    (this.HttpsCargodescribedByProduct != null &&
                    this.HttpsCargodescribedByProduct.Equals(httpsInput.HttpsCargodescribedByProduct))
                ) && 
                (
                    this.HttpsCargodimensions == httpsInput.HttpsCargodimensions ||
                    (this.HttpsCargodimensions != null &&
                    this.HttpsCargodimensions.Equals(httpsInput.HttpsCargodimensions))
                ) && 
                (
                    this.HttpsCargoitemQuantity == httpsInput.HttpsCargoitemQuantity ||
                    (this.HttpsCargoitemQuantity != null &&
                    this.HttpsCargoitemQuantity.Equals(httpsInput.HttpsCargoitemQuantity))
                ) && 
                (
                    this.HttpsCargootherIdentifiers == httpsInput.HttpsCargootherIdentifiers ||
                    this.HttpsCargootherIdentifiers != null &&
                    httpsInput.HttpsCargootherIdentifiers != null &&
                    this.HttpsCargootherIdentifiers.SequenceEqual(httpsInput.HttpsCargootherIdentifiers)
                ) && 
                (
                    this.HttpsCargoproductionCountry == httpsInput.HttpsCargoproductionCountry ||
                    (this.HttpsCargoproductionCountry != null &&
                    this.HttpsCargoproductionCountry.Equals(httpsInput.HttpsCargoproductionCountry))
                ) && 
                (
                    this.HttpsCargotargetCountry == httpsInput.HttpsCargotargetCountry ||
                    (this.HttpsCargotargetCountry != null &&
                    this.HttpsCargotargetCountry.Equals(httpsInput.HttpsCargotargetCountry))
                ) && 
                (
                    this.HttpsCargounitPrice == httpsInput.HttpsCargounitPrice ||
                    (this.HttpsCargounitPrice != null &&
                    this.HttpsCargounitPrice.Equals(httpsInput.HttpsCargounitPrice))
                ) && 
                (
                    this.HttpsCargoweight == httpsInput.HttpsCargoweight ||
                    (this.HttpsCargoweight != null &&
                    this.HttpsCargoweight.Equals(httpsInput.HttpsCargoweight))
                ) && 
                (
                    this.HttpsCargobatchNumber == httpsInput.HttpsCargobatchNumber ||
                    (this.HttpsCargobatchNumber != null &&
                    this.HttpsCargobatchNumber.Equals(httpsInput.HttpsCargobatchNumber))
                ) && 
                (
                    this.HttpsCargoexpiryDate == httpsInput.HttpsCargoexpiryDate ||
                    (this.HttpsCargoexpiryDate != null &&
                    this.HttpsCargoexpiryDate.Equals(httpsInput.HttpsCargoexpiryDate))
                ) && 
                (
                    this.HttpsCargolotNumber == httpsInput.HttpsCargolotNumber ||
                    (this.HttpsCargolotNumber != null &&
                    this.HttpsCargolotNumber.Equals(httpsInput.HttpsCargolotNumber))
                ) && 
                (
                    this.HttpsCargoproductionDate == httpsInput.HttpsCargoproductionDate ||
                    (this.HttpsCargoproductionDate != null &&
                    this.HttpsCargoproductionDate.Equals(httpsInput.HttpsCargoproductionDate))
                ) && 
                (
                    this.HttpsCargoquantityForUnitPrice == httpsInput.HttpsCargoquantityForUnitPrice ||
                    this.HttpsCargoquantityForUnitPrice.Equals(httpsInput.HttpsCargoquantityForUnitPrice)
                ) && 
                (
                    this.HttpsCargoemergencyContact == httpsInput.HttpsCargoemergencyContact ||
                    (this.HttpsCargoemergencyContact != null &&
                    this.HttpsCargoemergencyContact.Equals(httpsInput.HttpsCargoemergencyContact))
                ) && 
                (
                    this.HttpsCargonetWeightMeasure == httpsInput.HttpsCargonetWeightMeasure ||
                    (this.HttpsCargonetWeightMeasure != null &&
                    this.HttpsCargonetWeightMeasure.Equals(httpsInput.HttpsCargonetWeightMeasure))
                ) && 
                (
                    this.HttpsCargoreportableQuantity == httpsInput.HttpsCargoreportableQuantity ||
                    (this.HttpsCargoreportableQuantity != null &&
                    this.HttpsCargoreportableQuantity.Equals(httpsInput.HttpsCargoreportableQuantity))
                ) && 
                (
                    this.HttpsCargosupplementaryInfoPrefix == httpsInput.HttpsCargosupplementaryInfoPrefix ||
                    (this.HttpsCargosupplementaryInfoPrefix != null &&
                    this.HttpsCargosupplementaryInfoPrefix.Equals(httpsInput.HttpsCargosupplementaryInfoPrefix))
                ) && 
                (
                    this.HttpsCargosupplementaryInfoSuffix == httpsInput.HttpsCargosupplementaryInfoSuffix ||
                    (this.HttpsCargosupplementaryInfoSuffix != null &&
                    this.HttpsCargosupplementaryInfoSuffix.Equals(httpsInput.HttpsCargosupplementaryInfoSuffix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoattachedIotDevices != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoattachedIotDevices.GetHashCode();
                }
                if (this.HttpsCargoinvolvedInActions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoinvolvedInActions.GetHashCode();
                }
                if (this.HttpsCargocontainedItemInPiece != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontainedItemInPiece.GetHashCode();
                }
                if (this.HttpsCargodescribedByProduct != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodescribedByProduct.GetHashCode();
                }
                if (this.HttpsCargodimensions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodimensions.GetHashCode();
                }
                if (this.HttpsCargoitemQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoitemQuantity.GetHashCode();
                }
                if (this.HttpsCargootherIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargootherIdentifiers.GetHashCode();
                }
                if (this.HttpsCargoproductionCountry != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoproductionCountry.GetHashCode();
                }
                if (this.HttpsCargotargetCountry != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotargetCountry.GetHashCode();
                }
                if (this.HttpsCargounitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargounitPrice.GetHashCode();
                }
                if (this.HttpsCargoweight != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoweight.GetHashCode();
                }
                if (this.HttpsCargobatchNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobatchNumber.GetHashCode();
                }
                if (this.HttpsCargoexpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexpiryDate.GetHashCode();
                }
                if (this.HttpsCargolotNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargolotNumber.GetHashCode();
                }
                if (this.HttpsCargoproductionDate != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoproductionDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoquantityForUnitPrice.GetHashCode();
                if (this.HttpsCargoemergencyContact != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoemergencyContact.GetHashCode();
                }
                if (this.HttpsCargonetWeightMeasure != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargonetWeightMeasure.GetHashCode();
                }
                if (this.HttpsCargoreportableQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoreportableQuantity.GetHashCode();
                }
                if (this.HttpsCargosupplementaryInfoPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargosupplementaryInfoPrefix.GetHashCode();
                }
                if (this.HttpsCargosupplementaryInfoSuffix != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargosupplementaryInfoSuffix.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
