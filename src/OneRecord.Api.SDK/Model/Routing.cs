/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// Routing
    /// </summary>
    [DataContract(Name = "Routing")]
    public partial class Routing : IEquatable<Routing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Routing" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoexcludedViaPoints">CargoexcludedViaPoints.</param>
        /// <param name="httpsCargoforBookingOptionRequest">CargoforBookingOptionRequest.</param>
        /// <param name="httpsCargoforBookingOptions">CargoforBookingOptions.</param>
        /// <param name="httpsCargoscheduledLegs">CargoscheduledLegs.</param>
        /// <param name="httpsCargoaircraftPossibilityCode">CargoaircraftPossibilityCode.</param>
        /// <param name="httpsCargolatestArrivalDateTime">CargolatestArrivalDateTime.</param>
        /// <param name="httpsCargomaxConnections">CargomaxConnections.</param>
        /// <param name="httpsCargoonlineInd">CargoonlineInd.</param>
        /// <param name="httpsCargorfsInd">CargorfsInd.</param>
        public Routing(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<Location> httpsCargoexcludedViaPoints = default(List<Location>), BookingOptionRequest httpsCargoforBookingOptionRequest = default(BookingOptionRequest), BookingOption httpsCargoforBookingOptions = default(BookingOption), List<ScheduledLegs> httpsCargoscheduledLegs = default(List<ScheduledLegs>), string httpsCargoaircraftPossibilityCode = default(string), DateTime httpsCargolatestArrivalDateTime = default(DateTime), int httpsCargomaxConnections = default(int), bool httpsCargoonlineInd = default(bool), bool httpsCargorfsInd = default(bool))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoexcludedViaPoints = httpsCargoexcludedViaPoints;
            this.HttpsCargoforBookingOptionRequest = httpsCargoforBookingOptionRequest;
            this.HttpsCargoforBookingOptions = httpsCargoforBookingOptions;
            this.HttpsCargoscheduledLegs = httpsCargoscheduledLegs;
            this.HttpsCargoaircraftPossibilityCode = httpsCargoaircraftPossibilityCode;
            this.HttpsCargolatestArrivalDateTime = httpsCargolatestArrivalDateTime;
            this.HttpsCargomaxConnections = httpsCargomaxConnections;
            this.HttpsCargoonlineInd = httpsCargoonlineInd;
            this.HttpsCargorfsInd = httpsCargorfsInd;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoexcludedViaPoints
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#excludedViaPoints", EmitDefaultValue = false)]
        public List<Location> HttpsCargoexcludedViaPoints { get; set; }

        /// <summary>
        /// Gets or Sets CargoforBookingOptionRequest
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#forBookingOptionRequest", EmitDefaultValue = false)]
        public BookingOptionRequest HttpsCargoforBookingOptionRequest { get; set; }

        /// <summary>
        /// Gets or Sets CargoforBookingOptions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#forBookingOptions", EmitDefaultValue = false)]
        public BookingOption HttpsCargoforBookingOptions { get; set; }

        /// <summary>
        /// Gets or Sets CargoscheduledLegs
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#scheduledLegs", EmitDefaultValue = false)]
        public List<ScheduledLegs> HttpsCargoscheduledLegs { get; set; }

        /// <summary>
        /// Gets or Sets CargoaircraftPossibilityCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#aircraftPossibilityCode", EmitDefaultValue = false)]
        public string HttpsCargoaircraftPossibilityCode { get; set; }

        /// <summary>
        /// Gets or Sets CargolatestArrivalDateTime
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#latestArrivalDateTime", EmitDefaultValue = false)]
        public DateTime HttpsCargolatestArrivalDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CargomaxConnections
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#maxConnections", EmitDefaultValue = false)]
        public int HttpsCargomaxConnections { get; set; }

        /// <summary>
        /// Gets or Sets CargoonlineInd
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#onlineInd", EmitDefaultValue = true)]
        public bool HttpsCargoonlineInd { get; set; }

        /// <summary>
        /// Gets or Sets CargorfsInd
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#rfsInd", EmitDefaultValue = true)]
        public bool HttpsCargorfsInd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Routing {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargoexcludedViaPoints: ").Append(HttpsCargoexcludedViaPoints).Append("\n");
            sb.Append("  CargoforBookingOptionRequest: ").Append(HttpsCargoforBookingOptionRequest).Append("\n");
            sb.Append("  CargoforBookingOptions: ").Append(HttpsCargoforBookingOptions).Append("\n");
            sb.Append("  CargoscheduledLegs: ").Append(HttpsCargoscheduledLegs).Append("\n");
            sb.Append("  CargoaircraftPossibilityCode: ").Append(HttpsCargoaircraftPossibilityCode).Append("\n");
            sb.Append("  CargolatestArrivalDateTime: ").Append(HttpsCargolatestArrivalDateTime).Append("\n");
            sb.Append("  CargomaxConnections: ").Append(HttpsCargomaxConnections).Append("\n");
            sb.Append("  CargoonlineInd: ").Append(HttpsCargoonlineInd).Append("\n");
            sb.Append("  CargorfsInd: ").Append(HttpsCargorfsInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as Routing);
        }

        /// <summary>
        /// Returns true if Routing instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of Routing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Routing httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoexcludedViaPoints == httpsInput.HttpsCargoexcludedViaPoints ||
                    this.HttpsCargoexcludedViaPoints != null &&
                    httpsInput.HttpsCargoexcludedViaPoints != null &&
                    this.HttpsCargoexcludedViaPoints.SequenceEqual(httpsInput.HttpsCargoexcludedViaPoints)
                ) && 
                (
                    this.HttpsCargoforBookingOptionRequest == httpsInput.HttpsCargoforBookingOptionRequest ||
                    (this.HttpsCargoforBookingOptionRequest != null &&
                    this.HttpsCargoforBookingOptionRequest.Equals(httpsInput.HttpsCargoforBookingOptionRequest))
                ) && 
                (
                    this.HttpsCargoforBookingOptions == httpsInput.HttpsCargoforBookingOptions ||
                    (this.HttpsCargoforBookingOptions != null &&
                    this.HttpsCargoforBookingOptions.Equals(httpsInput.HttpsCargoforBookingOptions))
                ) && 
                (
                    this.HttpsCargoscheduledLegs == httpsInput.HttpsCargoscheduledLegs ||
                    this.HttpsCargoscheduledLegs != null &&
                    httpsInput.HttpsCargoscheduledLegs != null &&
                    this.HttpsCargoscheduledLegs.SequenceEqual(httpsInput.HttpsCargoscheduledLegs)
                ) && 
                (
                    this.HttpsCargoaircraftPossibilityCode == httpsInput.HttpsCargoaircraftPossibilityCode ||
                    (this.HttpsCargoaircraftPossibilityCode != null &&
                    this.HttpsCargoaircraftPossibilityCode.Equals(httpsInput.HttpsCargoaircraftPossibilityCode))
                ) && 
                (
                    this.HttpsCargolatestArrivalDateTime == httpsInput.HttpsCargolatestArrivalDateTime ||
                    (this.HttpsCargolatestArrivalDateTime != null &&
                    this.HttpsCargolatestArrivalDateTime.Equals(httpsInput.HttpsCargolatestArrivalDateTime))
                ) && 
                (
                    this.HttpsCargomaxConnections == httpsInput.HttpsCargomaxConnections ||
                    this.HttpsCargomaxConnections.Equals(httpsInput.HttpsCargomaxConnections)
                ) && 
                (
                    this.HttpsCargoonlineInd == httpsInput.HttpsCargoonlineInd ||
                    this.HttpsCargoonlineInd.Equals(httpsInput.HttpsCargoonlineInd)
                ) && 
                (
                    this.HttpsCargorfsInd == httpsInput.HttpsCargorfsInd ||
                    this.HttpsCargorfsInd.Equals(httpsInput.HttpsCargorfsInd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoexcludedViaPoints != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexcludedViaPoints.GetHashCode();
                }
                if (this.HttpsCargoforBookingOptionRequest != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoforBookingOptionRequest.GetHashCode();
                }
                if (this.HttpsCargoforBookingOptions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoforBookingOptions.GetHashCode();
                }
                if (this.HttpsCargoscheduledLegs != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoscheduledLegs.GetHashCode();
                }
                if (this.HttpsCargoaircraftPossibilityCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoaircraftPossibilityCode.GetHashCode();
                }
                if (this.HttpsCargolatestArrivalDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargolatestArrivalDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargomaxConnections.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpsCargoonlineInd.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpsCargorfsInd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
