/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargocountry">Cargocountry.</param>
        /// <param name="httpsCargoaddressCode">CargoaddressCode.</param>
        /// <param name="httpsCargoaddressCodeType">CargoaddressCodeType.</param>
        /// <param name="httpsCargocityCode">CargocityCode.</param>
        /// <param name="httpsCargocityName">CargocityName.</param>
        /// <param name="httpsCargopostOfficeBox">CargopostOfficeBox.</param>
        /// <param name="httpsCargopostalCode">CargopostalCode.</param>
        /// <param name="httpsCargoregionCode">CargoregionCode.</param>
        /// <param name="httpsCargoregionName">CargoregionName.</param>
        /// <param name="httpsCargostreetAddressLines">CargostreetAddressLines.</param>
        public Address(string httpsId = default(string), List<string> httpsType = default(List<string>), Country httpsCargocountry = default(Country), string httpsCargoaddressCode = default(string), string httpsCargoaddressCodeType = default(string), string httpsCargocityCode = default(string), string httpsCargocityName = default(string), string httpsCargopostOfficeBox = default(string), string httpsCargopostalCode = default(string), string httpsCargoregionCode = default(string), string httpsCargoregionName = default(string), List<string> httpsCargostreetAddressLines = default(List<string>))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargocountry = httpsCargocountry;
            this.HttpsCargoaddressCode = httpsCargoaddressCode;
            this.HttpsCargoaddressCodeType = httpsCargoaddressCodeType;
            this.HttpsCargocityCode = httpsCargocityCode;
            this.HttpsCargocityName = httpsCargocityName;
            this.HttpsCargopostOfficeBox = httpsCargopostOfficeBox;
            this.HttpsCargopostalCode = httpsCargopostalCode;
            this.HttpsCargoregionCode = httpsCargoregionCode;
            this.HttpsCargoregionName = httpsCargoregionName;
            this.HttpsCargostreetAddressLines = httpsCargostreetAddressLines;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargocountry
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#country", EmitDefaultValue = false)]
        public Country HttpsCargocountry { get; set; }

        /// <summary>
        /// Gets or Sets CargoaddressCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#addressCode", EmitDefaultValue = false)]
        public string HttpsCargoaddressCode { get; set; }

        /// <summary>
        /// Gets or Sets CargoaddressCodeType
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#addressCodeType", EmitDefaultValue = false)]
        public string HttpsCargoaddressCodeType { get; set; }

        /// <summary>
        /// Gets or Sets CargocityCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#cityCode", EmitDefaultValue = false)]
        public string HttpsCargocityCode { get; set; }

        /// <summary>
        /// Gets or Sets CargocityName
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#cityName", EmitDefaultValue = false)]
        public string HttpsCargocityName { get; set; }

        /// <summary>
        /// Gets or Sets CargopostOfficeBox
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#postOfficeBox", EmitDefaultValue = false)]
        public string HttpsCargopostOfficeBox { get; set; }

        /// <summary>
        /// Gets or Sets CargopostalCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#postalCode", EmitDefaultValue = false)]
        public string HttpsCargopostalCode { get; set; }

        /// <summary>
        /// Gets or Sets CargoregionCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#regionCode", EmitDefaultValue = false)]
        public string HttpsCargoregionCode { get; set; }

        /// <summary>
        /// Gets or Sets CargoregionName
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#regionName", EmitDefaultValue = false)]
        public string HttpsCargoregionName { get; set; }

        /// <summary>
        /// Gets or Sets CargostreetAddressLines
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#streetAddressLines", EmitDefaultValue = false)]
        public List<string> HttpsCargostreetAddressLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargocountry: ").Append(HttpsCargocountry).Append("\n");
            sb.Append("  CargoaddressCode: ").Append(HttpsCargoaddressCode).Append("\n");
            sb.Append("  CargoaddressCodeType: ").Append(HttpsCargoaddressCodeType).Append("\n");
            sb.Append("  CargocityCode: ").Append(HttpsCargocityCode).Append("\n");
            sb.Append("  CargocityName: ").Append(HttpsCargocityName).Append("\n");
            sb.Append("  CargopostOfficeBox: ").Append(HttpsCargopostOfficeBox).Append("\n");
            sb.Append("  CargopostalCode: ").Append(HttpsCargopostalCode).Append("\n");
            sb.Append("  CargoregionCode: ").Append(HttpsCargoregionCode).Append("\n");
            sb.Append("  CargoregionName: ").Append(HttpsCargoregionName).Append("\n");
            sb.Append("  CargostreetAddressLines: ").Append(HttpsCargostreetAddressLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargocountry == httpsInput.HttpsCargocountry ||
                    (this.HttpsCargocountry != null &&
                    this.HttpsCargocountry.Equals(httpsInput.HttpsCargocountry))
                ) && 
                (
                    this.HttpsCargoaddressCode == httpsInput.HttpsCargoaddressCode ||
                    (this.HttpsCargoaddressCode != null &&
                    this.HttpsCargoaddressCode.Equals(httpsInput.HttpsCargoaddressCode))
                ) && 
                (
                    this.HttpsCargoaddressCodeType == httpsInput.HttpsCargoaddressCodeType ||
                    (this.HttpsCargoaddressCodeType != null &&
                    this.HttpsCargoaddressCodeType.Equals(httpsInput.HttpsCargoaddressCodeType))
                ) && 
                (
                    this.HttpsCargocityCode == httpsInput.HttpsCargocityCode ||
                    (this.HttpsCargocityCode != null &&
                    this.HttpsCargocityCode.Equals(httpsInput.HttpsCargocityCode))
                ) && 
                (
                    this.HttpsCargocityName == httpsInput.HttpsCargocityName ||
                    (this.HttpsCargocityName != null &&
                    this.HttpsCargocityName.Equals(httpsInput.HttpsCargocityName))
                ) && 
                (
                    this.HttpsCargopostOfficeBox == httpsInput.HttpsCargopostOfficeBox ||
                    (this.HttpsCargopostOfficeBox != null &&
                    this.HttpsCargopostOfficeBox.Equals(httpsInput.HttpsCargopostOfficeBox))
                ) && 
                (
                    this.HttpsCargopostalCode == httpsInput.HttpsCargopostalCode ||
                    (this.HttpsCargopostalCode != null &&
                    this.HttpsCargopostalCode.Equals(httpsInput.HttpsCargopostalCode))
                ) && 
                (
                    this.HttpsCargoregionCode == httpsInput.HttpsCargoregionCode ||
                    (this.HttpsCargoregionCode != null &&
                    this.HttpsCargoregionCode.Equals(httpsInput.HttpsCargoregionCode))
                ) && 
                (
                    this.HttpsCargoregionName == httpsInput.HttpsCargoregionName ||
                    (this.HttpsCargoregionName != null &&
                    this.HttpsCargoregionName.Equals(httpsInput.HttpsCargoregionName))
                ) && 
                (
                    this.HttpsCargostreetAddressLines == httpsInput.HttpsCargostreetAddressLines ||
                    this.HttpsCargostreetAddressLines != null &&
                    httpsInput.HttpsCargostreetAddressLines != null &&
                    this.HttpsCargostreetAddressLines.SequenceEqual(httpsInput.HttpsCargostreetAddressLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargocountry != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocountry.GetHashCode();
                }
                if (this.HttpsCargoaddressCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoaddressCode.GetHashCode();
                }
                if (this.HttpsCargoaddressCodeType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoaddressCodeType.GetHashCode();
                }
                if (this.HttpsCargocityCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocityCode.GetHashCode();
                }
                if (this.HttpsCargocityName != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocityName.GetHashCode();
                }
                if (this.HttpsCargopostOfficeBox != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopostOfficeBox.GetHashCode();
                }
                if (this.HttpsCargopostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopostalCode.GetHashCode();
                }
                if (this.HttpsCargoregionCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoregionCode.GetHashCode();
                }
                if (this.HttpsCargoregionName != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoregionName.GetHashCode();
                }
                if (this.HttpsCargostreetAddressLines != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargostreetAddressLines.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
