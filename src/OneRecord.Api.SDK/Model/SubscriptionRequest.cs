/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// SubscriptionRequest
    /// </summary>
    [DataContract(Name = "SubscriptionRequest")]
    public partial class SubscriptionRequest : IEquatable<SubscriptionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionRequest" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsApihasError">ApihasError.</param>
        /// <param name="httpsApihasRequestStatus">ApihasRequestStatus.</param>
        /// <param name="httpsApiisRequestedBy">ApiisRequestedBy.</param>
        /// <param name="httpsApiisRevokedBy">ApiisRevokedBy.</param>
        /// <param name="httpsApiisRequestedAt">ApiisRequestedAt.</param>
        /// <param name="httpsApiisRevokedAt">ApiisRevokedAt.</param>
        /// <param name="httpsApihasAccessDelegation">ApihasAccessDelegation.</param>
        /// <param name="httpsApihasChange">ApihasChange.</param>
        /// <param name="httpsApihasSubscription">ApihasSubscription.</param>
        public SubscriptionRequest(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Error> httpsApihasError = default(List<Error>), RequestStatus httpsApihasRequestStatus = default(RequestStatus), Organization httpsApiisRequestedBy = default(Organization), Organization httpsApiisRevokedBy = default(Organization), DateTime httpsApiisRequestedAt = default(DateTime), DateTime httpsApiisRevokedAt = default(DateTime), AccessDelegation httpsApihasAccessDelegation = default(AccessDelegation), Change httpsApihasChange = default(Change), Subscription httpsApihasSubscription = default(Subscription))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsApihasError = httpsApihasError;
            this.HttpsApihasRequestStatus = httpsApihasRequestStatus;
            this.HttpsApiisRequestedBy = httpsApiisRequestedBy;
            this.HttpsApiisRevokedBy = httpsApiisRevokedBy;
            this.HttpsApiisRequestedAt = httpsApiisRequestedAt;
            this.HttpsApiisRevokedAt = httpsApiisRevokedAt;
            this.HttpsApihasAccessDelegation = httpsApihasAccessDelegation;
            this.HttpsApihasChange = httpsApihasChange;
            this.HttpsApihasSubscription = httpsApihasSubscription;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets ApihasError
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasError", EmitDefaultValue = false)]
        public List<Error> HttpsApihasError { get; set; }

        /// <summary>
        /// Gets or Sets ApihasRequestStatus
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasRequestStatus", EmitDefaultValue = false)]
        public RequestStatus HttpsApihasRequestStatus { get; set; }

        /// <summary>
        /// Gets or Sets ApiisRequestedBy
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#isRequestedBy", EmitDefaultValue = false)]
        public Organization HttpsApiisRequestedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApiisRevokedBy
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#isRevokedBy", EmitDefaultValue = false)]
        public Organization HttpsApiisRevokedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApiisRequestedAt
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#isRequestedAt", EmitDefaultValue = false)]
        public DateTime HttpsApiisRequestedAt { get; set; }

        /// <summary>
        /// Gets or Sets ApiisRevokedAt
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#isRevokedAt", EmitDefaultValue = false)]
        public DateTime HttpsApiisRevokedAt { get; set; }

        /// <summary>
        /// Gets or Sets ApihasAccessDelegation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasAccessDelegation", EmitDefaultValue = false)]
        public AccessDelegation HttpsApihasAccessDelegation { get; set; }

        /// <summary>
        /// Gets or Sets ApihasChange
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasChange", EmitDefaultValue = false)]
        public Change HttpsApihasChange { get; set; }

        /// <summary>
        /// Gets or Sets ApihasSubscription
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/api#hasSubscription", EmitDefaultValue = false)]
        public Subscription HttpsApihasSubscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionRequest {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  ApihasError: ").Append(HttpsApihasError).Append("\n");
            sb.Append("  ApihasRequestStatus: ").Append(HttpsApihasRequestStatus).Append("\n");
            sb.Append("  ApiisRequestedBy: ").Append(HttpsApiisRequestedBy).Append("\n");
            sb.Append("  ApiisRevokedBy: ").Append(HttpsApiisRevokedBy).Append("\n");
            sb.Append("  ApiisRequestedAt: ").Append(HttpsApiisRequestedAt).Append("\n");
            sb.Append("  ApiisRevokedAt: ").Append(HttpsApiisRevokedAt).Append("\n");
            sb.Append("  ApihasAccessDelegation: ").Append(HttpsApihasAccessDelegation).Append("\n");
            sb.Append("  ApihasChange: ").Append(HttpsApihasChange).Append("\n");
            sb.Append("  ApihasSubscription: ").Append(HttpsApihasSubscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as SubscriptionRequest);
        }

        /// <summary>
        /// Returns true if SubscriptionRequest instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of SubscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionRequest httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsApihasError == httpsInput.HttpsApihasError ||
                    this.HttpsApihasError != null &&
                    httpsInput.HttpsApihasError != null &&
                    this.HttpsApihasError.SequenceEqual(httpsInput.HttpsApihasError)
                ) && 
                (
                    this.HttpsApihasRequestStatus == httpsInput.HttpsApihasRequestStatus ||
                    (this.HttpsApihasRequestStatus != null &&
                    this.HttpsApihasRequestStatus.Equals(httpsInput.HttpsApihasRequestStatus))
                ) && 
                (
                    this.HttpsApiisRequestedBy == httpsInput.HttpsApiisRequestedBy ||
                    (this.HttpsApiisRequestedBy != null &&
                    this.HttpsApiisRequestedBy.Equals(httpsInput.HttpsApiisRequestedBy))
                ) && 
                (
                    this.HttpsApiisRevokedBy == httpsInput.HttpsApiisRevokedBy ||
                    (this.HttpsApiisRevokedBy != null &&
                    this.HttpsApiisRevokedBy.Equals(httpsInput.HttpsApiisRevokedBy))
                ) && 
                (
                    this.HttpsApiisRequestedAt == httpsInput.HttpsApiisRequestedAt ||
                    (this.HttpsApiisRequestedAt != null &&
                    this.HttpsApiisRequestedAt.Equals(httpsInput.HttpsApiisRequestedAt))
                ) && 
                (
                    this.HttpsApiisRevokedAt == httpsInput.HttpsApiisRevokedAt ||
                    (this.HttpsApiisRevokedAt != null &&
                    this.HttpsApiisRevokedAt.Equals(httpsInput.HttpsApiisRevokedAt))
                ) && 
                (
                    this.HttpsApihasAccessDelegation == httpsInput.HttpsApihasAccessDelegation ||
                    (this.HttpsApihasAccessDelegation != null &&
                    this.HttpsApihasAccessDelegation.Equals(httpsInput.HttpsApihasAccessDelegation))
                ) && 
                (
                    this.HttpsApihasChange == httpsInput.HttpsApihasChange ||
                    (this.HttpsApihasChange != null &&
                    this.HttpsApihasChange.Equals(httpsInput.HttpsApihasChange))
                ) && 
                (
                    this.HttpsApihasSubscription == httpsInput.HttpsApihasSubscription ||
                    (this.HttpsApihasSubscription != null &&
                    this.HttpsApihasSubscription.Equals(httpsInput.HttpsApihasSubscription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsApihasError != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasError.GetHashCode();
                }
                if (this.HttpsApihasRequestStatus != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasRequestStatus.GetHashCode();
                }
                if (this.HttpsApiisRequestedBy != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApiisRequestedBy.GetHashCode();
                }
                if (this.HttpsApiisRevokedBy != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApiisRevokedBy.GetHashCode();
                }
                if (this.HttpsApiisRequestedAt != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApiisRequestedAt.GetHashCode();
                }
                if (this.HttpsApiisRevokedAt != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApiisRevokedAt.GetHashCode();
                }
                if (this.HttpsApihasAccessDelegation != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasAccessDelegation.GetHashCode();
                }
                if (this.HttpsApihasChange != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasChange.GetHashCode();
                }
                if (this.HttpsApihasSubscription != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsApihasSubscription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
