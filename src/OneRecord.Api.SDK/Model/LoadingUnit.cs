/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// LoadingUnit
    /// </summary>
    [DataContract(Name = "LoadingUnit")]
    public partial class LoadingUnit : IEquatable<LoadingUnit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadingUnit" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="checks">Cargochecks.</param>
        /// <param name="events">Cargoevents.</param>
        /// <param name="externalReferences">CargoexternalReferences.</param>
        /// <param name="companyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="skeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="attachedIotDevices">CargoattachedIotDevices.</param>
        /// <param name="involvedInActions">CargoinvolvedInActions.</param>
        /// <param name="loadedPiecesOnLoadingUnit">CargoloadedPiecesOnLoadingUnit.</param>
        /// <param name="tareWeight">CargotareWeight.</param>
        /// <param name="remarks">Cargoremarks.</param>
        public LoadingUnit(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> checks = default(List<Check>), List<LogisticsEvent> events = default(List<LogisticsEvent>), List<ExternalReference> externalReferences = default(List<ExternalReference>), string companyIdentifier = default(string), bool skeletonIndicator = default(bool), List<IotDevice> attachedIotDevices = default(List<IotDevice>), List<LogisticsAction> involvedInActions = default(List<LogisticsAction>), List<Piece> loadedPiecesOnLoadingUnit = default(List<Piece>), Value tareWeight = default(Value), string remarks = default(string))
        {
            this.Id = httpsId;
            this.Type = httpsType;
            this.checks = checks;
            this.events = events;
            this.externalReferences = externalReferences;
            this.companyIdentifier = companyIdentifier;
            this.skeletonIndicator = skeletonIndicator;
            this.attachedIotDevices = attachedIotDevices;
            this.involvedInActions = involvedInActions;
            this.loadedPiecesOnLoadingUnit = loadedPiecesOnLoadingUnit;
            this.tareWeight = tareWeight;
            this.remarks = remarks;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> Type { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> checks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> events { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> externalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string companyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool skeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoattachedIotDevices
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#attachedIotDevices", EmitDefaultValue = false)]
        public List<IotDevice> attachedIotDevices { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedInActions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#involvedInActions", EmitDefaultValue = false)]
        public List<LogisticsAction> involvedInActions { get; set; }

        /// <summary>
        /// Gets or Sets CargoloadedPiecesOnLoadingUnit
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#loadedPiecesOnLoadingUnit", EmitDefaultValue = false)]
        public List<Piece> loadedPiecesOnLoadingUnit { get; set; }

        /// <summary>
        /// Gets or Sets CargotareWeight
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#tareWeight", EmitDefaultValue = false)]
        public Value tareWeight { get; set; }

        /// <summary>
        /// Gets or Sets Cargoremarks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#remarks", EmitDefaultValue = false)]
        public string remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadingUnit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cargochecks: ").Append(checks).Append("\n");
            sb.Append("  Cargoevents: ").Append(events).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(externalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(companyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(skeletonIndicator).Append("\n");
            sb.Append("  CargoattachedIotDevices: ").Append(attachedIotDevices).Append("\n");
            sb.Append("  CargoinvolvedInActions: ").Append(involvedInActions).Append("\n");
            sb.Append("  CargoloadedPiecesOnLoadingUnit: ").Append(loadedPiecesOnLoadingUnit).Append("\n");
            sb.Append("  CargotareWeight: ").Append(tareWeight).Append("\n");
            sb.Append("  Cargoremarks: ").Append(remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as LoadingUnit);
        }

        /// <summary>
        /// Returns true if LoadingUnit instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of LoadingUnit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadingUnit httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.checks == httpsInput.checks ||
                    this.checks != null &&
                    httpsInput.checks != null &&
                    this.checks.SequenceEqual(httpsInput.checks)
                ) && 
                (
                    this.events == httpsInput.events ||
                    this.events != null &&
                    httpsInput.events != null &&
                    this.events.SequenceEqual(httpsInput.events)
                ) && 
                (
                    this.externalReferences == httpsInput.externalReferences ||
                    this.externalReferences != null &&
                    httpsInput.externalReferences != null &&
                    this.externalReferences.SequenceEqual(httpsInput.externalReferences)
                ) && 
                (
                    this.companyIdentifier == httpsInput.companyIdentifier ||
                    (this.companyIdentifier != null &&
                    this.companyIdentifier.Equals(httpsInput.companyIdentifier))
                ) && 
                (
                    this.skeletonIndicator == httpsInput.skeletonIndicator ||
                    this.skeletonIndicator.Equals(httpsInput.skeletonIndicator)
                ) && 
                (
                    this.attachedIotDevices == httpsInput.attachedIotDevices ||
                    this.attachedIotDevices != null &&
                    httpsInput.attachedIotDevices != null &&
                    this.attachedIotDevices.SequenceEqual(httpsInput.attachedIotDevices)
                ) && 
                (
                    this.involvedInActions == httpsInput.involvedInActions ||
                    this.involvedInActions != null &&
                    httpsInput.involvedInActions != null &&
                    this.involvedInActions.SequenceEqual(httpsInput.involvedInActions)
                ) && 
                (
                    this.loadedPiecesOnLoadingUnit == httpsInput.loadedPiecesOnLoadingUnit ||
                    this.loadedPiecesOnLoadingUnit != null &&
                    httpsInput.loadedPiecesOnLoadingUnit != null &&
                    this.loadedPiecesOnLoadingUnit.SequenceEqual(httpsInput.loadedPiecesOnLoadingUnit)
                ) && 
                (
                    this.tareWeight == httpsInput.tareWeight ||
                    (this.tareWeight != null &&
                    this.tareWeight.Equals(httpsInput.tareWeight))
                ) && 
                (
                    this.remarks == httpsInput.remarks ||
                    (this.remarks != null &&
                    this.remarks.Equals(httpsInput.remarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.checks != null)
                {
                    hashCode = (hashCode * 59) + this.checks.GetHashCode();
                }
                if (this.events != null)
                {
                    hashCode = (hashCode * 59) + this.events.GetHashCode();
                }
                if (this.externalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.externalReferences.GetHashCode();
                }
                if (this.companyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.companyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.skeletonIndicator.GetHashCode();
                if (this.attachedIotDevices != null)
                {
                    hashCode = (hashCode * 59) + this.attachedIotDevices.GetHashCode();
                }
                if (this.involvedInActions != null)
                {
                    hashCode = (hashCode * 59) + this.involvedInActions.GetHashCode();
                }
                if (this.loadedPiecesOnLoadingUnit != null)
                {
                    hashCode = (hashCode * 59) + this.loadedPiecesOnLoadingUnit.GetHashCode();
                }
                if (this.tareWeight != null)
                {
                    hashCode = (hashCode * 59) + this.tareWeight.GetHashCode();
                }
                if (this.remarks != null)
                {
                    hashCode = (hashCode * 59) + this.remarks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
