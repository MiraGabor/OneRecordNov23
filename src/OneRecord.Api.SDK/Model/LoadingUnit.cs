/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// LoadingUnit
    /// </summary>
    [DataContract(Name = "LoadingUnit")]
    public partial class LoadingUnit : LogisticsObject, IEquatable<LoadingUnit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadingUnit" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="checks">Cargochecks.</param>
        /// <param name="events">Cargoevents.</param>
        /// <param name="externalReferences">CargoexternalReferences.</param>
        /// <param name="companyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="skeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="attachedIotDevices">CargoattachedIotDevices.</param>
        /// <param name="involvedInActions">CargoinvolvedInActions.</param>
        /// <param name="loadedPiecesOnLoadingUnit">CargoloadedPiecesOnLoadingUnit.</param>
        /// <param name="tareWeight">CargotareWeight.</param>
        /// <param name="remarks">Cargoremarks.</param>
        public LoadingUnit(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> checks = default(List<Check>), List<LogisticsEvent> events = default(List<LogisticsEvent>), List<ExternalReference> externalReferences = default(List<ExternalReference>), string companyIdentifier = default(string), bool skeletonIndicator = default(bool), List<IotDevice> attachedIotDevices = default(List<IotDevice>), List<LogisticsAction> involvedInActions = default(List<LogisticsAction>), List<Piece> loadedPiecesOnLoadingUnit = default(List<Piece>), Value tareWeight = default(Value), string remarks = default(string))
        {
            this.Id = httpsId;
            this.Type = httpsType;
            this.Checks = checks;
            this.Events = events;
            this.ExternalReferences = externalReferences;
            this.CompanyIdentifier = companyIdentifier;
            this.SkeletonIndicator = skeletonIndicator;
            this.AttachedIotDevices = attachedIotDevices;
            this.InvolvedInActions = involvedInActions;
            this.LoadedPiecesOnLoadingUnit = loadedPiecesOnLoadingUnit;
            this.TareWeight = tareWeight;
            this.Remarks = remarks;
        }

        /// <summary>
        /// Gets or Sets CargoattachedIotDevices
        /// </summary>
        [DataMember(Name = "cargo:attachedIotDevices", EmitDefaultValue = false)]
        public List<IotDevice> AttachedIotDevices { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedInActions
        /// </summary>
        [DataMember(Name = "cargo:involvedInActions", EmitDefaultValue = false)]
        public List<LogisticsAction> InvolvedInActions { get; set; }

        /// <summary>
        /// Gets or Sets CargoloadedPiecesOnLoadingUnit
        /// </summary>
        [DataMember(Name = "cargo:loadedPiecesOnLoadingUnit", EmitDefaultValue = false)]
        public List<Piece> LoadedPiecesOnLoadingUnit { get; set; }

        /// <summary>
        /// Gets or Sets CargotareWeight
        /// </summary>
        [DataMember(Name = "cargo:tareWeight", EmitDefaultValue = false)]
        public Value TareWeight { get; set; }

        /// <summary>
        /// Gets or Sets Cargoremarks
        /// </summary>
        [DataMember(Name = "cargo:remarks", EmitDefaultValue = false)]
        public string Remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadingUnit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cargochecks: ").Append(Checks).Append("\n");
            sb.Append("  Cargoevents: ").Append(Events).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(ExternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(CompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(SkeletonIndicator).Append("\n");
            sb.Append("  CargoattachedIotDevices: ").Append(AttachedIotDevices).Append("\n");
            sb.Append("  CargoinvolvedInActions: ").Append(InvolvedInActions).Append("\n");
            sb.Append("  CargoloadedPiecesOnLoadingUnit: ").Append(LoadedPiecesOnLoadingUnit).Append("\n");
            sb.Append("  CargotareWeight: ").Append(TareWeight).Append("\n");
            sb.Append("  Cargoremarks: ").Append(Remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as LoadingUnit);
        }

        /// <summary>
        /// Returns true if LoadingUnit instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of LoadingUnit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadingUnit httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Checks == httpsInput.Checks ||
                    this.Checks != null &&
                    httpsInput.Checks != null &&
                    this.Checks.SequenceEqual(httpsInput.Checks)
                ) && 
                (
                    this.Events == httpsInput.Events ||
                    this.Events != null &&
                    httpsInput.Events != null &&
                    this.Events.SequenceEqual(httpsInput.Events)
                ) && 
                (
                    this.ExternalReferences == httpsInput.ExternalReferences ||
                    this.ExternalReferences != null &&
                    httpsInput.ExternalReferences != null &&
                    this.ExternalReferences.SequenceEqual(httpsInput.ExternalReferences)
                ) && 
                (
                    this.CompanyIdentifier == httpsInput.CompanyIdentifier ||
                    (this.CompanyIdentifier != null &&
                    this.CompanyIdentifier.Equals(httpsInput.CompanyIdentifier))
                ) && 
                (
                    this.SkeletonIndicator == httpsInput.SkeletonIndicator ||
                    this.SkeletonIndicator.Equals(httpsInput.SkeletonIndicator)
                ) && 
                (
                    this.AttachedIotDevices == httpsInput.AttachedIotDevices ||
                    this.AttachedIotDevices != null &&
                    httpsInput.AttachedIotDevices != null &&
                    this.AttachedIotDevices.SequenceEqual(httpsInput.AttachedIotDevices)
                ) && 
                (
                    this.InvolvedInActions == httpsInput.InvolvedInActions ||
                    this.InvolvedInActions != null &&
                    httpsInput.InvolvedInActions != null &&
                    this.InvolvedInActions.SequenceEqual(httpsInput.InvolvedInActions)
                ) && 
                (
                    this.LoadedPiecesOnLoadingUnit == httpsInput.LoadedPiecesOnLoadingUnit ||
                    this.LoadedPiecesOnLoadingUnit != null &&
                    httpsInput.LoadedPiecesOnLoadingUnit != null &&
                    this.LoadedPiecesOnLoadingUnit.SequenceEqual(httpsInput.LoadedPiecesOnLoadingUnit)
                ) && 
                (
                    this.TareWeight == httpsInput.TareWeight ||
                    (this.TareWeight != null &&
                    this.TareWeight.Equals(httpsInput.TareWeight))
                ) && 
                (
                    this.Remarks == httpsInput.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(httpsInput.Remarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.ExternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReferences.GetHashCode();
                }
                if (this.CompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkeletonIndicator.GetHashCode();
                if (this.AttachedIotDevices != null)
                {
                    hashCode = (hashCode * 59) + this.AttachedIotDevices.GetHashCode();
                }
                if (this.InvolvedInActions != null)
                {
                    hashCode = (hashCode * 59) + this.InvolvedInActions.GetHashCode();
                }
                if (this.LoadedPiecesOnLoadingUnit != null)
                {
                    hashCode = (hashCode * 59) + this.LoadedPiecesOnLoadingUnit.GetHashCode();
                }
                if (this.TareWeight != null)
                {
                    hashCode = (hashCode * 59) + this.TareWeight.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
