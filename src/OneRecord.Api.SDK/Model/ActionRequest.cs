/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// ActionRequest
    /// </summary>
    [JsonConverter(typeof(ActionRequestJsonConverter))]
    [DataContract(Name = "ActionRequest")]
    public partial class ActionRequest : AbstractOpenApiSchema, IEquatable<ActionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionRequest" /> class
        /// with the <see cref="AccessDelegationRequest" /> class
        /// </summary>
        /// <param name="httpsActualInstance">An instance of AccessDelegationRequest.</param>
        public ActionRequest(AccessDelegationRequest httpsActualInstance)
        {
            this.HttpsIsNullable = false;
            this.HttpsSchemaType= "oneOf";
            this.HttpsActualInstance = httpsActualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionRequest" /> class
        /// with the <see cref="ChangeRequest" /> class
        /// </summary>
        /// <param name="httpsActualInstance">An instance of ChangeRequest.</param>
        public ActionRequest(ChangeRequest httpsActualInstance)
        {
            this.HttpsIsNullable = false;
            this.HttpsSchemaType= "oneOf";
            this.HttpsActualInstance = httpsActualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionRequest" /> class
        /// with the <see cref="SubscriptionRequest" /> class
        /// </summary>
        /// <param name="httpsActualInstance">An instance of SubscriptionRequest.</param>
        public ActionRequest(SubscriptionRequest httpsActualInstance)
        {
            this.HttpsIsNullable = false;
            this.HttpsSchemaType= "oneOf";
            this.HttpsActualInstance = httpsActualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object HttpsActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AccessDelegationRequest))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ChangeRequest))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SubscriptionRequest))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AccessDelegationRequest, ChangeRequest, SubscriptionRequest");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `AccessDelegationRequest`. If the actual instance is not `AccessDelegationRequest`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccessDelegationRequest</returns>
        public AccessDelegationRequest GetAccessDelegationRequest()
        {
            return (AccessDelegationRequest)this.HttpsActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ChangeRequest`. If the actual instance is not `ChangeRequest`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ChangeRequest</returns>
        public ChangeRequest GetChangeRequest()
        {
            return (ChangeRequest)this.HttpsActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SubscriptionRequest`. If the actual instance is not `SubscriptionRequest`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SubscriptionRequest</returns>
        public SubscriptionRequest GetSubscriptionRequest()
        {
            return (SubscriptionRequest)this.HttpsActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionRequest {\n");
            sb.Append("  ActualInstance: ").Append(this.HttpsActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.HttpsActualInstance, ActionRequest.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ActionRequest
        /// </summary>
        /// <param name="httpsJsonString">JSON string</param>
        /// <returns>An instance of ActionRequest</returns>
        public static ActionRequest FromJson(string httpsJsonString)
        {
            ActionRequest newActionRequest = null;

            if (string.IsNullOrEmpty(httpsJsonString))
            {
                return newActionRequest;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AccessDelegationRequest).GetProperty("AdditionalProperties") == null)
                {
                    newActionRequest = new ActionRequest(JsonConvert.DeserializeObject<AccessDelegationRequest>(httpsJsonString, ActionRequest.SerializerSettings));
                }
                else
                {
                    newActionRequest = new ActionRequest(JsonConvert.DeserializeObject<AccessDelegationRequest>(httpsJsonString, ActionRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AccessDelegationRequest");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccessDelegationRequest: {1}", httpsJsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ChangeRequest).GetProperty("AdditionalProperties") == null)
                {
                    newActionRequest = new ActionRequest(JsonConvert.DeserializeObject<ChangeRequest>(httpsJsonString, ActionRequest.SerializerSettings));
                }
                else
                {
                    newActionRequest = new ActionRequest(JsonConvert.DeserializeObject<ChangeRequest>(httpsJsonString, ActionRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ChangeRequest");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ChangeRequest: {1}", httpsJsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SubscriptionRequest).GetProperty("AdditionalProperties") == null)
                {
                    newActionRequest = new ActionRequest(JsonConvert.DeserializeObject<SubscriptionRequest>(httpsJsonString, ActionRequest.SerializerSettings));
                }
                else
                {
                    newActionRequest = new ActionRequest(JsonConvert.DeserializeObject<SubscriptionRequest>(httpsJsonString, ActionRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SubscriptionRequest");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SubscriptionRequest: {1}", httpsJsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + httpsJsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + httpsJsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newActionRequest;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as ActionRequest);
        }

        /// <summary>
        /// Returns true if ActionRequest instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of ActionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionRequest httpsInput)
        {
            if (httpsInput == null)
                return false;

            return this.HttpsActualInstance.Equals(httpsInput.HttpsActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsActualInstance != null)
                    hashCode = hashCode * 59 + this.HttpsActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ActionRequest
    /// </summary>
    public class ActionRequestJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="httpsWriter">JSON writer</param>
        /// <param name="httpsValue">Object to be converted into a JSON string</param>
        /// <param name="httpsSerializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter httpsWriter, object httpsValue, JsonSerializer httpsSerializer)
        {
            httpsWriter.WriteRawValue((string)(typeof(ActionRequest).GetMethod("ToJson").Invoke(httpsValue, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="httpsReader">JSON reader</param>
        /// <param name="httpsObjectType">Object type</param>
        /// <param name="httpsExistingValue">Existing value</param>
        /// <param name="httpsSerializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader httpsReader, Type httpsObjectType, object httpsExistingValue, JsonSerializer httpsSerializer)
        {
            if(httpsReader.TokenType != JsonToken.Null)
            {
                return ActionRequest.FromJson(JObject.Load(httpsReader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="httpsObjectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type httpsObjectType)
        {
            return false;
        }
    }

}
