/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// RegulatedEntity
    /// </summary>
    [DataContract(Name = "RegulatedEntity")]
    public partial class RegulatedEntity : IEquatable<RegulatedEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegulatedEntity" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargoentity">Cargoentity.</param>
        /// <param name="httpsCargoidentifier">Cargoidentifier.</param>
        /// <param name="httpsCargoowningOrganization">CargoowningOrganization.</param>
        /// <param name="httpsCargocategory">Cargocategory.</param>
        /// <param name="httpsCargoregulatedEntityExpiryDate">CargoregulatedEntityExpiryDate.</param>
        public RegulatedEntity(string httpsId = default(string), List<string> httpsType = default(List<string>), CompanyBranch httpsCargoentity = default(CompanyBranch), Company httpsCargoidentifier = default(Company), Organization httpsCargoowningOrganization = default(Organization), string httpsCargocategory = default(string), DateTime httpsCargoregulatedEntityExpiryDate = default(DateTime))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargoentity = httpsCargoentity;
            this.HttpsCargoidentifier = httpsCargoidentifier;
            this.HttpsCargoowningOrganization = httpsCargoowningOrganization;
            this.HttpsCargocategory = httpsCargocategory;
            this.HttpsCargoregulatedEntityExpiryDate = httpsCargoregulatedEntityExpiryDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargoentity
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#entity", EmitDefaultValue = false)]
        public CompanyBranch HttpsCargoentity { get; set; }

        /// <summary>
        /// Gets or Sets Cargoidentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#identifier", EmitDefaultValue = false)]
        public Company HttpsCargoidentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoowningOrganization
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#owningOrganization", EmitDefaultValue = false)]
        public Organization HttpsCargoowningOrganization { get; set; }

        /// <summary>
        /// Gets or Sets Cargocategory
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#category", EmitDefaultValue = false)]
        public string HttpsCargocategory { get; set; }

        /// <summary>
        /// Gets or Sets CargoregulatedEntityExpiryDate
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#regulatedEntityExpiryDate", EmitDefaultValue = false)]
        public DateTime HttpsCargoregulatedEntityExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegulatedEntity {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargoentity: ").Append(HttpsCargoentity).Append("\n");
            sb.Append("  Cargoidentifier: ").Append(HttpsCargoidentifier).Append("\n");
            sb.Append("  CargoowningOrganization: ").Append(HttpsCargoowningOrganization).Append("\n");
            sb.Append("  Cargocategory: ").Append(HttpsCargocategory).Append("\n");
            sb.Append("  CargoregulatedEntityExpiryDate: ").Append(HttpsCargoregulatedEntityExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as RegulatedEntity);
        }

        /// <summary>
        /// Returns true if RegulatedEntity instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of RegulatedEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegulatedEntity httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargoentity == httpsInput.HttpsCargoentity ||
                    (this.HttpsCargoentity != null &&
                    this.HttpsCargoentity.Equals(httpsInput.HttpsCargoentity))
                ) && 
                (
                    this.HttpsCargoidentifier == httpsInput.HttpsCargoidentifier ||
                    (this.HttpsCargoidentifier != null &&
                    this.HttpsCargoidentifier.Equals(httpsInput.HttpsCargoidentifier))
                ) && 
                (
                    this.HttpsCargoowningOrganization == httpsInput.HttpsCargoowningOrganization ||
                    (this.HttpsCargoowningOrganization != null &&
                    this.HttpsCargoowningOrganization.Equals(httpsInput.HttpsCargoowningOrganization))
                ) && 
                (
                    this.HttpsCargocategory == httpsInput.HttpsCargocategory ||
                    (this.HttpsCargocategory != null &&
                    this.HttpsCargocategory.Equals(httpsInput.HttpsCargocategory))
                ) && 
                (
                    this.HttpsCargoregulatedEntityExpiryDate == httpsInput.HttpsCargoregulatedEntityExpiryDate ||
                    (this.HttpsCargoregulatedEntityExpiryDate != null &&
                    this.HttpsCargoregulatedEntityExpiryDate.Equals(httpsInput.HttpsCargoregulatedEntityExpiryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargoentity != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoentity.GetHashCode();
                }
                if (this.HttpsCargoidentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoidentifier.GetHashCode();
                }
                if (this.HttpsCargoowningOrganization != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoowningOrganization.GetHashCode();
                }
                if (this.HttpsCargocategory != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocategory.GetHashCode();
                }
                if (this.HttpsCargoregulatedEntityExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoregulatedEntityExpiryDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
