/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// RegulatedEntity
    /// </summary>
    [DataContract(Name = "RegulatedEntity")]
    public partial class RegulatedEntity : IEquatable<RegulatedEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegulatedEntity" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="entity">Cargoentity.</param>
        /// <param name="identifier">Cargoidentifier.</param>
        /// <param name="owningOrganization">CargoowningOrganization.</param>
        /// <param name="category">Cargocategory.</param>
        /// <param name="regulatedEntityExpiryDate">CargoregulatedEntityExpiryDate.</param>
        public RegulatedEntity(string id = default(string), List<string> type = default(List<string>), CompanyBranch entity = default(CompanyBranch), Company identifier = default(Company), Organization owningOrganization = default(Organization), string category = default(string), DateTime regulatedEntityExpiryDate = default(DateTime))
        {
            this.Id = id;
            this.Type = type;
            this.Entity = entity;
            this.Identifier = identifier;
            this.OwningOrganization = owningOrganization;
            this.Category = category;
            this.RegulatedEntityExpiryDate = regulatedEntityExpiryDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> Type { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#entity", EmitDefaultValue = false)]
        public CompanyBranch Entity { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#identifier", EmitDefaultValue = false)]
        public Company Identifier { get; set; }

        /// <summary>
        /// Gets or Sets OwningOrganization
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#owningOrganization", EmitDefaultValue = false)]
        public Organization OwningOrganization { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets RegulatedEntityExpiryDate
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#regulatedEntityExpiryDate", EmitDefaultValue = false)]
        public DateTime RegulatedEntityExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegulatedEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  entity: ").Append(Entity).Append("\n");
            sb.Append("  identifier: ").Append(Identifier).Append("\n");
            sb.Append("  owningOrganization: ").Append(OwningOrganization).Append("\n");
            sb.Append("  category: ").Append(Category).Append("\n");
            sb.Append("  regulatedEntityExpiryDate: ").Append(RegulatedEntityExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as RegulatedEntity);
        }

        /// <summary>
        /// Returns true if RegulatedEntity instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of RegulatedEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegulatedEntity httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Entity == httpsInput.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(httpsInput.Entity))
                ) && 
                (
                    this.Identifier == httpsInput.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(httpsInput.Identifier))
                ) && 
                (
                    this.OwningOrganization == httpsInput.OwningOrganization ||
                    (this.OwningOrganization != null &&
                    this.OwningOrganization.Equals(httpsInput.OwningOrganization))
                ) && 
                (
                    this.Category == httpsInput.Category ||
                    (this.Category != null &&
                    this.Category.Equals(httpsInput.Category))
                ) && 
                (
                    this.RegulatedEntityExpiryDate == httpsInput.RegulatedEntityExpiryDate ||
                    (this.RegulatedEntityExpiryDate != null &&
                    this.RegulatedEntityExpiryDate.Equals(httpsInput.RegulatedEntityExpiryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.OwningOrganization != null)
                {
                    hashCode = (hashCode * 59) + this.OwningOrganization.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.RegulatedEntityExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.RegulatedEntityExpiryDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
