/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// Question
    /// </summary>
    [DataContract(Name = "Question")]
    public partial class Question : LogisticsObject, IEquatable<Question>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Question" /> class.
        /// </summary>
        /// <param name="Id">id.</param>
        /// <param name="Type">type.</param>
        /// <param name="Checks">Cargochecks.</param>
        /// <param name="Events">Cargoevents.</param>
        /// <param name="ExternalReference">CargoexternalReferences.</param>
        /// <param name="CompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="SkeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoanswer">Cargoanswer.</param>
        /// <param name="httpsCargocheckTemplate">CargocheckTemplate.</param>
        /// <param name="httpsCargoanswerOptionsText">CargoanswerOptionsText.</param>
        /// <param name="httpsCargoanswerOptionsValue">CargoanswerOptionsValue.</param>
        /// <param name="httpsCargolongText">CargolongText.</param>
        /// <param name="httpsCargoquestionsNumber">CargoquestionsNumber.</param>
        /// <param name="httpsCargoquestionsSection">CargoquestionsSection.</param>
        /// <param name="httpsCargoshortText">CargoshortText.</param>
        public Question(string Id = default(string), List<string> Type = default(List<string>), List<Check> Checks = default(List<Check>), List<LogisticsEvent> Events = default(List<LogisticsEvent>), List<ExternalReference> ExternalReference = default(List<ExternalReference>), string CompanyIdentifier = default(string), bool SkeletonIndicator = default(bool), Answer httpsCargoanswer = default(Answer), CheckTemplate httpsCargocheckTemplate = default(CheckTemplate), string httpsCargoanswerOptionsText = default(string), string httpsCargoanswerOptionsValue = default(string), string httpsCargolongText = default(string), string httpsCargoquestionsNumber = default(string), string httpsCargoquestionsSection = default(string), string httpsCargoshortText = default(string))
        {
            this.Id = Id;
            this.Type = Type;
            this.Checks = Checks;
            this.Events = Events;
            this.ExternalReferences = ExternalReference;
            this.CompanyIdentifier = CompanyIdentifier;
            this.SkeletonIndicator = SkeletonIndicator;
            this.Answer = httpsCargoanswer;
            this.CheckTemplate = httpsCargocheckTemplate;
            this.AnswerOptionsText = httpsCargoanswerOptionsText;
            this.AnswerOptionsValue = httpsCargoanswerOptionsValue;
            this.LongText = httpsCargolongText;
            this.QuestionsNumber = httpsCargoquestionsNumber;
            this.QuestionsSection = httpsCargoquestionsSection;
            this.ShortText = httpsCargoshortText;
        }


        /// <summary>
        /// Gets or Sets Cargoanswer
        /// </summary>
        [DataMember(Name = "cargo:answer", EmitDefaultValue = false)]
        public Answer Answer { get; set; }

        /// <summary>
        /// Gets or Sets CargocheckTemplate
        /// </summary>
        [DataMember(Name = "cargo:checkTemplate", EmitDefaultValue = false)]
        public CheckTemplate CheckTemplate { get; set; }

        /// <summary>
        /// Gets or Sets CargoanswerOptionsText
        /// </summary>
        [DataMember(Name = "cargo:answerOptionsText", EmitDefaultValue = false)]
        public string AnswerOptionsText { get; set; }

        /// <summary>
        /// Gets or Sets CargoanswerOptionsValue
        /// </summary>
        [DataMember(Name = "cargo:answerOptionsValue", EmitDefaultValue = false)]
        public string AnswerOptionsValue { get; set; }

        /// <summary>
        /// Gets or Sets CargolongText
        /// </summary>
        [DataMember(Name = "cargo:longText", EmitDefaultValue = false)]
        public string LongText { get; set; }

        /// <summary>
        /// Gets or Sets CargoquestionsNumber
        /// </summary>
        [DataMember(Name = "cargo:questionsNumber", EmitDefaultValue = false)]
        public string QuestionsNumber { get; set; }

        /// <summary>
        /// Gets or Sets CargoquestionsSection
        /// </summary>
        [DataMember(Name = "cargo:questionsSection", EmitDefaultValue = false)]
        public string QuestionsSection { get; set; }

        /// <summary>
        /// Gets or Sets CargoshortText
        /// </summary>
        [DataMember(Name = "cargo:shortText", EmitDefaultValue = false)]
        public string ShortText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Question {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cargochecks: ").Append(Checks).Append("\n");
            sb.Append("  Cargoevents: ").Append(Events).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(ExternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(CompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(SkeletonIndicator).Append("\n");
            sb.Append("  Cargoanswer: ").Append(Answer).Append("\n");
            sb.Append("  CargocheckTemplate: ").Append(CheckTemplate).Append("\n");
            sb.Append("  CargoanswerOptionsText: ").Append(AnswerOptionsText).Append("\n");
            sb.Append("  CargoanswerOptionsValue: ").Append(AnswerOptionsValue).Append("\n");
            sb.Append("  CargolongText: ").Append(LongText).Append("\n");
            sb.Append("  CargoquestionsNumber: ").Append(QuestionsNumber).Append("\n");
            sb.Append("  CargoquestionsSection: ").Append(QuestionsSection).Append("\n");
            sb.Append("  CargoshortText: ").Append(ShortText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as Question);
        }

        /// <summary>
        /// Returns true if Question instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of Question to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Question httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Checks == httpsInput.Checks ||
                    this.Checks != null &&
                    httpsInput.Checks != null &&
                    this.Checks.SequenceEqual(httpsInput.Checks)
                ) && 
                (
                    this.Events == httpsInput.Events ||
                    this.Events != null &&
                    httpsInput.Events != null &&
                    this.Events.SequenceEqual(httpsInput.Events)
                ) && 
                (
                    this.ExternalReferences == httpsInput.ExternalReferences ||
                    this.ExternalReferences != null &&
                    httpsInput.ExternalReferences != null &&
                    this.ExternalReferences.SequenceEqual(httpsInput.ExternalReferences)
                ) && 
                (
                    this.CompanyIdentifier == httpsInput.CompanyIdentifier ||
                    (this.CompanyIdentifier != null &&
                    this.CompanyIdentifier.Equals(httpsInput.CompanyIdentifier))
                ) && 
                (
                    this.SkeletonIndicator == httpsInput.SkeletonIndicator ||
                    this.SkeletonIndicator.Equals(httpsInput.SkeletonIndicator)
                ) && 
                (
                    this.Answer == httpsInput.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(httpsInput.Answer))
                ) && 
                (
                    this.CheckTemplate == httpsInput.CheckTemplate ||
                    (this.CheckTemplate != null &&
                    this.CheckTemplate.Equals(httpsInput.CheckTemplate))
                ) && 
                (
                    this.AnswerOptionsText == httpsInput.AnswerOptionsText ||
                    (this.AnswerOptionsText != null &&
                    this.AnswerOptionsText.Equals(httpsInput.AnswerOptionsText))
                ) && 
                (
                    this.AnswerOptionsValue == httpsInput.AnswerOptionsValue ||
                    (this.AnswerOptionsValue != null &&
                    this.AnswerOptionsValue.Equals(httpsInput.AnswerOptionsValue))
                ) && 
                (
                    this.LongText == httpsInput.LongText ||
                    (this.LongText != null &&
                    this.LongText.Equals(httpsInput.LongText))
                ) && 
                (
                    this.QuestionsNumber == httpsInput.QuestionsNumber ||
                    (this.QuestionsNumber != null &&
                    this.QuestionsNumber.Equals(httpsInput.QuestionsNumber))
                ) && 
                (
                    this.QuestionsSection == httpsInput.QuestionsSection ||
                    (this.QuestionsSection != null &&
                    this.QuestionsSection.Equals(httpsInput.QuestionsSection))
                ) && 
                (
                    this.ShortText == httpsInput.ShortText ||
                    (this.ShortText != null &&
                    this.ShortText.Equals(httpsInput.ShortText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.ExternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReferences.GetHashCode();
                }
                if (this.CompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkeletonIndicator.GetHashCode();
                if (this.Answer != null)
                {
                    hashCode = (hashCode * 59) + this.Answer.GetHashCode();
                }
                if (this.CheckTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.CheckTemplate.GetHashCode();
                }
                if (this.AnswerOptionsText != null)
                {
                    hashCode = (hashCode * 59) + this.AnswerOptionsText.GetHashCode();
                }
                if (this.AnswerOptionsValue != null)
                {
                    hashCode = (hashCode * 59) + this.AnswerOptionsValue.GetHashCode();
                }
                if (this.LongText != null)
                {
                    hashCode = (hashCode * 59) + this.LongText.GetHashCode();
                }
                if (this.QuestionsNumber != null)
                {
                    hashCode = (hashCode * 59) + this.QuestionsNumber.GetHashCode();
                }
                if (this.QuestionsSection != null)
                {
                    hashCode = (hashCode * 59) + this.QuestionsSection.GetHashCode();
                }
                if (this.ShortText != null)
                {
                    hashCode = (hashCode * 59) + this.ShortText.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
