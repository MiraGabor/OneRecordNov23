/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// CustomsInformation
    /// </summary>
    [DataContract(Name = "CustomsInformation")]
    public partial class CustomsInformation : IEquatable<CustomsInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsInformation" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoissuedForPiece">CargoissuedForPiece.</param>
        /// <param name="httpsCargocontentCode">CargocontentCode.</param>
        /// <param name="httpsCargocountryCode">CargocountryCode.</param>
        /// <param name="httpsCargonote">Cargonote.</param>
        /// <param name="httpsCargootherCustomsInformation">CargootherCustomsInformation.</param>
        /// <param name="httpsCargosubjectCode">CargosubjectCode.</param>
        public CustomsInformation(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), Piece httpsCargoissuedForPiece = default(Piece), string httpsCargocontentCode = default(string), string httpsCargocountryCode = default(string), string httpsCargonote = default(string), string httpsCargootherCustomsInformation = default(string), string httpsCargosubjectCode = default(string))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoissuedForPiece = httpsCargoissuedForPiece;
            this.HttpsCargocontentCode = httpsCargocontentCode;
            this.HttpsCargocountryCode = httpsCargocountryCode;
            this.HttpsCargonote = httpsCargonote;
            this.HttpsCargootherCustomsInformation = httpsCargootherCustomsInformation;
            this.HttpsCargosubjectCode = httpsCargosubjectCode;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoissuedForPiece
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#issuedForPiece", EmitDefaultValue = false)]
        public Piece HttpsCargoissuedForPiece { get; set; }

        /// <summary>
        /// Gets or Sets CargocontentCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#contentCode", EmitDefaultValue = false)]
        public string HttpsCargocontentCode { get; set; }

        /// <summary>
        /// Gets or Sets CargocountryCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#countryCode", EmitDefaultValue = false)]
        public string HttpsCargocountryCode { get; set; }

        /// <summary>
        /// Gets or Sets Cargonote
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#note", EmitDefaultValue = false)]
        public string HttpsCargonote { get; set; }

        /// <summary>
        /// Gets or Sets CargootherCustomsInformation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#otherCustomsInformation", EmitDefaultValue = false)]
        public string HttpsCargootherCustomsInformation { get; set; }

        /// <summary>
        /// Gets or Sets CargosubjectCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#subjectCode", EmitDefaultValue = false)]
        public string HttpsCargosubjectCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomsInformation {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargoissuedForPiece: ").Append(HttpsCargoissuedForPiece).Append("\n");
            sb.Append("  CargocontentCode: ").Append(HttpsCargocontentCode).Append("\n");
            sb.Append("  CargocountryCode: ").Append(HttpsCargocountryCode).Append("\n");
            sb.Append("  Cargonote: ").Append(HttpsCargonote).Append("\n");
            sb.Append("  CargootherCustomsInformation: ").Append(HttpsCargootherCustomsInformation).Append("\n");
            sb.Append("  CargosubjectCode: ").Append(HttpsCargosubjectCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as CustomsInformation);
        }

        /// <summary>
        /// Returns true if CustomsInformation instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of CustomsInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomsInformation httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoissuedForPiece == httpsInput.HttpsCargoissuedForPiece ||
                    (this.HttpsCargoissuedForPiece != null &&
                    this.HttpsCargoissuedForPiece.Equals(httpsInput.HttpsCargoissuedForPiece))
                ) && 
                (
                    this.HttpsCargocontentCode == httpsInput.HttpsCargocontentCode ||
                    (this.HttpsCargocontentCode != null &&
                    this.HttpsCargocontentCode.Equals(httpsInput.HttpsCargocontentCode))
                ) && 
                (
                    this.HttpsCargocountryCode == httpsInput.HttpsCargocountryCode ||
                    (this.HttpsCargocountryCode != null &&
                    this.HttpsCargocountryCode.Equals(httpsInput.HttpsCargocountryCode))
                ) && 
                (
                    this.HttpsCargonote == httpsInput.HttpsCargonote ||
                    (this.HttpsCargonote != null &&
                    this.HttpsCargonote.Equals(httpsInput.HttpsCargonote))
                ) && 
                (
                    this.HttpsCargootherCustomsInformation == httpsInput.HttpsCargootherCustomsInformation ||
                    (this.HttpsCargootherCustomsInformation != null &&
                    this.HttpsCargootherCustomsInformation.Equals(httpsInput.HttpsCargootherCustomsInformation))
                ) && 
                (
                    this.HttpsCargosubjectCode == httpsInput.HttpsCargosubjectCode ||
                    (this.HttpsCargosubjectCode != null &&
                    this.HttpsCargosubjectCode.Equals(httpsInput.HttpsCargosubjectCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoissuedForPiece != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoissuedForPiece.GetHashCode();
                }
                if (this.HttpsCargocontentCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontentCode.GetHashCode();
                }
                if (this.HttpsCargocountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocountryCode.GetHashCode();
                }
                if (this.HttpsCargonote != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargonote.GetHashCode();
                }
                if (this.HttpsCargootherCustomsInformation != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargootherCustomsInformation.GetHashCode();
                }
                if (this.HttpsCargosubjectCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargosubjectCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
