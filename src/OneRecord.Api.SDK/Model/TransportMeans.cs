/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// TransportMeans
    /// </summary>
    [DataContract(Name = "TransportMeans")]
    public partial class TransportMeans : IEquatable<TransportMeans>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportMeans" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoattachedIotDevices">CargoattachedIotDevices.</param>
        /// <param name="httpsCargoinvolvedInActions">CargoinvolvedInActions.</param>
        /// <param name="httpsCargooperatedTransportMovements">CargooperatedTransportMovements.</param>
        /// <param name="httpsCargotransportOrganization">CargotransportOrganization.</param>
        /// <param name="httpsCargotypicalCo2Coefficient">CargotypicalCo2Coefficient.</param>
        /// <param name="httpsCargotypicalFuelConsumption">CargotypicalFuelConsumption.</param>
        /// <param name="httpsCargovehicleModel">CargovehicleModel.</param>
        /// <param name="httpsCargovehicleRegistration">CargovehicleRegistration.</param>
        /// <param name="httpsCargovehicleSize">CargovehicleSize.</param>
        /// <param name="httpsCargovehicleType">CargovehicleType.</param>
        public TransportMeans(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<IotDevice> httpsCargoattachedIotDevices = default(List<IotDevice>), List<LogisticsAction> httpsCargoinvolvedInActions = default(List<LogisticsAction>), List<TransportMovement> httpsCargooperatedTransportMovements = default(List<TransportMovement>), Company httpsCargotransportOrganization = default(Company), Value httpsCargotypicalCo2Coefficient = default(Value), Value httpsCargotypicalFuelConsumption = default(Value), string httpsCargovehicleModel = default(string), string httpsCargovehicleRegistration = default(string), string httpsCargovehicleSize = default(string), string httpsCargovehicleType = default(string))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoattachedIotDevices = httpsCargoattachedIotDevices;
            this.HttpsCargoinvolvedInActions = httpsCargoinvolvedInActions;
            this.HttpsCargooperatedTransportMovements = httpsCargooperatedTransportMovements;
            this.HttpsCargotransportOrganization = httpsCargotransportOrganization;
            this.HttpsCargotypicalCo2Coefficient = httpsCargotypicalCo2Coefficient;
            this.HttpsCargotypicalFuelConsumption = httpsCargotypicalFuelConsumption;
            this.HttpsCargovehicleModel = httpsCargovehicleModel;
            this.HttpsCargovehicleRegistration = httpsCargovehicleRegistration;
            this.HttpsCargovehicleSize = httpsCargovehicleSize;
            this.HttpsCargovehicleType = httpsCargovehicleType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoattachedIotDevices
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#attachedIotDevices", EmitDefaultValue = false)]
        public List<IotDevice> HttpsCargoattachedIotDevices { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedInActions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#involvedInActions", EmitDefaultValue = false)]
        public List<LogisticsAction> HttpsCargoinvolvedInActions { get; set; }

        /// <summary>
        /// Gets or Sets CargooperatedTransportMovements
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#operatedTransportMovements", EmitDefaultValue = false)]
        public List<TransportMovement> HttpsCargooperatedTransportMovements { get; set; }

        /// <summary>
        /// Gets or Sets CargotransportOrganization
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#transportOrganization", EmitDefaultValue = false)]
        public Company HttpsCargotransportOrganization { get; set; }

        /// <summary>
        /// Gets or Sets CargotypicalCo2Coefficient
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#typicalCo2Coefficient", EmitDefaultValue = false)]
        public Value HttpsCargotypicalCo2Coefficient { get; set; }

        /// <summary>
        /// Gets or Sets CargotypicalFuelConsumption
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#typicalFuelConsumption", EmitDefaultValue = false)]
        public Value HttpsCargotypicalFuelConsumption { get; set; }

        /// <summary>
        /// Gets or Sets CargovehicleModel
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#vehicleModel", EmitDefaultValue = false)]
        public string HttpsCargovehicleModel { get; set; }

        /// <summary>
        /// Gets or Sets CargovehicleRegistration
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#vehicleRegistration", EmitDefaultValue = false)]
        public string HttpsCargovehicleRegistration { get; set; }

        /// <summary>
        /// Gets or Sets CargovehicleSize
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#vehicleSize", EmitDefaultValue = false)]
        public string HttpsCargovehicleSize { get; set; }

        /// <summary>
        /// Gets or Sets CargovehicleType
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#vehicleType", EmitDefaultValue = false)]
        public string HttpsCargovehicleType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransportMeans {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargoattachedIotDevices: ").Append(HttpsCargoattachedIotDevices).Append("\n");
            sb.Append("  CargoinvolvedInActions: ").Append(HttpsCargoinvolvedInActions).Append("\n");
            sb.Append("  CargooperatedTransportMovements: ").Append(HttpsCargooperatedTransportMovements).Append("\n");
            sb.Append("  CargotransportOrganization: ").Append(HttpsCargotransportOrganization).Append("\n");
            sb.Append("  CargotypicalCo2Coefficient: ").Append(HttpsCargotypicalCo2Coefficient).Append("\n");
            sb.Append("  CargotypicalFuelConsumption: ").Append(HttpsCargotypicalFuelConsumption).Append("\n");
            sb.Append("  CargovehicleModel: ").Append(HttpsCargovehicleModel).Append("\n");
            sb.Append("  CargovehicleRegistration: ").Append(HttpsCargovehicleRegistration).Append("\n");
            sb.Append("  CargovehicleSize: ").Append(HttpsCargovehicleSize).Append("\n");
            sb.Append("  CargovehicleType: ").Append(HttpsCargovehicleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as TransportMeans);
        }

        /// <summary>
        /// Returns true if TransportMeans instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of TransportMeans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportMeans httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoattachedIotDevices == httpsInput.HttpsCargoattachedIotDevices ||
                    this.HttpsCargoattachedIotDevices != null &&
                    httpsInput.HttpsCargoattachedIotDevices != null &&
                    this.HttpsCargoattachedIotDevices.SequenceEqual(httpsInput.HttpsCargoattachedIotDevices)
                ) && 
                (
                    this.HttpsCargoinvolvedInActions == httpsInput.HttpsCargoinvolvedInActions ||
                    this.HttpsCargoinvolvedInActions != null &&
                    httpsInput.HttpsCargoinvolvedInActions != null &&
                    this.HttpsCargoinvolvedInActions.SequenceEqual(httpsInput.HttpsCargoinvolvedInActions)
                ) && 
                (
                    this.HttpsCargooperatedTransportMovements == httpsInput.HttpsCargooperatedTransportMovements ||
                    this.HttpsCargooperatedTransportMovements != null &&
                    httpsInput.HttpsCargooperatedTransportMovements != null &&
                    this.HttpsCargooperatedTransportMovements.SequenceEqual(httpsInput.HttpsCargooperatedTransportMovements)
                ) && 
                (
                    this.HttpsCargotransportOrganization == httpsInput.HttpsCargotransportOrganization ||
                    (this.HttpsCargotransportOrganization != null &&
                    this.HttpsCargotransportOrganization.Equals(httpsInput.HttpsCargotransportOrganization))
                ) && 
                (
                    this.HttpsCargotypicalCo2Coefficient == httpsInput.HttpsCargotypicalCo2Coefficient ||
                    (this.HttpsCargotypicalCo2Coefficient != null &&
                    this.HttpsCargotypicalCo2Coefficient.Equals(httpsInput.HttpsCargotypicalCo2Coefficient))
                ) && 
                (
                    this.HttpsCargotypicalFuelConsumption == httpsInput.HttpsCargotypicalFuelConsumption ||
                    (this.HttpsCargotypicalFuelConsumption != null &&
                    this.HttpsCargotypicalFuelConsumption.Equals(httpsInput.HttpsCargotypicalFuelConsumption))
                ) && 
                (
                    this.HttpsCargovehicleModel == httpsInput.HttpsCargovehicleModel ||
                    (this.HttpsCargovehicleModel != null &&
                    this.HttpsCargovehicleModel.Equals(httpsInput.HttpsCargovehicleModel))
                ) && 
                (
                    this.HttpsCargovehicleRegistration == httpsInput.HttpsCargovehicleRegistration ||
                    (this.HttpsCargovehicleRegistration != null &&
                    this.HttpsCargovehicleRegistration.Equals(httpsInput.HttpsCargovehicleRegistration))
                ) && 
                (
                    this.HttpsCargovehicleSize == httpsInput.HttpsCargovehicleSize ||
                    (this.HttpsCargovehicleSize != null &&
                    this.HttpsCargovehicleSize.Equals(httpsInput.HttpsCargovehicleSize))
                ) && 
                (
                    this.HttpsCargovehicleType == httpsInput.HttpsCargovehicleType ||
                    (this.HttpsCargovehicleType != null &&
                    this.HttpsCargovehicleType.Equals(httpsInput.HttpsCargovehicleType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoattachedIotDevices != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoattachedIotDevices.GetHashCode();
                }
                if (this.HttpsCargoinvolvedInActions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoinvolvedInActions.GetHashCode();
                }
                if (this.HttpsCargooperatedTransportMovements != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargooperatedTransportMovements.GetHashCode();
                }
                if (this.HttpsCargotransportOrganization != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotransportOrganization.GetHashCode();
                }
                if (this.HttpsCargotypicalCo2Coefficient != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotypicalCo2Coefficient.GetHashCode();
                }
                if (this.HttpsCargotypicalFuelConsumption != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotypicalFuelConsumption.GetHashCode();
                }
                if (this.HttpsCargovehicleModel != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovehicleModel.GetHashCode();
                }
                if (this.HttpsCargovehicleRegistration != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovehicleRegistration.GetHashCode();
                }
                if (this.HttpsCargovehicleSize != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovehicleSize.GetHashCode();
                }
                if (this.HttpsCargovehicleType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovehicleType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
