/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// LiveAnimalsEpermit
    /// </summary>
    [DataContract(Name = "LiveAnimalsEpermit")]
    public partial class LiveAnimalsEpermit : IEquatable<LiveAnimalsEpermit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveAnimalsEpermit" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoconsignee">Cargoconsignee.</param>
        /// <param name="httpsCargoconsignments">Cargoconsignments.</param>
        /// <param name="httpsCargosignatures">Cargosignatures.</param>
        /// <param name="httpsCargocopyIndicator">CargocopyIndicator.</param>
        /// <param name="httpsCargoepermitNumber">CargoepermitNumber.</param>
        /// <param name="httpsCargopermitTypeCode">CargopermitTypeCode.</param>
        /// <param name="httpsCargopermitTypeOtherDescription">CargopermitTypeOtherDescription.</param>
        /// <param name="httpsCargospecialConditions">CargospecialConditions.</param>
        /// <param name="httpsCargotransactionPurpose">CargotransactionPurpose.</param>
        /// <param name="httpsCargotransactionPurposeCode">CargotransactionPurposeCode.</param>
        /// <param name="httpsCargotransportContractId">CargotransportContractId.</param>
        /// <param name="httpsCargotransportContractTypeCode">CargotransportContractTypeCode.</param>
        /// <param name="httpsCargovalidFrom">CargovalidFrom.</param>
        /// <param name="httpsCargovalidUntil">CargovalidUntil.</param>
        public LiveAnimalsEpermit(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), Company httpsCargoconsignee = default(Company), List<EpermitConsignment> httpsCargoconsignments = default(List<EpermitConsignment>), List<EpermitSignature> httpsCargosignatures = default(List<EpermitSignature>), bool httpsCargocopyIndicator = default(bool), string httpsCargoepermitNumber = default(string), string httpsCargopermitTypeCode = default(string), string httpsCargopermitTypeOtherDescription = default(string), string httpsCargospecialConditions = default(string), string httpsCargotransactionPurpose = default(string), string httpsCargotransactionPurposeCode = default(string), string httpsCargotransportContractId = default(string), string httpsCargotransportContractTypeCode = default(string), DateTime httpsCargovalidFrom = default(DateTime), DateTime httpsCargovalidUntil = default(DateTime))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoconsignee = httpsCargoconsignee;
            this.HttpsCargoconsignments = httpsCargoconsignments;
            this.HttpsCargosignatures = httpsCargosignatures;
            this.HttpsCargocopyIndicator = httpsCargocopyIndicator;
            this.HttpsCargoepermitNumber = httpsCargoepermitNumber;
            this.HttpsCargopermitTypeCode = httpsCargopermitTypeCode;
            this.HttpsCargopermitTypeOtherDescription = httpsCargopermitTypeOtherDescription;
            this.HttpsCargospecialConditions = httpsCargospecialConditions;
            this.HttpsCargotransactionPurpose = httpsCargotransactionPurpose;
            this.HttpsCargotransactionPurposeCode = httpsCargotransactionPurposeCode;
            this.HttpsCargotransportContractId = httpsCargotransportContractId;
            this.HttpsCargotransportContractTypeCode = httpsCargotransportContractTypeCode;
            this.HttpsCargovalidFrom = httpsCargovalidFrom;
            this.HttpsCargovalidUntil = httpsCargovalidUntil;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets Cargoconsignee
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#consignee", EmitDefaultValue = false)]
        public Company HttpsCargoconsignee { get; set; }

        /// <summary>
        /// Gets or Sets Cargoconsignments
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#consignments", EmitDefaultValue = false)]
        public List<EpermitConsignment> HttpsCargoconsignments { get; set; }

        /// <summary>
        /// Gets or Sets Cargosignatures
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#signatures", EmitDefaultValue = false)]
        public List<EpermitSignature> HttpsCargosignatures { get; set; }

        /// <summary>
        /// Gets or Sets CargocopyIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#copyIndicator", EmitDefaultValue = true)]
        public bool HttpsCargocopyIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoepermitNumber
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#epermitNumber", EmitDefaultValue = false)]
        public string HttpsCargoepermitNumber { get; set; }

        /// <summary>
        /// Gets or Sets CargopermitTypeCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#permitTypeCode", EmitDefaultValue = false)]
        public string HttpsCargopermitTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets CargopermitTypeOtherDescription
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#permitTypeOtherDescription", EmitDefaultValue = false)]
        public string HttpsCargopermitTypeOtherDescription { get; set; }

        /// <summary>
        /// Gets or Sets CargospecialConditions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#specialConditions", EmitDefaultValue = false)]
        public string HttpsCargospecialConditions { get; set; }

        /// <summary>
        /// Gets or Sets CargotransactionPurpose
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#transactionPurpose", EmitDefaultValue = false)]
        public string HttpsCargotransactionPurpose { get; set; }

        /// <summary>
        /// Gets or Sets CargotransactionPurposeCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#transactionPurposeCode", EmitDefaultValue = false)]
        public string HttpsCargotransactionPurposeCode { get; set; }

        /// <summary>
        /// Gets or Sets CargotransportContractId
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#transportContractId", EmitDefaultValue = false)]
        public string HttpsCargotransportContractId { get; set; }

        /// <summary>
        /// Gets or Sets CargotransportContractTypeCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#transportContractTypeCode", EmitDefaultValue = false)]
        public string HttpsCargotransportContractTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets CargovalidFrom
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#validFrom", EmitDefaultValue = false)]
        public DateTime HttpsCargovalidFrom { get; set; }

        /// <summary>
        /// Gets or Sets CargovalidUntil
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#validUntil", EmitDefaultValue = false)]
        public DateTime HttpsCargovalidUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveAnimalsEpermit {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  Cargoconsignee: ").Append(HttpsCargoconsignee).Append("\n");
            sb.Append("  Cargoconsignments: ").Append(HttpsCargoconsignments).Append("\n");
            sb.Append("  Cargosignatures: ").Append(HttpsCargosignatures).Append("\n");
            sb.Append("  CargocopyIndicator: ").Append(HttpsCargocopyIndicator).Append("\n");
            sb.Append("  CargoepermitNumber: ").Append(HttpsCargoepermitNumber).Append("\n");
            sb.Append("  CargopermitTypeCode: ").Append(HttpsCargopermitTypeCode).Append("\n");
            sb.Append("  CargopermitTypeOtherDescription: ").Append(HttpsCargopermitTypeOtherDescription).Append("\n");
            sb.Append("  CargospecialConditions: ").Append(HttpsCargospecialConditions).Append("\n");
            sb.Append("  CargotransactionPurpose: ").Append(HttpsCargotransactionPurpose).Append("\n");
            sb.Append("  CargotransactionPurposeCode: ").Append(HttpsCargotransactionPurposeCode).Append("\n");
            sb.Append("  CargotransportContractId: ").Append(HttpsCargotransportContractId).Append("\n");
            sb.Append("  CargotransportContractTypeCode: ").Append(HttpsCargotransportContractTypeCode).Append("\n");
            sb.Append("  CargovalidFrom: ").Append(HttpsCargovalidFrom).Append("\n");
            sb.Append("  CargovalidUntil: ").Append(HttpsCargovalidUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as LiveAnimalsEpermit);
        }

        /// <summary>
        /// Returns true if LiveAnimalsEpermit instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of LiveAnimalsEpermit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveAnimalsEpermit httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoconsignee == httpsInput.HttpsCargoconsignee ||
                    (this.HttpsCargoconsignee != null &&
                    this.HttpsCargoconsignee.Equals(httpsInput.HttpsCargoconsignee))
                ) && 
                (
                    this.HttpsCargoconsignments == httpsInput.HttpsCargoconsignments ||
                    this.HttpsCargoconsignments != null &&
                    httpsInput.HttpsCargoconsignments != null &&
                    this.HttpsCargoconsignments.SequenceEqual(httpsInput.HttpsCargoconsignments)
                ) && 
                (
                    this.HttpsCargosignatures == httpsInput.HttpsCargosignatures ||
                    this.HttpsCargosignatures != null &&
                    httpsInput.HttpsCargosignatures != null &&
                    this.HttpsCargosignatures.SequenceEqual(httpsInput.HttpsCargosignatures)
                ) && 
                (
                    this.HttpsCargocopyIndicator == httpsInput.HttpsCargocopyIndicator ||
                    this.HttpsCargocopyIndicator.Equals(httpsInput.HttpsCargocopyIndicator)
                ) && 
                (
                    this.HttpsCargoepermitNumber == httpsInput.HttpsCargoepermitNumber ||
                    (this.HttpsCargoepermitNumber != null &&
                    this.HttpsCargoepermitNumber.Equals(httpsInput.HttpsCargoepermitNumber))
                ) && 
                (
                    this.HttpsCargopermitTypeCode == httpsInput.HttpsCargopermitTypeCode ||
                    (this.HttpsCargopermitTypeCode != null &&
                    this.HttpsCargopermitTypeCode.Equals(httpsInput.HttpsCargopermitTypeCode))
                ) && 
                (
                    this.HttpsCargopermitTypeOtherDescription == httpsInput.HttpsCargopermitTypeOtherDescription ||
                    (this.HttpsCargopermitTypeOtherDescription != null &&
                    this.HttpsCargopermitTypeOtherDescription.Equals(httpsInput.HttpsCargopermitTypeOtherDescription))
                ) && 
                (
                    this.HttpsCargospecialConditions == httpsInput.HttpsCargospecialConditions ||
                    (this.HttpsCargospecialConditions != null &&
                    this.HttpsCargospecialConditions.Equals(httpsInput.HttpsCargospecialConditions))
                ) && 
                (
                    this.HttpsCargotransactionPurpose == httpsInput.HttpsCargotransactionPurpose ||
                    (this.HttpsCargotransactionPurpose != null &&
                    this.HttpsCargotransactionPurpose.Equals(httpsInput.HttpsCargotransactionPurpose))
                ) && 
                (
                    this.HttpsCargotransactionPurposeCode == httpsInput.HttpsCargotransactionPurposeCode ||
                    (this.HttpsCargotransactionPurposeCode != null &&
                    this.HttpsCargotransactionPurposeCode.Equals(httpsInput.HttpsCargotransactionPurposeCode))
                ) && 
                (
                    this.HttpsCargotransportContractId == httpsInput.HttpsCargotransportContractId ||
                    (this.HttpsCargotransportContractId != null &&
                    this.HttpsCargotransportContractId.Equals(httpsInput.HttpsCargotransportContractId))
                ) && 
                (
                    this.HttpsCargotransportContractTypeCode == httpsInput.HttpsCargotransportContractTypeCode ||
                    (this.HttpsCargotransportContractTypeCode != null &&
                    this.HttpsCargotransportContractTypeCode.Equals(httpsInput.HttpsCargotransportContractTypeCode))
                ) && 
                (
                    this.HttpsCargovalidFrom == httpsInput.HttpsCargovalidFrom ||
                    (this.HttpsCargovalidFrom != null &&
                    this.HttpsCargovalidFrom.Equals(httpsInput.HttpsCargovalidFrom))
                ) && 
                (
                    this.HttpsCargovalidUntil == httpsInput.HttpsCargovalidUntil ||
                    (this.HttpsCargovalidUntil != null &&
                    this.HttpsCargovalidUntil.Equals(httpsInput.HttpsCargovalidUntil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoconsignee != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoconsignee.GetHashCode();
                }
                if (this.HttpsCargoconsignments != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoconsignments.GetHashCode();
                }
                if (this.HttpsCargosignatures != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargosignatures.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargocopyIndicator.GetHashCode();
                if (this.HttpsCargoepermitNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoepermitNumber.GetHashCode();
                }
                if (this.HttpsCargopermitTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopermitTypeCode.GetHashCode();
                }
                if (this.HttpsCargopermitTypeOtherDescription != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopermitTypeOtherDescription.GetHashCode();
                }
                if (this.HttpsCargospecialConditions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargospecialConditions.GetHashCode();
                }
                if (this.HttpsCargotransactionPurpose != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotransactionPurpose.GetHashCode();
                }
                if (this.HttpsCargotransactionPurposeCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotransactionPurposeCode.GetHashCode();
                }
                if (this.HttpsCargotransportContractId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotransportContractId.GetHashCode();
                }
                if (this.HttpsCargotransportContractTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotransportContractTypeCode.GetHashCode();
                }
                if (this.HttpsCargovalidFrom != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovalidFrom.GetHashCode();
                }
                if (this.HttpsCargovalidUntil != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovalidUntil.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
