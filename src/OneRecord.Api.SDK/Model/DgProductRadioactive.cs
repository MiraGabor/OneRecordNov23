/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// DgProductRadioactive
    /// </summary>
    [DataContract(Name = "DgProductRadioactive")]
    public partial class DgProductRadioactive : IEquatable<DgProductRadioactive>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgProductRadioactive" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoforProductDg">CargoforProductDg.</param>
        /// <param name="httpsCargoisotopes">Cargoisotopes.</param>
        /// <param name="httpsCargodgRaTypeCode">CargodgRaTypeCode.</param>
        /// <param name="httpsCargofissileExceptionIndicator">CargofissileExceptionIndicator.</param>
        /// <param name="httpsCargofissileExceptionReference">CargofissileExceptionReference.</param>
        /// <param name="httpsCargotransportIndexNumeric">CargotransportIndexNumeric.</param>
        public DgProductRadioactive(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), ProductDg httpsCargoforProductDg = default(ProductDg), List<DgRadioactiveIsotope> httpsCargoisotopes = default(List<DgRadioactiveIsotope>), string httpsCargodgRaTypeCode = default(string), bool httpsCargofissileExceptionIndicator = default(bool), string httpsCargofissileExceptionReference = default(string), int httpsCargotransportIndexNumeric = default(int))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoforProductDg = httpsCargoforProductDg;
            this.HttpsCargoisotopes = httpsCargoisotopes;
            this.HttpsCargodgRaTypeCode = httpsCargodgRaTypeCode;
            this.HttpsCargofissileExceptionIndicator = httpsCargofissileExceptionIndicator;
            this.HttpsCargofissileExceptionReference = httpsCargofissileExceptionReference;
            this.HttpsCargotransportIndexNumeric = httpsCargotransportIndexNumeric;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoforProductDg
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#forProductDg", EmitDefaultValue = false)]
        public ProductDg HttpsCargoforProductDg { get; set; }

        /// <summary>
        /// Gets or Sets Cargoisotopes
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#isotopes", EmitDefaultValue = false)]
        public List<DgRadioactiveIsotope> HttpsCargoisotopes { get; set; }

        /// <summary>
        /// Gets or Sets CargodgRaTypeCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#dgRaTypeCode", EmitDefaultValue = false)]
        public string HttpsCargodgRaTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets CargofissileExceptionIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#fissileExceptionIndicator", EmitDefaultValue = true)]
        public bool HttpsCargofissileExceptionIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargofissileExceptionReference
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#fissileExceptionReference", EmitDefaultValue = false)]
        public string HttpsCargofissileExceptionReference { get; set; }

        /// <summary>
        /// Gets or Sets CargotransportIndexNumeric
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#transportIndexNumeric", EmitDefaultValue = false)]
        public int HttpsCargotransportIndexNumeric { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgProductRadioactive {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargoforProductDg: ").Append(HttpsCargoforProductDg).Append("\n");
            sb.Append("  Cargoisotopes: ").Append(HttpsCargoisotopes).Append("\n");
            sb.Append("  CargodgRaTypeCode: ").Append(HttpsCargodgRaTypeCode).Append("\n");
            sb.Append("  CargofissileExceptionIndicator: ").Append(HttpsCargofissileExceptionIndicator).Append("\n");
            sb.Append("  CargofissileExceptionReference: ").Append(HttpsCargofissileExceptionReference).Append("\n");
            sb.Append("  CargotransportIndexNumeric: ").Append(HttpsCargotransportIndexNumeric).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as DgProductRadioactive);
        }

        /// <summary>
        /// Returns true if DgProductRadioactive instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of DgProductRadioactive to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DgProductRadioactive httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoforProductDg == httpsInput.HttpsCargoforProductDg ||
                    (this.HttpsCargoforProductDg != null &&
                    this.HttpsCargoforProductDg.Equals(httpsInput.HttpsCargoforProductDg))
                ) && 
                (
                    this.HttpsCargoisotopes == httpsInput.HttpsCargoisotopes ||
                    this.HttpsCargoisotopes != null &&
                    httpsInput.HttpsCargoisotopes != null &&
                    this.HttpsCargoisotopes.SequenceEqual(httpsInput.HttpsCargoisotopes)
                ) && 
                (
                    this.HttpsCargodgRaTypeCode == httpsInput.HttpsCargodgRaTypeCode ||
                    (this.HttpsCargodgRaTypeCode != null &&
                    this.HttpsCargodgRaTypeCode.Equals(httpsInput.HttpsCargodgRaTypeCode))
                ) && 
                (
                    this.HttpsCargofissileExceptionIndicator == httpsInput.HttpsCargofissileExceptionIndicator ||
                    this.HttpsCargofissileExceptionIndicator.Equals(httpsInput.HttpsCargofissileExceptionIndicator)
                ) && 
                (
                    this.HttpsCargofissileExceptionReference == httpsInput.HttpsCargofissileExceptionReference ||
                    (this.HttpsCargofissileExceptionReference != null &&
                    this.HttpsCargofissileExceptionReference.Equals(httpsInput.HttpsCargofissileExceptionReference))
                ) && 
                (
                    this.HttpsCargotransportIndexNumeric == httpsInput.HttpsCargotransportIndexNumeric ||
                    this.HttpsCargotransportIndexNumeric.Equals(httpsInput.HttpsCargotransportIndexNumeric)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoforProductDg != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoforProductDg.GetHashCode();
                }
                if (this.HttpsCargoisotopes != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoisotopes.GetHashCode();
                }
                if (this.HttpsCargodgRaTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodgRaTypeCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargofissileExceptionIndicator.GetHashCode();
                if (this.HttpsCargofissileExceptionReference != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargofissileExceptionReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargotransportIndexNumeric.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
