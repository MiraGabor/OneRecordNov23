/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// Booking
    /// </summary>
    [DataContract(Name = "Booking")]
    public partial class Booking : LogisticsObject, IEquatable<Booking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Booking" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="Type">type.</param>
        /// <param name="Checks">Cargochecks.</param>
        /// <param name="Events">Cargoevents.</param>
        /// <param name="ExternalReferences">CargoexternalReferences.</param>
        /// <param name="CompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="SkeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoactivitySequences">CargoactivitySequences.</param>
        /// <param name="httpsCargocontactDetails">CargocontactDetails.</param>
        /// <param name="httpsCargocontactPersons">CargocontactPersons.</param>
        /// <param name="httpsCargoforBookingRequest">CargoforBookingRequest.</param>
        /// <param name="httpsCargoissuedForWaybill">CargoissuedForWaybill.</param>
        public Booking(string httpsId = default(string), List<string> Type = default(List<string>), List<Check> Checks = default(List<Check>), List<LogisticsEvent> Events = default(List<LogisticsEvent>), List<ExternalReference> ExternalReferences = default(List<ExternalReference>), string CompanyIdentifier = default(string), bool SkeletonIndicator = default(bool), List<ActivitySequence> httpsCargoactivitySequences = default(List<ActivitySequence>), List<ContactDetail> httpsCargocontactDetails = default(List<ContactDetail>), List<Person> httpsCargocontactPersons = default(List<Person>), BookingRequest httpsCargoforBookingRequest = default(BookingRequest), Waybill httpsCargoissuedForWaybill = default(Waybill))
        {
            this.Id = httpsId;
            this.Type = Type;
            this.Checks = Checks;
            this.Events = Events;
            this.ExternalReferences = ExternalReferences;
            this.CompanyIdentifier = CompanyIdentifier;
            this.SkeletonIndicator = SkeletonIndicator;
            this.HttpsCargoactivitySequences = httpsCargoactivitySequences;
            this.HttpsCargocontactDetails = httpsCargocontactDetails;
            this.HttpsCargocontactPersons = httpsCargocontactPersons;
            this.HttpsCargoforBookingRequest = httpsCargoforBookingRequest;
            this.HttpsCargoissuedForWaybill = httpsCargoissuedForWaybill;
        }

      
        /// <summary>
        /// Gets or Sets CargoactivitySequences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#activitySequences", EmitDefaultValue = false)]
        public List<ActivitySequence> HttpsCargoactivitySequences { get; set; }

        /// <summary>
        /// Gets or Sets CargocontactDetails
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#contactDetails", EmitDefaultValue = false)]
        public List<ContactDetail> HttpsCargocontactDetails { get; set; }

        /// <summary>
        /// Gets or Sets CargocontactPersons
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#contactPersons", EmitDefaultValue = false)]
        public List<Person> HttpsCargocontactPersons { get; set; }

        /// <summary>
        /// Gets or Sets CargoforBookingRequest
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#forBookingRequest", EmitDefaultValue = false)]
        public BookingRequest HttpsCargoforBookingRequest { get; set; }

        /// <summary>
        /// Gets or Sets CargoissuedForWaybill
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#issuedForWaybill", EmitDefaultValue = false)]
        public Waybill HttpsCargoissuedForWaybill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Booking {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cargochecks: ").Append(Checks).Append("\n");
            sb.Append("  Cargoevents: ").Append(Events).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(ExternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(CompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(SkeletonIndicator).Append("\n");
            sb.Append("  CargoactivitySequences: ").Append(HttpsCargoactivitySequences).Append("\n");
            sb.Append("  CargocontactDetails: ").Append(HttpsCargocontactDetails).Append("\n");
            sb.Append("  CargocontactPersons: ").Append(HttpsCargocontactPersons).Append("\n");
            sb.Append("  CargoforBookingRequest: ").Append(HttpsCargoforBookingRequest).Append("\n");
            sb.Append("  CargoissuedForWaybill: ").Append(HttpsCargoissuedForWaybill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as Booking);
        }

        /// <summary>
        /// Returns true if Booking instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of Booking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Booking httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Checks == httpsInput.Checks ||
                    this.Checks != null &&
                    httpsInput.Checks != null &&
                    this.Checks.SequenceEqual(httpsInput.Checks)
                ) && 
                (
                    this.Events == httpsInput.Events ||
                    this.Events != null &&
                    httpsInput.Events != null &&
                    this.Events.SequenceEqual(httpsInput.Events)
                ) && 
                (
                    this.ExternalReferences == httpsInput.ExternalReferences ||
                    this.ExternalReferences != null &&
                    httpsInput.ExternalReferences != null &&
                    this.ExternalReferences.SequenceEqual(httpsInput.ExternalReferences)
                ) && 
                (
                    this.CompanyIdentifier == httpsInput.CompanyIdentifier ||
                    (this.CompanyIdentifier != null &&
                    this.CompanyIdentifier.Equals(httpsInput.CompanyIdentifier))
                ) && 
                (
                    this.SkeletonIndicator == httpsInput.SkeletonIndicator ||
                    this.SkeletonIndicator.Equals(httpsInput.SkeletonIndicator)
                ) && 
                (
                    this.HttpsCargoactivitySequences == httpsInput.HttpsCargoactivitySequences ||
                    this.HttpsCargoactivitySequences != null &&
                    httpsInput.HttpsCargoactivitySequences != null &&
                    this.HttpsCargoactivitySequences.SequenceEqual(httpsInput.HttpsCargoactivitySequences)
                ) && 
                (
                    this.HttpsCargocontactDetails == httpsInput.HttpsCargocontactDetails ||
                    this.HttpsCargocontactDetails != null &&
                    httpsInput.HttpsCargocontactDetails != null &&
                    this.HttpsCargocontactDetails.SequenceEqual(httpsInput.HttpsCargocontactDetails)
                ) && 
                (
                    this.HttpsCargocontactPersons == httpsInput.HttpsCargocontactPersons ||
                    this.HttpsCargocontactPersons != null &&
                    httpsInput.HttpsCargocontactPersons != null &&
                    this.HttpsCargocontactPersons.SequenceEqual(httpsInput.HttpsCargocontactPersons)
                ) && 
                (
                    this.HttpsCargoforBookingRequest == httpsInput.HttpsCargoforBookingRequest ||
                    (this.HttpsCargoforBookingRequest != null &&
                    this.HttpsCargoforBookingRequest.Equals(httpsInput.HttpsCargoforBookingRequest))
                ) && 
                (
                    this.HttpsCargoissuedForWaybill == httpsInput.HttpsCargoissuedForWaybill ||
                    (this.HttpsCargoissuedForWaybill != null &&
                    this.HttpsCargoissuedForWaybill.Equals(httpsInput.HttpsCargoissuedForWaybill))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.ExternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReferences.GetHashCode();
                }
                if (this.CompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkeletonIndicator.GetHashCode();
                if (this.HttpsCargoactivitySequences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoactivitySequences.GetHashCode();
                }
                if (this.HttpsCargocontactDetails != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontactDetails.GetHashCode();
                }
                if (this.HttpsCargocontactPersons != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontactPersons.GetHashCode();
                }
                if (this.HttpsCargoforBookingRequest != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoforBookingRequest.GetHashCode();
                }
                if (this.HttpsCargoissuedForWaybill != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoissuedForWaybill.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
