/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// BookingShipment
    /// </summary>
    [DataContract(Name = "BookingShipment")]
    public partial class BookingShipment : IEquatable<BookingShipment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingShipment" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargobookingOptionRequest">CargobookingOptionRequest.</param>
        /// <param name="httpsCargopreferredHandling">CargopreferredHandling.</param>
        /// <param name="httpsCargototalDimensions">CargototalDimensions.</param>
        /// <param name="httpsCargototalGrossWeight">CargototalGrossWeight.</param>
        /// <param name="httpsCargototalVolumetricWeight">CargototalVolumetricWeight.</param>
        /// <param name="httpsCargogoodsDescription">CargogoodsDescription.</param>
        /// <param name="httpsCargoloadType">CargoloadType.</param>
        /// <param name="httpsCargototalPieceCount">CargototalPieceCount.</param>
        public BookingShipment(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<BookingOptionRequest> httpsCargobookingOptionRequest = default(List<BookingOptionRequest>), List<HandlingInstructions> httpsCargopreferredHandling = default(List<HandlingInstructions>), Dimensions httpsCargototalDimensions = default(Dimensions), Value httpsCargototalGrossWeight = default(Value), VolumetricWeight httpsCargototalVolumetricWeight = default(VolumetricWeight), string httpsCargogoodsDescription = default(string), string httpsCargoloadType = default(string), int httpsCargototalPieceCount = default(int))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargobookingOptionRequest = httpsCargobookingOptionRequest;
            this.HttpsCargopreferredHandling = httpsCargopreferredHandling;
            this.HttpsCargototalDimensions = httpsCargototalDimensions;
            this.HttpsCargototalGrossWeight = httpsCargototalGrossWeight;
            this.HttpsCargototalVolumetricWeight = httpsCargototalVolumetricWeight;
            this.HttpsCargogoodsDescription = httpsCargogoodsDescription;
            this.HttpsCargoloadType = httpsCargoloadType;
            this.HttpsCargototalPieceCount = httpsCargototalPieceCount;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingOptionRequest
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#bookingOptionRequest", EmitDefaultValue = false)]
        public List<BookingOptionRequest> HttpsCargobookingOptionRequest { get; set; }

        /// <summary>
        /// Gets or Sets CargopreferredHandling
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#preferredHandling", EmitDefaultValue = false)]
        public List<HandlingInstructions> HttpsCargopreferredHandling { get; set; }

        /// <summary>
        /// Gets or Sets CargototalDimensions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#totalDimensions", EmitDefaultValue = false)]
        public Dimensions HttpsCargototalDimensions { get; set; }

        /// <summary>
        /// Gets or Sets CargototalGrossWeight
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#totalGrossWeight", EmitDefaultValue = false)]
        public Value HttpsCargototalGrossWeight { get; set; }

        /// <summary>
        /// Gets or Sets CargototalVolumetricWeight
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#totalVolumetricWeight", EmitDefaultValue = false)]
        public VolumetricWeight HttpsCargototalVolumetricWeight { get; set; }

        /// <summary>
        /// Gets or Sets CargogoodsDescription
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#goodsDescription", EmitDefaultValue = false)]
        public string HttpsCargogoodsDescription { get; set; }

        /// <summary>
        /// Gets or Sets CargoloadType
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#loadType", EmitDefaultValue = false)]
        public string HttpsCargoloadType { get; set; }

        /// <summary>
        /// Gets or Sets CargototalPieceCount
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#totalPieceCount", EmitDefaultValue = false)]
        public int HttpsCargototalPieceCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookingShipment {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargobookingOptionRequest: ").Append(HttpsCargobookingOptionRequest).Append("\n");
            sb.Append("  CargopreferredHandling: ").Append(HttpsCargopreferredHandling).Append("\n");
            sb.Append("  CargototalDimensions: ").Append(HttpsCargototalDimensions).Append("\n");
            sb.Append("  CargototalGrossWeight: ").Append(HttpsCargototalGrossWeight).Append("\n");
            sb.Append("  CargototalVolumetricWeight: ").Append(HttpsCargototalVolumetricWeight).Append("\n");
            sb.Append("  CargogoodsDescription: ").Append(HttpsCargogoodsDescription).Append("\n");
            sb.Append("  CargoloadType: ").Append(HttpsCargoloadType).Append("\n");
            sb.Append("  CargototalPieceCount: ").Append(HttpsCargototalPieceCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as BookingShipment);
        }

        /// <summary>
        /// Returns true if BookingShipment instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of BookingShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingShipment httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargobookingOptionRequest == httpsInput.HttpsCargobookingOptionRequest ||
                    this.HttpsCargobookingOptionRequest != null &&
                    httpsInput.HttpsCargobookingOptionRequest != null &&
                    this.HttpsCargobookingOptionRequest.SequenceEqual(httpsInput.HttpsCargobookingOptionRequest)
                ) && 
                (
                    this.HttpsCargopreferredHandling == httpsInput.HttpsCargopreferredHandling ||
                    this.HttpsCargopreferredHandling != null &&
                    httpsInput.HttpsCargopreferredHandling != null &&
                    this.HttpsCargopreferredHandling.SequenceEqual(httpsInput.HttpsCargopreferredHandling)
                ) && 
                (
                    this.HttpsCargototalDimensions == httpsInput.HttpsCargototalDimensions ||
                    (this.HttpsCargototalDimensions != null &&
                    this.HttpsCargototalDimensions.Equals(httpsInput.HttpsCargototalDimensions))
                ) && 
                (
                    this.HttpsCargototalGrossWeight == httpsInput.HttpsCargototalGrossWeight ||
                    (this.HttpsCargototalGrossWeight != null &&
                    this.HttpsCargototalGrossWeight.Equals(httpsInput.HttpsCargototalGrossWeight))
                ) && 
                (
                    this.HttpsCargototalVolumetricWeight == httpsInput.HttpsCargototalVolumetricWeight ||
                    (this.HttpsCargototalVolumetricWeight != null &&
                    this.HttpsCargototalVolumetricWeight.Equals(httpsInput.HttpsCargototalVolumetricWeight))
                ) && 
                (
                    this.HttpsCargogoodsDescription == httpsInput.HttpsCargogoodsDescription ||
                    (this.HttpsCargogoodsDescription != null &&
                    this.HttpsCargogoodsDescription.Equals(httpsInput.HttpsCargogoodsDescription))
                ) && 
                (
                    this.HttpsCargoloadType == httpsInput.HttpsCargoloadType ||
                    (this.HttpsCargoloadType != null &&
                    this.HttpsCargoloadType.Equals(httpsInput.HttpsCargoloadType))
                ) && 
                (
                    this.HttpsCargototalPieceCount == httpsInput.HttpsCargototalPieceCount ||
                    this.HttpsCargototalPieceCount.Equals(httpsInput.HttpsCargototalPieceCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargobookingOptionRequest != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobookingOptionRequest.GetHashCode();
                }
                if (this.HttpsCargopreferredHandling != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopreferredHandling.GetHashCode();
                }
                if (this.HttpsCargototalDimensions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargototalDimensions.GetHashCode();
                }
                if (this.HttpsCargototalGrossWeight != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargototalGrossWeight.GetHashCode();
                }
                if (this.HttpsCargototalVolumetricWeight != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargototalVolumetricWeight.GetHashCode();
                }
                if (this.HttpsCargogoodsDescription != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargogoodsDescription.GetHashCode();
                }
                if (this.HttpsCargoloadType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoloadType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargototalPieceCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
