/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// PieceLiveAnimals
    /// </summary>
    [DataContract(Name = "PieceLiveAnimals")]
    public partial class PieceLiveAnimals : IEquatable<PieceLiveAnimals>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PieceLiveAnimals" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargoattachedIotDevices">CargoattachedIotDevices.</param>
        /// <param name="httpsCargoinvolvedInActions">CargoinvolvedInActions.</param>
        /// <param name="httpsCargocontainedItems">CargocontainedItems.</param>
        /// <param name="httpsCargocontainedPieceInPiece">CargocontainedPieceInPiece.</param>
        /// <param name="httpsCargocontainedPieces">CargocontainedPieces.</param>
        /// <param name="httpsCargocontentDescribedByProducts">CargocontentDescribedByProducts.</param>
        /// <param name="httpsCargocontentProductionCountry">CargocontentProductionCountry.</param>
        /// <param name="httpsCargocustomsInformation">CargocustomsInformation.</param>
        /// <param name="httpsCargodimensions">Cargodimensions.</param>
        /// <param name="httpsCargogrossWeight">CargogrossWeight.</param>
        /// <param name="httpsCargohandlingInstructions">CargohandlingInstructions.</param>
        /// <param name="httpsCargoinvolvedParties">CargoinvolvedParties.</param>
        /// <param name="httpsCargootherIdentifiers">CargootherIdentifiers.</param>
        /// <param name="httpsCargopackagingType">CargopackagingType.</param>
        /// <param name="httpsCargopartOfShipment">CargopartOfShipment.</param>
        /// <param name="httpsCargosecurityDeclaration">CargosecurityDeclaration.</param>
        /// <param name="httpsCargouldReference">CargouldReference.</param>
        /// <param name="httpsCargovolumetricWeight">CargovolumetricWeight.</param>
        /// <param name="httpsCargocoload">Cargocoload.</param>
        /// <param name="httpsCargodeclaredValueForCarriage">CargodeclaredValueForCarriage.</param>
        /// <param name="httpsCargodeclaredValueForCustoms">CargodeclaredValueForCustoms.</param>
        /// <param name="httpsCargofulfillsUldTypeCode">CargofulfillsUldTypeCode.</param>
        /// <param name="httpsCargogoodsDescription">CargogoodsDescription.</param>
        /// <param name="httpsCargoloadType">CargoloadType.</param>
        /// <param name="httpsCargonvdForCarriage">CargonvdForCarriage.</param>
        /// <param name="httpsCargonvdForCustoms">CargonvdForCustoms.</param>
        /// <param name="httpsCargopackageMarkCoded">CargopackageMarkCoded.</param>
        /// <param name="httpsCargopackagedeIdentifier">CargopackagedeIdentifier.</param>
        /// <param name="httpsCargoshippingMarks">CargoshippingMarks.</param>
        /// <param name="httpsCargoslac">Cargoslac.</param>
        /// <param name="httpsCargostackable">Cargostackable.</param>
        /// <param name="httpsCargoturnable">Cargoturnable.</param>
        /// <param name="httpsCargoupid">Cargoupid.</param>
        /// <param name="httpsCargoassociatedEpermit">CargoassociatedEpermit.</param>
        /// <param name="httpsCargoexportTradeCountry">CargoexportTradeCountry.</param>
        /// <param name="httpsCargooriginTradeCountry">CargooriginTradeCountry.</param>
        /// <param name="httpsCargoacquisitionDateTime">CargoacquisitionDateTime.</param>
        /// <param name="httpsCargoannualQuotaQuantity">CargoannualQuotaQuantity.</param>
        /// <param name="httpsCargocategoryCode">CargocategoryCode.</param>
        /// <param name="httpsCargogoodsTypeCode">CargogoodsTypeCode.</param>
        /// <param name="httpsCargogoodsTypeExtensionCode">CargogoodsTypeExtensionCode.</param>
        /// <param name="httpsCargooriginReferencePermitDateTime">CargooriginReferencePermitDateTime.</param>
        /// <param name="httpsCargooriginReferencePermitId">CargooriginReferencePermitId.</param>
        /// <param name="httpsCargooriginReferencePermitTypeCode">CargooriginReferencePermitTypeCode.</param>
        /// <param name="httpsCargoquantityAnimals">CargoquantityAnimals.</param>
        /// <param name="httpsCargospeciesCommonName">CargospeciesCommonName.</param>
        /// <param name="httpsCargospeciesScientificName">CargospeciesScientificName.</param>
        /// <param name="httpsCargospecimenDescription">CargospecimenDescription.</param>
        /// <param name="httpsCargospecimenTypeCode">CargospecimenTypeCode.</param>
        public PieceLiveAnimals(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<IotDevice> httpsCargoattachedIotDevices = default(List<IotDevice>), List<LogisticsAction> httpsCargoinvolvedInActions = default(List<LogisticsAction>), List<Item> httpsCargocontainedItems = default(List<Item>), Piece httpsCargocontainedPieceInPiece = default(Piece), List<Piece> httpsCargocontainedPieces = default(List<Piece>), List<Product> httpsCargocontentDescribedByProducts = default(List<Product>), Country httpsCargocontentProductionCountry = default(Country), List<CustomsInformation> httpsCargocustomsInformation = default(List<CustomsInformation>), Dimensions httpsCargodimensions = default(Dimensions), Value httpsCargogrossWeight = default(Value), List<HandlingInstructions> httpsCargohandlingInstructions = default(List<HandlingInstructions>), List<Party> httpsCargoinvolvedParties = default(List<Party>), List<OtherIdentifier> httpsCargootherIdentifiers = default(List<OtherIdentifier>), PackagingType httpsCargopackagingType = default(PackagingType), Shipment httpsCargopartOfShipment = default(Shipment), SecurityDeclaration httpsCargosecurityDeclaration = default(SecurityDeclaration), LoadingUnit httpsCargouldReference = default(LoadingUnit), VolumetricWeight httpsCargovolumetricWeight = default(VolumetricWeight), bool httpsCargocoload = default(bool), string httpsCargodeclaredValueForCarriage = default(string), string httpsCargodeclaredValueForCustoms = default(string), string httpsCargofulfillsUldTypeCode = default(string), string httpsCargogoodsDescription = default(string), string httpsCargoloadType = default(string), bool httpsCargonvdForCarriage = default(bool), bool httpsCargonvdForCustoms = default(bool), string httpsCargopackageMarkCoded = default(string), string httpsCargopackagedeIdentifier = default(string), List<string> httpsCargoshippingMarks = default(List<string>), int httpsCargoslac = default(int), bool httpsCargostackable = default(bool), bool httpsCargoturnable = default(bool), string httpsCargoupid = default(string), EpermitConsignment httpsCargoassociatedEpermit = default(EpermitConsignment), Country httpsCargoexportTradeCountry = default(Country), Country httpsCargooriginTradeCountry = default(Country), DateTime httpsCargoacquisitionDateTime = default(DateTime), int httpsCargoannualQuotaQuantity = default(int), List<string> httpsCargocategoryCode = default(List<string>), string httpsCargogoodsTypeCode = default(string), string httpsCargogoodsTypeExtensionCode = default(string), DateTime httpsCargooriginReferencePermitDateTime = default(DateTime), string httpsCargooriginReferencePermitId = default(string), string httpsCargooriginReferencePermitTypeCode = default(string), int httpsCargoquantityAnimals = default(int), List<string> httpsCargospeciesCommonName = default(List<string>), List<string> httpsCargospeciesScientificName = default(List<string>), string httpsCargospecimenDescription = default(string), string httpsCargospecimenTypeCode = default(string))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargoattachedIotDevices = httpsCargoattachedIotDevices;
            this.HttpsCargoinvolvedInActions = httpsCargoinvolvedInActions;
            this.HttpsCargocontainedItems = httpsCargocontainedItems;
            this.HttpsCargocontainedPieceInPiece = httpsCargocontainedPieceInPiece;
            this.HttpsCargocontainedPieces = httpsCargocontainedPieces;
            this.HttpsCargocontentDescribedByProducts = httpsCargocontentDescribedByProducts;
            this.HttpsCargocontentProductionCountry = httpsCargocontentProductionCountry;
            this.HttpsCargocustomsInformation = httpsCargocustomsInformation;
            this.HttpsCargodimensions = httpsCargodimensions;
            this.HttpsCargogrossWeight = httpsCargogrossWeight;
            this.HttpsCargohandlingInstructions = httpsCargohandlingInstructions;
            this.HttpsCargoinvolvedParties = httpsCargoinvolvedParties;
            this.HttpsCargootherIdentifiers = httpsCargootherIdentifiers;
            this.HttpsCargopackagingType = httpsCargopackagingType;
            this.HttpsCargopartOfShipment = httpsCargopartOfShipment;
            this.HttpsCargosecurityDeclaration = httpsCargosecurityDeclaration;
            this.HttpsCargouldReference = httpsCargouldReference;
            this.HttpsCargovolumetricWeight = httpsCargovolumetricWeight;
            this.HttpsCargocoload = httpsCargocoload;
            this.HttpsCargodeclaredValueForCarriage = httpsCargodeclaredValueForCarriage;
            this.HttpsCargodeclaredValueForCustoms = httpsCargodeclaredValueForCustoms;
            this.HttpsCargofulfillsUldTypeCode = httpsCargofulfillsUldTypeCode;
            this.HttpsCargogoodsDescription = httpsCargogoodsDescription;
            this.HttpsCargoloadType = httpsCargoloadType;
            this.HttpsCargonvdForCarriage = httpsCargonvdForCarriage;
            this.HttpsCargonvdForCustoms = httpsCargonvdForCustoms;
            this.HttpsCargopackageMarkCoded = httpsCargopackageMarkCoded;
            this.HttpsCargopackagedeIdentifier = httpsCargopackagedeIdentifier;
            this.HttpsCargoshippingMarks = httpsCargoshippingMarks;
            this.HttpsCargoslac = httpsCargoslac;
            this.HttpsCargostackable = httpsCargostackable;
            this.HttpsCargoturnable = httpsCargoturnable;
            this.HttpsCargoupid = httpsCargoupid;
            this.HttpsCargoassociatedEpermit = httpsCargoassociatedEpermit;
            this.HttpsCargoexportTradeCountry = httpsCargoexportTradeCountry;
            this.HttpsCargooriginTradeCountry = httpsCargooriginTradeCountry;
            this.HttpsCargoacquisitionDateTime = httpsCargoacquisitionDateTime;
            this.HttpsCargoannualQuotaQuantity = httpsCargoannualQuotaQuantity;
            this.HttpsCargocategoryCode = httpsCargocategoryCode;
            this.HttpsCargogoodsTypeCode = httpsCargogoodsTypeCode;
            this.HttpsCargogoodsTypeExtensionCode = httpsCargogoodsTypeExtensionCode;
            this.HttpsCargooriginReferencePermitDateTime = httpsCargooriginReferencePermitDateTime;
            this.HttpsCargooriginReferencePermitId = httpsCargooriginReferencePermitId;
            this.HttpsCargooriginReferencePermitTypeCode = httpsCargooriginReferencePermitTypeCode;
            this.HttpsCargoquantityAnimals = httpsCargoquantityAnimals;
            this.HttpsCargospeciesCommonName = httpsCargospeciesCommonName;
            this.HttpsCargospeciesScientificName = httpsCargospeciesScientificName;
            this.HttpsCargospecimenDescription = httpsCargospecimenDescription;
            this.HttpsCargospecimenTypeCode = httpsCargospecimenTypeCode;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargoattachedIotDevices
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#attachedIotDevices", EmitDefaultValue = false)]
        public List<IotDevice> HttpsCargoattachedIotDevices { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedInActions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#involvedInActions", EmitDefaultValue = false)]
        public List<LogisticsAction> HttpsCargoinvolvedInActions { get; set; }

        /// <summary>
        /// Gets or Sets CargocontainedItems
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#containedItems", EmitDefaultValue = false)]
        public List<Item> HttpsCargocontainedItems { get; set; }

        /// <summary>
        /// Gets or Sets CargocontainedPieceInPiece
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#containedPieceInPiece", EmitDefaultValue = false)]
        public Piece HttpsCargocontainedPieceInPiece { get; set; }

        /// <summary>
        /// Gets or Sets CargocontainedPieces
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#containedPieces", EmitDefaultValue = false)]
        public List<Piece> HttpsCargocontainedPieces { get; set; }

        /// <summary>
        /// Gets or Sets CargocontentDescribedByProducts
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#contentDescribedByProducts", EmitDefaultValue = false)]
        public List<Product> HttpsCargocontentDescribedByProducts { get; set; }

        /// <summary>
        /// Gets or Sets CargocontentProductionCountry
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#contentProductionCountry", EmitDefaultValue = false)]
        public Country HttpsCargocontentProductionCountry { get; set; }

        /// <summary>
        /// Gets or Sets CargocustomsInformation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#customsInformation", EmitDefaultValue = false)]
        public List<CustomsInformation> HttpsCargocustomsInformation { get; set; }

        /// <summary>
        /// Gets or Sets Cargodimensions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#dimensions", EmitDefaultValue = false)]
        public Dimensions HttpsCargodimensions { get; set; }

        /// <summary>
        /// Gets or Sets CargogrossWeight
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#grossWeight", EmitDefaultValue = false)]
        public Value HttpsCargogrossWeight { get; set; }

        /// <summary>
        /// Gets or Sets CargohandlingInstructions
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#handlingInstructions", EmitDefaultValue = false)]
        public List<HandlingInstructions> HttpsCargohandlingInstructions { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedParties
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#involvedParties", EmitDefaultValue = false)]
        public List<Party> HttpsCargoinvolvedParties { get; set; }

        /// <summary>
        /// Gets or Sets CargootherIdentifiers
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#otherIdentifiers", EmitDefaultValue = false)]
        public List<OtherIdentifier> HttpsCargootherIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets CargopackagingType
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#packagingType", EmitDefaultValue = false)]
        public PackagingType HttpsCargopackagingType { get; set; }

        /// <summary>
        /// Gets or Sets CargopartOfShipment
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#partOfShipment", EmitDefaultValue = false)]
        public Shipment HttpsCargopartOfShipment { get; set; }

        /// <summary>
        /// Gets or Sets CargosecurityDeclaration
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#securityDeclaration", EmitDefaultValue = false)]
        public SecurityDeclaration HttpsCargosecurityDeclaration { get; set; }

        /// <summary>
        /// Gets or Sets CargouldReference
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#uldReference", EmitDefaultValue = false)]
        public LoadingUnit HttpsCargouldReference { get; set; }

        /// <summary>
        /// Gets or Sets CargovolumetricWeight
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#volumetricWeight", EmitDefaultValue = false)]
        public VolumetricWeight HttpsCargovolumetricWeight { get; set; }

        /// <summary>
        /// Gets or Sets Cargocoload
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#coload", EmitDefaultValue = true)]
        public bool HttpsCargocoload { get; set; }

        /// <summary>
        /// Gets or Sets CargodeclaredValueForCarriage
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#declaredValueForCarriage", EmitDefaultValue = false)]
        public string HttpsCargodeclaredValueForCarriage { get; set; }

        /// <summary>
        /// Gets or Sets CargodeclaredValueForCustoms
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#declaredValueForCustoms", EmitDefaultValue = false)]
        public string HttpsCargodeclaredValueForCustoms { get; set; }

        /// <summary>
        /// Gets or Sets CargofulfillsUldTypeCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#fulfillsUldTypeCode", EmitDefaultValue = false)]
        public string HttpsCargofulfillsUldTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets CargogoodsDescription
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#goodsDescription", EmitDefaultValue = false)]
        public string HttpsCargogoodsDescription { get; set; }

        /// <summary>
        /// Gets or Sets CargoloadType
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#loadType", EmitDefaultValue = false)]
        public string HttpsCargoloadType { get; set; }

        /// <summary>
        /// Gets or Sets CargonvdForCarriage
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#nvdForCarriage", EmitDefaultValue = true)]
        public bool HttpsCargonvdForCarriage { get; set; }

        /// <summary>
        /// Gets or Sets CargonvdForCustoms
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#nvdForCustoms", EmitDefaultValue = true)]
        public bool HttpsCargonvdForCustoms { get; set; }

        /// <summary>
        /// Gets or Sets CargopackageMarkCoded
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#packageMarkCoded", EmitDefaultValue = false)]
        public string HttpsCargopackageMarkCoded { get; set; }

        /// <summary>
        /// Gets or Sets CargopackagedeIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#packagedeIdentifier", EmitDefaultValue = false)]
        public string HttpsCargopackagedeIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoshippingMarks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#shippingMarks", EmitDefaultValue = false)]
        public List<string> HttpsCargoshippingMarks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoslac
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#slac", EmitDefaultValue = false)]
        public int HttpsCargoslac { get; set; }

        /// <summary>
        /// Gets or Sets Cargostackable
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#stackable", EmitDefaultValue = true)]
        public bool HttpsCargostackable { get; set; }

        /// <summary>
        /// Gets or Sets Cargoturnable
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#turnable", EmitDefaultValue = true)]
        public bool HttpsCargoturnable { get; set; }

        /// <summary>
        /// Gets or Sets Cargoupid
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#upid", EmitDefaultValue = false)]
        public string HttpsCargoupid { get; set; }

        /// <summary>
        /// Gets or Sets CargoassociatedEpermit
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#associatedEpermit", EmitDefaultValue = false)]
        public EpermitConsignment HttpsCargoassociatedEpermit { get; set; }

        /// <summary>
        /// Gets or Sets CargoexportTradeCountry
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#exportTradeCountry", EmitDefaultValue = false)]
        public Country HttpsCargoexportTradeCountry { get; set; }

        /// <summary>
        /// Gets or Sets CargooriginTradeCountry
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#originTradeCountry", EmitDefaultValue = false)]
        public Country HttpsCargooriginTradeCountry { get; set; }

        /// <summary>
        /// Gets or Sets CargoacquisitionDateTime
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#acquisitionDateTime", EmitDefaultValue = false)]
        public DateTime HttpsCargoacquisitionDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CargoannualQuotaQuantity
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#annualQuotaQuantity", EmitDefaultValue = false)]
        public int HttpsCargoannualQuotaQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CargocategoryCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#categoryCode", EmitDefaultValue = false)]
        public List<string> HttpsCargocategoryCode { get; set; }

        /// <summary>
        /// Gets or Sets CargogoodsTypeCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#goodsTypeCode", EmitDefaultValue = false)]
        public string HttpsCargogoodsTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets CargogoodsTypeExtensionCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#goodsTypeExtensionCode", EmitDefaultValue = false)]
        public string HttpsCargogoodsTypeExtensionCode { get; set; }

        /// <summary>
        /// Gets or Sets CargooriginReferencePermitDateTime
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#originReferencePermitDateTime", EmitDefaultValue = false)]
        public DateTime HttpsCargooriginReferencePermitDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CargooriginReferencePermitId
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#originReferencePermitId", EmitDefaultValue = false)]
        public string HttpsCargooriginReferencePermitId { get; set; }

        /// <summary>
        /// Gets or Sets CargooriginReferencePermitTypeCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#originReferencePermitTypeCode", EmitDefaultValue = false)]
        public string HttpsCargooriginReferencePermitTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets CargoquantityAnimals
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#quantityAnimals", EmitDefaultValue = false)]
        public int HttpsCargoquantityAnimals { get; set; }

        /// <summary>
        /// Gets or Sets CargospeciesCommonName
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#speciesCommonName", EmitDefaultValue = false)]
        public List<string> HttpsCargospeciesCommonName { get; set; }

        /// <summary>
        /// Gets or Sets CargospeciesScientificName
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#speciesScientificName", EmitDefaultValue = false)]
        public List<string> HttpsCargospeciesScientificName { get; set; }

        /// <summary>
        /// Gets or Sets CargospecimenDescription
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#specimenDescription", EmitDefaultValue = false)]
        public string HttpsCargospecimenDescription { get; set; }

        /// <summary>
        /// Gets or Sets CargospecimenTypeCode
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#specimenTypeCode", EmitDefaultValue = false)]
        public string HttpsCargospecimenTypeCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PieceLiveAnimals {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargoattachedIotDevices: ").Append(HttpsCargoattachedIotDevices).Append("\n");
            sb.Append("  CargoinvolvedInActions: ").Append(HttpsCargoinvolvedInActions).Append("\n");
            sb.Append("  CargocontainedItems: ").Append(HttpsCargocontainedItems).Append("\n");
            sb.Append("  CargocontainedPieceInPiece: ").Append(HttpsCargocontainedPieceInPiece).Append("\n");
            sb.Append("  CargocontainedPieces: ").Append(HttpsCargocontainedPieces).Append("\n");
            sb.Append("  CargocontentDescribedByProducts: ").Append(HttpsCargocontentDescribedByProducts).Append("\n");
            sb.Append("  CargocontentProductionCountry: ").Append(HttpsCargocontentProductionCountry).Append("\n");
            sb.Append("  CargocustomsInformation: ").Append(HttpsCargocustomsInformation).Append("\n");
            sb.Append("  Cargodimensions: ").Append(HttpsCargodimensions).Append("\n");
            sb.Append("  CargogrossWeight: ").Append(HttpsCargogrossWeight).Append("\n");
            sb.Append("  CargohandlingInstructions: ").Append(HttpsCargohandlingInstructions).Append("\n");
            sb.Append("  CargoinvolvedParties: ").Append(HttpsCargoinvolvedParties).Append("\n");
            sb.Append("  CargootherIdentifiers: ").Append(HttpsCargootherIdentifiers).Append("\n");
            sb.Append("  CargopackagingType: ").Append(HttpsCargopackagingType).Append("\n");
            sb.Append("  CargopartOfShipment: ").Append(HttpsCargopartOfShipment).Append("\n");
            sb.Append("  CargosecurityDeclaration: ").Append(HttpsCargosecurityDeclaration).Append("\n");
            sb.Append("  CargouldReference: ").Append(HttpsCargouldReference).Append("\n");
            sb.Append("  CargovolumetricWeight: ").Append(HttpsCargovolumetricWeight).Append("\n");
            sb.Append("  Cargocoload: ").Append(HttpsCargocoload).Append("\n");
            sb.Append("  CargodeclaredValueForCarriage: ").Append(HttpsCargodeclaredValueForCarriage).Append("\n");
            sb.Append("  CargodeclaredValueForCustoms: ").Append(HttpsCargodeclaredValueForCustoms).Append("\n");
            sb.Append("  CargofulfillsUldTypeCode: ").Append(HttpsCargofulfillsUldTypeCode).Append("\n");
            sb.Append("  CargogoodsDescription: ").Append(HttpsCargogoodsDescription).Append("\n");
            sb.Append("  CargoloadType: ").Append(HttpsCargoloadType).Append("\n");
            sb.Append("  CargonvdForCarriage: ").Append(HttpsCargonvdForCarriage).Append("\n");
            sb.Append("  CargonvdForCustoms: ").Append(HttpsCargonvdForCustoms).Append("\n");
            sb.Append("  CargopackageMarkCoded: ").Append(HttpsCargopackageMarkCoded).Append("\n");
            sb.Append("  CargopackagedeIdentifier: ").Append(HttpsCargopackagedeIdentifier).Append("\n");
            sb.Append("  CargoshippingMarks: ").Append(HttpsCargoshippingMarks).Append("\n");
            sb.Append("  Cargoslac: ").Append(HttpsCargoslac).Append("\n");
            sb.Append("  Cargostackable: ").Append(HttpsCargostackable).Append("\n");
            sb.Append("  Cargoturnable: ").Append(HttpsCargoturnable).Append("\n");
            sb.Append("  Cargoupid: ").Append(HttpsCargoupid).Append("\n");
            sb.Append("  CargoassociatedEpermit: ").Append(HttpsCargoassociatedEpermit).Append("\n");
            sb.Append("  CargoexportTradeCountry: ").Append(HttpsCargoexportTradeCountry).Append("\n");
            sb.Append("  CargooriginTradeCountry: ").Append(HttpsCargooriginTradeCountry).Append("\n");
            sb.Append("  CargoacquisitionDateTime: ").Append(HttpsCargoacquisitionDateTime).Append("\n");
            sb.Append("  CargoannualQuotaQuantity: ").Append(HttpsCargoannualQuotaQuantity).Append("\n");
            sb.Append("  CargocategoryCode: ").Append(HttpsCargocategoryCode).Append("\n");
            sb.Append("  CargogoodsTypeCode: ").Append(HttpsCargogoodsTypeCode).Append("\n");
            sb.Append("  CargogoodsTypeExtensionCode: ").Append(HttpsCargogoodsTypeExtensionCode).Append("\n");
            sb.Append("  CargooriginReferencePermitDateTime: ").Append(HttpsCargooriginReferencePermitDateTime).Append("\n");
            sb.Append("  CargooriginReferencePermitId: ").Append(HttpsCargooriginReferencePermitId).Append("\n");
            sb.Append("  CargooriginReferencePermitTypeCode: ").Append(HttpsCargooriginReferencePermitTypeCode).Append("\n");
            sb.Append("  CargoquantityAnimals: ").Append(HttpsCargoquantityAnimals).Append("\n");
            sb.Append("  CargospeciesCommonName: ").Append(HttpsCargospeciesCommonName).Append("\n");
            sb.Append("  CargospeciesScientificName: ").Append(HttpsCargospeciesScientificName).Append("\n");
            sb.Append("  CargospecimenDescription: ").Append(HttpsCargospecimenDescription).Append("\n");
            sb.Append("  CargospecimenTypeCode: ").Append(HttpsCargospecimenTypeCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as PieceLiveAnimals);
        }

        /// <summary>
        /// Returns true if PieceLiveAnimals instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of PieceLiveAnimals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PieceLiveAnimals httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargoattachedIotDevices == httpsInput.HttpsCargoattachedIotDevices ||
                    this.HttpsCargoattachedIotDevices != null &&
                    httpsInput.HttpsCargoattachedIotDevices != null &&
                    this.HttpsCargoattachedIotDevices.SequenceEqual(httpsInput.HttpsCargoattachedIotDevices)
                ) && 
                (
                    this.HttpsCargoinvolvedInActions == httpsInput.HttpsCargoinvolvedInActions ||
                    this.HttpsCargoinvolvedInActions != null &&
                    httpsInput.HttpsCargoinvolvedInActions != null &&
                    this.HttpsCargoinvolvedInActions.SequenceEqual(httpsInput.HttpsCargoinvolvedInActions)
                ) && 
                (
                    this.HttpsCargocontainedItems == httpsInput.HttpsCargocontainedItems ||
                    this.HttpsCargocontainedItems != null &&
                    httpsInput.HttpsCargocontainedItems != null &&
                    this.HttpsCargocontainedItems.SequenceEqual(httpsInput.HttpsCargocontainedItems)
                ) && 
                (
                    this.HttpsCargocontainedPieceInPiece == httpsInput.HttpsCargocontainedPieceInPiece ||
                    (this.HttpsCargocontainedPieceInPiece != null &&
                    this.HttpsCargocontainedPieceInPiece.Equals(httpsInput.HttpsCargocontainedPieceInPiece))
                ) && 
                (
                    this.HttpsCargocontainedPieces == httpsInput.HttpsCargocontainedPieces ||
                    this.HttpsCargocontainedPieces != null &&
                    httpsInput.HttpsCargocontainedPieces != null &&
                    this.HttpsCargocontainedPieces.SequenceEqual(httpsInput.HttpsCargocontainedPieces)
                ) && 
                (
                    this.HttpsCargocontentDescribedByProducts == httpsInput.HttpsCargocontentDescribedByProducts ||
                    this.HttpsCargocontentDescribedByProducts != null &&
                    httpsInput.HttpsCargocontentDescribedByProducts != null &&
                    this.HttpsCargocontentDescribedByProducts.SequenceEqual(httpsInput.HttpsCargocontentDescribedByProducts)
                ) && 
                (
                    this.HttpsCargocontentProductionCountry == httpsInput.HttpsCargocontentProductionCountry ||
                    (this.HttpsCargocontentProductionCountry != null &&
                    this.HttpsCargocontentProductionCountry.Equals(httpsInput.HttpsCargocontentProductionCountry))
                ) && 
                (
                    this.HttpsCargocustomsInformation == httpsInput.HttpsCargocustomsInformation ||
                    this.HttpsCargocustomsInformation != null &&
                    httpsInput.HttpsCargocustomsInformation != null &&
                    this.HttpsCargocustomsInformation.SequenceEqual(httpsInput.HttpsCargocustomsInformation)
                ) && 
                (
                    this.HttpsCargodimensions == httpsInput.HttpsCargodimensions ||
                    (this.HttpsCargodimensions != null &&
                    this.HttpsCargodimensions.Equals(httpsInput.HttpsCargodimensions))
                ) && 
                (
                    this.HttpsCargogrossWeight == httpsInput.HttpsCargogrossWeight ||
                    (this.HttpsCargogrossWeight != null &&
                    this.HttpsCargogrossWeight.Equals(httpsInput.HttpsCargogrossWeight))
                ) && 
                (
                    this.HttpsCargohandlingInstructions == httpsInput.HttpsCargohandlingInstructions ||
                    this.HttpsCargohandlingInstructions != null &&
                    httpsInput.HttpsCargohandlingInstructions != null &&
                    this.HttpsCargohandlingInstructions.SequenceEqual(httpsInput.HttpsCargohandlingInstructions)
                ) && 
                (
                    this.HttpsCargoinvolvedParties == httpsInput.HttpsCargoinvolvedParties ||
                    this.HttpsCargoinvolvedParties != null &&
                    httpsInput.HttpsCargoinvolvedParties != null &&
                    this.HttpsCargoinvolvedParties.SequenceEqual(httpsInput.HttpsCargoinvolvedParties)
                ) && 
                (
                    this.HttpsCargootherIdentifiers == httpsInput.HttpsCargootherIdentifiers ||
                    this.HttpsCargootherIdentifiers != null &&
                    httpsInput.HttpsCargootherIdentifiers != null &&
                    this.HttpsCargootherIdentifiers.SequenceEqual(httpsInput.HttpsCargootherIdentifiers)
                ) && 
                (
                    this.HttpsCargopackagingType == httpsInput.HttpsCargopackagingType ||
                    (this.HttpsCargopackagingType != null &&
                    this.HttpsCargopackagingType.Equals(httpsInput.HttpsCargopackagingType))
                ) && 
                (
                    this.HttpsCargopartOfShipment == httpsInput.HttpsCargopartOfShipment ||
                    (this.HttpsCargopartOfShipment != null &&
                    this.HttpsCargopartOfShipment.Equals(httpsInput.HttpsCargopartOfShipment))
                ) && 
                (
                    this.HttpsCargosecurityDeclaration == httpsInput.HttpsCargosecurityDeclaration ||
                    (this.HttpsCargosecurityDeclaration != null &&
                    this.HttpsCargosecurityDeclaration.Equals(httpsInput.HttpsCargosecurityDeclaration))
                ) && 
                (
                    this.HttpsCargouldReference == httpsInput.HttpsCargouldReference ||
                    (this.HttpsCargouldReference != null &&
                    this.HttpsCargouldReference.Equals(httpsInput.HttpsCargouldReference))
                ) && 
                (
                    this.HttpsCargovolumetricWeight == httpsInput.HttpsCargovolumetricWeight ||
                    (this.HttpsCargovolumetricWeight != null &&
                    this.HttpsCargovolumetricWeight.Equals(httpsInput.HttpsCargovolumetricWeight))
                ) && 
                (
                    this.HttpsCargocoload == httpsInput.HttpsCargocoload ||
                    this.HttpsCargocoload.Equals(httpsInput.HttpsCargocoload)
                ) && 
                (
                    this.HttpsCargodeclaredValueForCarriage == httpsInput.HttpsCargodeclaredValueForCarriage ||
                    (this.HttpsCargodeclaredValueForCarriage != null &&
                    this.HttpsCargodeclaredValueForCarriage.Equals(httpsInput.HttpsCargodeclaredValueForCarriage))
                ) && 
                (
                    this.HttpsCargodeclaredValueForCustoms == httpsInput.HttpsCargodeclaredValueForCustoms ||
                    (this.HttpsCargodeclaredValueForCustoms != null &&
                    this.HttpsCargodeclaredValueForCustoms.Equals(httpsInput.HttpsCargodeclaredValueForCustoms))
                ) && 
                (
                    this.HttpsCargofulfillsUldTypeCode == httpsInput.HttpsCargofulfillsUldTypeCode ||
                    (this.HttpsCargofulfillsUldTypeCode != null &&
                    this.HttpsCargofulfillsUldTypeCode.Equals(httpsInput.HttpsCargofulfillsUldTypeCode))
                ) && 
                (
                    this.HttpsCargogoodsDescription == httpsInput.HttpsCargogoodsDescription ||
                    (this.HttpsCargogoodsDescription != null &&
                    this.HttpsCargogoodsDescription.Equals(httpsInput.HttpsCargogoodsDescription))
                ) && 
                (
                    this.HttpsCargoloadType == httpsInput.HttpsCargoloadType ||
                    (this.HttpsCargoloadType != null &&
                    this.HttpsCargoloadType.Equals(httpsInput.HttpsCargoloadType))
                ) && 
                (
                    this.HttpsCargonvdForCarriage == httpsInput.HttpsCargonvdForCarriage ||
                    this.HttpsCargonvdForCarriage.Equals(httpsInput.HttpsCargonvdForCarriage)
                ) && 
                (
                    this.HttpsCargonvdForCustoms == httpsInput.HttpsCargonvdForCustoms ||
                    this.HttpsCargonvdForCustoms.Equals(httpsInput.HttpsCargonvdForCustoms)
                ) && 
                (
                    this.HttpsCargopackageMarkCoded == httpsInput.HttpsCargopackageMarkCoded ||
                    (this.HttpsCargopackageMarkCoded != null &&
                    this.HttpsCargopackageMarkCoded.Equals(httpsInput.HttpsCargopackageMarkCoded))
                ) && 
                (
                    this.HttpsCargopackagedeIdentifier == httpsInput.HttpsCargopackagedeIdentifier ||
                    (this.HttpsCargopackagedeIdentifier != null &&
                    this.HttpsCargopackagedeIdentifier.Equals(httpsInput.HttpsCargopackagedeIdentifier))
                ) && 
                (
                    this.HttpsCargoshippingMarks == httpsInput.HttpsCargoshippingMarks ||
                    this.HttpsCargoshippingMarks != null &&
                    httpsInput.HttpsCargoshippingMarks != null &&
                    this.HttpsCargoshippingMarks.SequenceEqual(httpsInput.HttpsCargoshippingMarks)
                ) && 
                (
                    this.HttpsCargoslac == httpsInput.HttpsCargoslac ||
                    this.HttpsCargoslac.Equals(httpsInput.HttpsCargoslac)
                ) && 
                (
                    this.HttpsCargostackable == httpsInput.HttpsCargostackable ||
                    this.HttpsCargostackable.Equals(httpsInput.HttpsCargostackable)
                ) && 
                (
                    this.HttpsCargoturnable == httpsInput.HttpsCargoturnable ||
                    this.HttpsCargoturnable.Equals(httpsInput.HttpsCargoturnable)
                ) && 
                (
                    this.HttpsCargoupid == httpsInput.HttpsCargoupid ||
                    (this.HttpsCargoupid != null &&
                    this.HttpsCargoupid.Equals(httpsInput.HttpsCargoupid))
                ) && 
                (
                    this.HttpsCargoassociatedEpermit == httpsInput.HttpsCargoassociatedEpermit ||
                    (this.HttpsCargoassociatedEpermit != null &&
                    this.HttpsCargoassociatedEpermit.Equals(httpsInput.HttpsCargoassociatedEpermit))
                ) && 
                (
                    this.HttpsCargoexportTradeCountry == httpsInput.HttpsCargoexportTradeCountry ||
                    (this.HttpsCargoexportTradeCountry != null &&
                    this.HttpsCargoexportTradeCountry.Equals(httpsInput.HttpsCargoexportTradeCountry))
                ) && 
                (
                    this.HttpsCargooriginTradeCountry == httpsInput.HttpsCargooriginTradeCountry ||
                    (this.HttpsCargooriginTradeCountry != null &&
                    this.HttpsCargooriginTradeCountry.Equals(httpsInput.HttpsCargooriginTradeCountry))
                ) && 
                (
                    this.HttpsCargoacquisitionDateTime == httpsInput.HttpsCargoacquisitionDateTime ||
                    (this.HttpsCargoacquisitionDateTime != null &&
                    this.HttpsCargoacquisitionDateTime.Equals(httpsInput.HttpsCargoacquisitionDateTime))
                ) && 
                (
                    this.HttpsCargoannualQuotaQuantity == httpsInput.HttpsCargoannualQuotaQuantity ||
                    this.HttpsCargoannualQuotaQuantity.Equals(httpsInput.HttpsCargoannualQuotaQuantity)
                ) && 
                (
                    this.HttpsCargocategoryCode == httpsInput.HttpsCargocategoryCode ||
                    this.HttpsCargocategoryCode != null &&
                    httpsInput.HttpsCargocategoryCode != null &&
                    this.HttpsCargocategoryCode.SequenceEqual(httpsInput.HttpsCargocategoryCode)
                ) && 
                (
                    this.HttpsCargogoodsTypeCode == httpsInput.HttpsCargogoodsTypeCode ||
                    (this.HttpsCargogoodsTypeCode != null &&
                    this.HttpsCargogoodsTypeCode.Equals(httpsInput.HttpsCargogoodsTypeCode))
                ) && 
                (
                    this.HttpsCargogoodsTypeExtensionCode == httpsInput.HttpsCargogoodsTypeExtensionCode ||
                    (this.HttpsCargogoodsTypeExtensionCode != null &&
                    this.HttpsCargogoodsTypeExtensionCode.Equals(httpsInput.HttpsCargogoodsTypeExtensionCode))
                ) && 
                (
                    this.HttpsCargooriginReferencePermitDateTime == httpsInput.HttpsCargooriginReferencePermitDateTime ||
                    (this.HttpsCargooriginReferencePermitDateTime != null &&
                    this.HttpsCargooriginReferencePermitDateTime.Equals(httpsInput.HttpsCargooriginReferencePermitDateTime))
                ) && 
                (
                    this.HttpsCargooriginReferencePermitId == httpsInput.HttpsCargooriginReferencePermitId ||
                    (this.HttpsCargooriginReferencePermitId != null &&
                    this.HttpsCargooriginReferencePermitId.Equals(httpsInput.HttpsCargooriginReferencePermitId))
                ) && 
                (
                    this.HttpsCargooriginReferencePermitTypeCode == httpsInput.HttpsCargooriginReferencePermitTypeCode ||
                    (this.HttpsCargooriginReferencePermitTypeCode != null &&
                    this.HttpsCargooriginReferencePermitTypeCode.Equals(httpsInput.HttpsCargooriginReferencePermitTypeCode))
                ) && 
                (
                    this.HttpsCargoquantityAnimals == httpsInput.HttpsCargoquantityAnimals ||
                    this.HttpsCargoquantityAnimals.Equals(httpsInput.HttpsCargoquantityAnimals)
                ) && 
                (
                    this.HttpsCargospeciesCommonName == httpsInput.HttpsCargospeciesCommonName ||
                    this.HttpsCargospeciesCommonName != null &&
                    httpsInput.HttpsCargospeciesCommonName != null &&
                    this.HttpsCargospeciesCommonName.SequenceEqual(httpsInput.HttpsCargospeciesCommonName)
                ) && 
                (
                    this.HttpsCargospeciesScientificName == httpsInput.HttpsCargospeciesScientificName ||
                    this.HttpsCargospeciesScientificName != null &&
                    httpsInput.HttpsCargospeciesScientificName != null &&
                    this.HttpsCargospeciesScientificName.SequenceEqual(httpsInput.HttpsCargospeciesScientificName)
                ) && 
                (
                    this.HttpsCargospecimenDescription == httpsInput.HttpsCargospecimenDescription ||
                    (this.HttpsCargospecimenDescription != null &&
                    this.HttpsCargospecimenDescription.Equals(httpsInput.HttpsCargospecimenDescription))
                ) && 
                (
                    this.HttpsCargospecimenTypeCode == httpsInput.HttpsCargospecimenTypeCode ||
                    (this.HttpsCargospecimenTypeCode != null &&
                    this.HttpsCargospecimenTypeCode.Equals(httpsInput.HttpsCargospecimenTypeCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargoattachedIotDevices != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoattachedIotDevices.GetHashCode();
                }
                if (this.HttpsCargoinvolvedInActions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoinvolvedInActions.GetHashCode();
                }
                if (this.HttpsCargocontainedItems != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontainedItems.GetHashCode();
                }
                if (this.HttpsCargocontainedPieceInPiece != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontainedPieceInPiece.GetHashCode();
                }
                if (this.HttpsCargocontainedPieces != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontainedPieces.GetHashCode();
                }
                if (this.HttpsCargocontentDescribedByProducts != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontentDescribedByProducts.GetHashCode();
                }
                if (this.HttpsCargocontentProductionCountry != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocontentProductionCountry.GetHashCode();
                }
                if (this.HttpsCargocustomsInformation != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocustomsInformation.GetHashCode();
                }
                if (this.HttpsCargodimensions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodimensions.GetHashCode();
                }
                if (this.HttpsCargogrossWeight != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargogrossWeight.GetHashCode();
                }
                if (this.HttpsCargohandlingInstructions != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargohandlingInstructions.GetHashCode();
                }
                if (this.HttpsCargoinvolvedParties != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoinvolvedParties.GetHashCode();
                }
                if (this.HttpsCargootherIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargootherIdentifiers.GetHashCode();
                }
                if (this.HttpsCargopackagingType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopackagingType.GetHashCode();
                }
                if (this.HttpsCargopartOfShipment != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopartOfShipment.GetHashCode();
                }
                if (this.HttpsCargosecurityDeclaration != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargosecurityDeclaration.GetHashCode();
                }
                if (this.HttpsCargouldReference != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargouldReference.GetHashCode();
                }
                if (this.HttpsCargovolumetricWeight != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovolumetricWeight.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargocoload.GetHashCode();
                if (this.HttpsCargodeclaredValueForCarriage != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodeclaredValueForCarriage.GetHashCode();
                }
                if (this.HttpsCargodeclaredValueForCustoms != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodeclaredValueForCustoms.GetHashCode();
                }
                if (this.HttpsCargofulfillsUldTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargofulfillsUldTypeCode.GetHashCode();
                }
                if (this.HttpsCargogoodsDescription != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargogoodsDescription.GetHashCode();
                }
                if (this.HttpsCargoloadType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoloadType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargonvdForCarriage.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpsCargonvdForCustoms.GetHashCode();
                if (this.HttpsCargopackageMarkCoded != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopackageMarkCoded.GetHashCode();
                }
                if (this.HttpsCargopackagedeIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargopackagedeIdentifier.GetHashCode();
                }
                if (this.HttpsCargoshippingMarks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoshippingMarks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoslac.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpsCargostackable.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpsCargoturnable.GetHashCode();
                if (this.HttpsCargoupid != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoupid.GetHashCode();
                }
                if (this.HttpsCargoassociatedEpermit != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoassociatedEpermit.GetHashCode();
                }
                if (this.HttpsCargoexportTradeCountry != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexportTradeCountry.GetHashCode();
                }
                if (this.HttpsCargooriginTradeCountry != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargooriginTradeCountry.GetHashCode();
                }
                if (this.HttpsCargoacquisitionDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoacquisitionDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoannualQuotaQuantity.GetHashCode();
                if (this.HttpsCargocategoryCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocategoryCode.GetHashCode();
                }
                if (this.HttpsCargogoodsTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargogoodsTypeCode.GetHashCode();
                }
                if (this.HttpsCargogoodsTypeExtensionCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargogoodsTypeExtensionCode.GetHashCode();
                }
                if (this.HttpsCargooriginReferencePermitDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargooriginReferencePermitDateTime.GetHashCode();
                }
                if (this.HttpsCargooriginReferencePermitId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargooriginReferencePermitId.GetHashCode();
                }
                if (this.HttpsCargooriginReferencePermitTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargooriginReferencePermitTypeCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoquantityAnimals.GetHashCode();
                if (this.HttpsCargospeciesCommonName != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargospeciesCommonName.GetHashCode();
                }
                if (this.HttpsCargospeciesScientificName != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargospeciesScientificName.GetHashCode();
                }
                if (this.HttpsCargospecimenDescription != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargospecimenDescription.GetHashCode();
                }
                if (this.HttpsCargospecimenTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargospecimenTypeCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
