/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// ExternalReference
    /// </summary>
    [DataContract(Name = "ExternalReference")]
    public partial class ExternalReference : IEquatable<ExternalReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalReference" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargolinkedLogisticObjects">CargolinkedLogisticObjects.</param>
        /// <param name="httpsCargolocationOfCreation">CargolocationOfCreation.</param>
        /// <param name="httpsCargooriginator">Cargooriginator.</param>
        /// <param name="httpsCargochecksum">Cargochecksum.</param>
        /// <param name="httpsCargodocumentIdentifier">CargodocumentIdentifier.</param>
        /// <param name="httpsCargodocumentLink">CargodocumentLink.</param>
        /// <param name="httpsCargodocumentName">CargodocumentName.</param>
        /// <param name="httpsCargodocumentType">CargodocumentType.</param>
        /// <param name="httpsCargodocumentVersion">CargodocumentVersion.</param>
        /// <param name="httpsCargovalidFrom">CargovalidFrom.</param>
        /// <param name="httpsCargovalidUntil">CargovalidUntil.</param>
        public ExternalReference(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), List<LogisticsObject> httpsCargolinkedLogisticObjects = default(List<LogisticsObject>), Location httpsCargolocationOfCreation = default(Location), Company httpsCargooriginator = default(Company), string httpsCargochecksum = default(string), string httpsCargodocumentIdentifier = default(string), string httpsCargodocumentLink = default(string), string httpsCargodocumentName = default(string), string httpsCargodocumentType = default(string), string httpsCargodocumentVersion = default(string), DateTime httpsCargovalidFrom = default(DateTime), DateTime httpsCargovalidUntil = default(DateTime))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargolinkedLogisticObjects = httpsCargolinkedLogisticObjects;
            this.HttpsCargolocationOfCreation = httpsCargolocationOfCreation;
            this.HttpsCargooriginator = httpsCargooriginator;
            this.HttpsCargochecksum = httpsCargochecksum;
            this.HttpsCargodocumentIdentifier = httpsCargodocumentIdentifier;
            this.HttpsCargodocumentLink = httpsCargodocumentLink;
            this.HttpsCargodocumentName = httpsCargodocumentName;
            this.HttpsCargodocumentType = httpsCargodocumentType;
            this.HttpsCargodocumentVersion = httpsCargodocumentVersion;
            this.HttpsCargovalidFrom = httpsCargovalidFrom;
            this.HttpsCargovalidUntil = httpsCargovalidUntil;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargolinkedLogisticObjects
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#linkedLogisticObjects", EmitDefaultValue = false)]
        public List<LogisticsObject> HttpsCargolinkedLogisticObjects { get; set; }

        /// <summary>
        /// Gets or Sets CargolocationOfCreation
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#locationOfCreation", EmitDefaultValue = false)]
        public Location HttpsCargolocationOfCreation { get; set; }

        /// <summary>
        /// Gets or Sets Cargooriginator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#originator", EmitDefaultValue = false)]
        public Company HttpsCargooriginator { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecksum
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checksum", EmitDefaultValue = false)]
        public string HttpsCargochecksum { get; set; }

        /// <summary>
        /// Gets or Sets CargodocumentIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#documentIdentifier", EmitDefaultValue = false)]
        public string HttpsCargodocumentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargodocumentLink
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#documentLink", EmitDefaultValue = false)]
        public string HttpsCargodocumentLink { get; set; }

        /// <summary>
        /// Gets or Sets CargodocumentName
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#documentName", EmitDefaultValue = false)]
        public string HttpsCargodocumentName { get; set; }

        /// <summary>
        /// Gets or Sets CargodocumentType
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#documentType", EmitDefaultValue = false)]
        public string HttpsCargodocumentType { get; set; }

        /// <summary>
        /// Gets or Sets CargodocumentVersion
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#documentVersion", EmitDefaultValue = false)]
        public string HttpsCargodocumentVersion { get; set; }

        /// <summary>
        /// Gets or Sets CargovalidFrom
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#validFrom", EmitDefaultValue = false)]
        public DateTime HttpsCargovalidFrom { get; set; }

        /// <summary>
        /// Gets or Sets CargovalidUntil
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#validUntil", EmitDefaultValue = false)]
        public DateTime HttpsCargovalidUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalReference {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargolinkedLogisticObjects: ").Append(HttpsCargolinkedLogisticObjects).Append("\n");
            sb.Append("  CargolocationOfCreation: ").Append(HttpsCargolocationOfCreation).Append("\n");
            sb.Append("  Cargooriginator: ").Append(HttpsCargooriginator).Append("\n");
            sb.Append("  Cargochecksum: ").Append(HttpsCargochecksum).Append("\n");
            sb.Append("  CargodocumentIdentifier: ").Append(HttpsCargodocumentIdentifier).Append("\n");
            sb.Append("  CargodocumentLink: ").Append(HttpsCargodocumentLink).Append("\n");
            sb.Append("  CargodocumentName: ").Append(HttpsCargodocumentName).Append("\n");
            sb.Append("  CargodocumentType: ").Append(HttpsCargodocumentType).Append("\n");
            sb.Append("  CargodocumentVersion: ").Append(HttpsCargodocumentVersion).Append("\n");
            sb.Append("  CargovalidFrom: ").Append(HttpsCargovalidFrom).Append("\n");
            sb.Append("  CargovalidUntil: ").Append(HttpsCargovalidUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as ExternalReference);
        }

        /// <summary>
        /// Returns true if ExternalReference instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of ExternalReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalReference httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargolinkedLogisticObjects == httpsInput.HttpsCargolinkedLogisticObjects ||
                    this.HttpsCargolinkedLogisticObjects != null &&
                    httpsInput.HttpsCargolinkedLogisticObjects != null &&
                    this.HttpsCargolinkedLogisticObjects.SequenceEqual(httpsInput.HttpsCargolinkedLogisticObjects)
                ) && 
                (
                    this.HttpsCargolocationOfCreation == httpsInput.HttpsCargolocationOfCreation ||
                    (this.HttpsCargolocationOfCreation != null &&
                    this.HttpsCargolocationOfCreation.Equals(httpsInput.HttpsCargolocationOfCreation))
                ) && 
                (
                    this.HttpsCargooriginator == httpsInput.HttpsCargooriginator ||
                    (this.HttpsCargooriginator != null &&
                    this.HttpsCargooriginator.Equals(httpsInput.HttpsCargooriginator))
                ) && 
                (
                    this.HttpsCargochecksum == httpsInput.HttpsCargochecksum ||
                    (this.HttpsCargochecksum != null &&
                    this.HttpsCargochecksum.Equals(httpsInput.HttpsCargochecksum))
                ) && 
                (
                    this.HttpsCargodocumentIdentifier == httpsInput.HttpsCargodocumentIdentifier ||
                    (this.HttpsCargodocumentIdentifier != null &&
                    this.HttpsCargodocumentIdentifier.Equals(httpsInput.HttpsCargodocumentIdentifier))
                ) && 
                (
                    this.HttpsCargodocumentLink == httpsInput.HttpsCargodocumentLink ||
                    (this.HttpsCargodocumentLink != null &&
                    this.HttpsCargodocumentLink.Equals(httpsInput.HttpsCargodocumentLink))
                ) && 
                (
                    this.HttpsCargodocumentName == httpsInput.HttpsCargodocumentName ||
                    (this.HttpsCargodocumentName != null &&
                    this.HttpsCargodocumentName.Equals(httpsInput.HttpsCargodocumentName))
                ) && 
                (
                    this.HttpsCargodocumentType == httpsInput.HttpsCargodocumentType ||
                    (this.HttpsCargodocumentType != null &&
                    this.HttpsCargodocumentType.Equals(httpsInput.HttpsCargodocumentType))
                ) && 
                (
                    this.HttpsCargodocumentVersion == httpsInput.HttpsCargodocumentVersion ||
                    (this.HttpsCargodocumentVersion != null &&
                    this.HttpsCargodocumentVersion.Equals(httpsInput.HttpsCargodocumentVersion))
                ) && 
                (
                    this.HttpsCargovalidFrom == httpsInput.HttpsCargovalidFrom ||
                    (this.HttpsCargovalidFrom != null &&
                    this.HttpsCargovalidFrom.Equals(httpsInput.HttpsCargovalidFrom))
                ) && 
                (
                    this.HttpsCargovalidUntil == httpsInput.HttpsCargovalidUntil ||
                    (this.HttpsCargovalidUntil != null &&
                    this.HttpsCargovalidUntil.Equals(httpsInput.HttpsCargovalidUntil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargolinkedLogisticObjects != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargolinkedLogisticObjects.GetHashCode();
                }
                if (this.HttpsCargolocationOfCreation != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargolocationOfCreation.GetHashCode();
                }
                if (this.HttpsCargooriginator != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargooriginator.GetHashCode();
                }
                if (this.HttpsCargochecksum != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecksum.GetHashCode();
                }
                if (this.HttpsCargodocumentIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodocumentIdentifier.GetHashCode();
                }
                if (this.HttpsCargodocumentLink != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodocumentLink.GetHashCode();
                }
                if (this.HttpsCargodocumentName != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodocumentName.GetHashCode();
                }
                if (this.HttpsCargodocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodocumentType.GetHashCode();
                }
                if (this.HttpsCargodocumentVersion != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargodocumentVersion.GetHashCode();
                }
                if (this.HttpsCargovalidFrom != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovalidFrom.GetHashCode();
                }
                if (this.HttpsCargovalidUntil != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovalidUntil.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
