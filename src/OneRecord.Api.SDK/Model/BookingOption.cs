/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// BookingOption
    /// </summary>
    [DataContract(Name = "BookingOption")]
    public partial class BookingOption : LogisticsObject, IEquatable<BookingOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingOption" /> class.
        /// </summary>
        /// <param name="Id">id.</param>
        /// <param name="Type">type.</param>
        /// <param name="Checks">Cargochecks.</param>
        /// <param name="Events">Cargoevents.</param>
        /// <param name="ExternalReferences">CargoexternalReferences.</param>
        /// <param name="CompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="SkeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="BookingSegment">CargobookingSegment.</param>
        /// <param name="BookingTimes">CargobookingTimes.</param>
        /// <param name="httpsCargocarrierProductInfo">CargocarrierProductInfo.</param>
        /// <param name="httpsCargoforBookingRequest">CargoforBookingRequest.</param>
        /// <param name="httpsCargofromCarrier">CargofromCarrier.</param>
        /// <param name="httpsCargoinvolvedParties">CargoinvolvedParties.</param>
        /// <param name="httpsCargoprice">Cargoprice.</param>
        /// <param name="httpsCargorequestRef">CargorequestRef.</param>
        /// <param name="httpsCargorouting">Cargorouting.</param>
        /// <param name="httpsCargotransportMovement">CargotransportMovement.</param>
        /// <param name="httpsCargobookingOptionStatus">CargobookingOptionStatus.</param>
        /// <param name="httpsCargoproposedWaybillNumber">CargoproposedWaybillNumber.</param>
        /// <param name="httpsCargorequestMatchInd">CargorequestMatchInd.</param>
        /// <param name="httpsCargoshipmentSecurityStatus">CargoshipmentSecurityStatus.</param>
        /// <param name="httpsCargovalidFrom">CargovalidFrom.</param>
        /// <param name="httpsCargovalidUntil">CargovalidUntil.</param>
        public BookingOption(string Id = default(string), List<string> Type = default(List<string>), List<Check> Checks = default(List<Check>), List<LogisticsEvent> Events = default(List<LogisticsEvent>), List<ExternalReference> ExternalReferences = default(List<ExternalReference>), string CompanyIdentifier = default(string), bool SkeletonIndicator = default(bool), BookingSegment BookingSegment = default(BookingSegment), BookingTimes BookingTimes = default(BookingTimes), CarrierProduct httpsCargocarrierProductInfo = default(CarrierProduct), BookingRequest httpsCargoforBookingRequest = default(BookingRequest), Carrier httpsCargofromCarrier = default(Carrier), List<Party> httpsCargoinvolvedParties = default(List<Party>), Price httpsCargoprice = default(Price), BookingOptionRequest httpsCargorequestRef = default(BookingOptionRequest), Routing httpsCargorouting = default(Routing), TransportMovement httpsCargotransportMovement = default(TransportMovement), string httpsCargobookingOptionStatus = default(string), string httpsCargoproposedWaybillNumber = default(string), bool httpsCargorequestMatchInd = default(bool), string httpsCargoshipmentSecurityStatus = default(string), DateTime httpsCargovalidFrom = default(DateTime), DateTime httpsCargovalidUntil = default(DateTime))
        {
            this.Id = Id;
            this.Type = Type;
            this.Checks = Checks;
            this.Events = Events;
            this.ExternalReferences = ExternalReferences;
            this.CompanyIdentifier = CompanyIdentifier;
            this.SkeletonIndicator = SkeletonIndicator;
            this.BookingSegment = BookingSegment;
            this.BookingTimes = BookingTimes;
            this.HttpsCargocarrierProductInfo = httpsCargocarrierProductInfo;
            this.HttpsCargoforBookingRequest = httpsCargoforBookingRequest;
            this.HttpsCargofromCarrier = httpsCargofromCarrier;
            this.HttpsCargoinvolvedParties = httpsCargoinvolvedParties;
            this.HttpsCargoprice = httpsCargoprice;
            this.HttpsCargorequestRef = httpsCargorequestRef;
            this.HttpsCargorouting = httpsCargorouting;
            this.HttpsCargotransportMovement = httpsCargotransportMovement;
            this.HttpsCargobookingOptionStatus = httpsCargobookingOptionStatus;
            this.HttpsCargoproposedWaybillNumber = httpsCargoproposedWaybillNumber;
            this.HttpsCargorequestMatchInd = httpsCargorequestMatchInd;
            this.HttpsCargoshipmentSecurityStatus = httpsCargoshipmentSecurityStatus;
            this.HttpsCargovalidFrom = httpsCargovalidFrom;
            this.HttpsCargovalidUntil = httpsCargovalidUntil;
        }


        /// <summary>
        /// Gets or Sets CargobookingSegment
        /// </summary>
        [DataMember(Name = "cargo:bookingSegment", EmitDefaultValue = false)]
        public BookingSegment BookingSegment { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingTimes
        /// </summary>
        [DataMember(Name = "cargo:bookingTimes", EmitDefaultValue = false)]
        public BookingTimes BookingTimes { get; set; }

        /// <summary>
        /// Gets or Sets CargocarrierProductInfo
        /// </summary>
        [DataMember(Name = "cargo:carrierProductInfo", EmitDefaultValue = false)]
        public CarrierProduct HttpsCargocarrierProductInfo { get; set; }

        /// <summary>
        /// Gets or Sets CargoforBookingRequest
        /// </summary>
        [DataMember(Name = "cargo:forBookingRequest", EmitDefaultValue = false)]
        public BookingRequest HttpsCargoforBookingRequest { get; set; }

        /// <summary>
        /// Gets or Sets CargofromCarrier
        /// </summary>
        [DataMember(Name = "cargo:fromCarrier", EmitDefaultValue = false)]
        public Carrier HttpsCargofromCarrier { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedParties
        /// </summary>
        [DataMember(Name = "cargo:involvedParties", EmitDefaultValue = false)]
        public List<Party> HttpsCargoinvolvedParties { get; set; }

        /// <summary>
        /// Gets or Sets Cargoprice
        /// </summary>
        [DataMember(Name = "cargo:price", EmitDefaultValue = false)]
        public Price HttpsCargoprice { get; set; }

        /// <summary>
        /// Gets or Sets CargorequestRef
        /// </summary>
        [DataMember(Name = "cargo:requestRef", EmitDefaultValue = false)]
        public BookingOptionRequest HttpsCargorequestRef { get; set; }

        /// <summary>
        /// Gets or Sets Cargorouting
        /// </summary>
        [DataMember(Name = "cargo:routing", EmitDefaultValue = false)]
        public Routing HttpsCargorouting { get; set; }

        /// <summary>
        /// Gets or Sets CargotransportMovement
        /// </summary>
        [DataMember(Name = "cargo:transportMovement", EmitDefaultValue = false)]
        public TransportMovement HttpsCargotransportMovement { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingOptionStatus
        /// </summary>
        [DataMember(Name = "cargo:bookingOptionStatus", EmitDefaultValue = false)]
        public string HttpsCargobookingOptionStatus { get; set; }

        /// <summary>
        /// Gets or Sets CargoproposedWaybillNumber
        /// </summary>
        [DataMember(Name = "cargo:proposedWaybillNumber", EmitDefaultValue = false)]
        public string HttpsCargoproposedWaybillNumber { get; set; }

        /// <summary>
        /// Gets or Sets CargorequestMatchInd
        /// </summary>
        [DataMember(Name = "cargo:requestMatchInd", EmitDefaultValue = true)]
        public bool HttpsCargorequestMatchInd { get; set; }

        /// <summary>
        /// Gets or Sets CargoshipmentSecurityStatus
        /// </summary>
        [DataMember(Name = "cargo:shipmentSecurityStatus", EmitDefaultValue = false)]
        public string HttpsCargoshipmentSecurityStatus { get; set; }

        /// <summary>
        /// Gets or Sets CargovalidFrom
        /// </summary>
        [DataMember(Name = "cargo:validFrom", EmitDefaultValue = false)]
        public DateTime HttpsCargovalidFrom { get; set; }

        /// <summary>
        /// Gets or Sets CargovalidUntil
        /// </summary>
        [DataMember(Name = "cargo:validUntil", EmitDefaultValue = false)]
        public DateTime HttpsCargovalidUntil { get; set; }

        [DataMember(Name = "cargo:transportLegs", EmitDefaultValue = false)]
        public List<TransportLegs> TransportLegs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookingOption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cargochecks: ").Append(Checks).Append("\n");
            sb.Append("  Cargoevents: ").Append(Events).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(ExternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(CompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(SkeletonIndicator).Append("\n");
            sb.Append("  CargobookingSegment: ").Append(BookingSegment).Append("\n");
            sb.Append("  CargobookingTimes: ").Append(BookingTimes).Append("\n");
            sb.Append("  CargocarrierProductInfo: ").Append(HttpsCargocarrierProductInfo).Append("\n");
            sb.Append("  CargoforBookingRequest: ").Append(HttpsCargoforBookingRequest).Append("\n");
            sb.Append("  CargofromCarrier: ").Append(HttpsCargofromCarrier).Append("\n");
            sb.Append("  CargoinvolvedParties: ").Append(HttpsCargoinvolvedParties).Append("\n");
            sb.Append("  Cargoprice: ").Append(HttpsCargoprice).Append("\n");
            sb.Append("  CargorequestRef: ").Append(HttpsCargorequestRef).Append("\n");
            sb.Append("  Cargorouting: ").Append(HttpsCargorouting).Append("\n");
            sb.Append("  CargotransportMovement: ").Append(HttpsCargotransportMovement).Append("\n");
            sb.Append("  CargobookingOptionStatus: ").Append(HttpsCargobookingOptionStatus).Append("\n");
            sb.Append("  CargoproposedWaybillNumber: ").Append(HttpsCargoproposedWaybillNumber).Append("\n");
            sb.Append("  CargorequestMatchInd: ").Append(HttpsCargorequestMatchInd).Append("\n");
            sb.Append("  CargoshipmentSecurityStatus: ").Append(HttpsCargoshipmentSecurityStatus).Append("\n");
            sb.Append("  CargovalidFrom: ").Append(HttpsCargovalidFrom).Append("\n");
            sb.Append("  CargovalidUntil: ").Append(HttpsCargovalidUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as BookingOption);
        }

        /// <summary>
        /// Returns true if BookingOption instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of BookingOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingOption httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.Id == httpsInput.Id ||
                    (this.Id != null &&
                    this.Id.Equals(httpsInput.Id))
                ) && 
                (
                    this.Type == httpsInput.Type ||
                    this.Type != null &&
                    httpsInput.Type != null &&
                    this.Type.SequenceEqual(httpsInput.Type)
                ) && 
                (
                    this.Checks == httpsInput.Checks ||
                    this.Checks != null &&
                    httpsInput.Checks != null &&
                    this.Checks.SequenceEqual(httpsInput.Checks)
                ) && 
                (
                    this.Events == httpsInput.Events ||
                    this.Events != null &&
                    httpsInput.Events != null &&
                    this.Events.SequenceEqual(httpsInput.Events)
                ) && 
                (
                    this.ExternalReferences == httpsInput.ExternalReferences ||
                    this.ExternalReferences != null &&
                    httpsInput.ExternalReferences != null &&
                    this.ExternalReferences.SequenceEqual(httpsInput.ExternalReferences)
                ) && 
                (
                    this.CompanyIdentifier == httpsInput.CompanyIdentifier ||
                    (this.CompanyIdentifier != null &&
                    this.CompanyIdentifier.Equals(httpsInput.CompanyIdentifier))
                ) && 
                (
                    this.SkeletonIndicator == httpsInput.SkeletonIndicator ||
                    this.SkeletonIndicator.Equals(httpsInput.SkeletonIndicator)
                ) && 
                (
                    this.BookingSegment == httpsInput.BookingSegment ||
                    (this.BookingSegment != null &&
                    this.BookingSegment.Equals(httpsInput.BookingSegment))
                ) && 
                (
                    this.BookingTimes == httpsInput.BookingTimes ||
                    (this.BookingTimes != null &&
                    this.BookingTimes.Equals(httpsInput.BookingTimes))
                ) && 
                (
                    this.HttpsCargocarrierProductInfo == httpsInput.HttpsCargocarrierProductInfo ||
                    (this.HttpsCargocarrierProductInfo != null &&
                    this.HttpsCargocarrierProductInfo.Equals(httpsInput.HttpsCargocarrierProductInfo))
                ) && 
                (
                    this.HttpsCargoforBookingRequest == httpsInput.HttpsCargoforBookingRequest ||
                    (this.HttpsCargoforBookingRequest != null &&
                    this.HttpsCargoforBookingRequest.Equals(httpsInput.HttpsCargoforBookingRequest))
                ) && 
                (
                    this.HttpsCargofromCarrier == httpsInput.HttpsCargofromCarrier ||
                    (this.HttpsCargofromCarrier != null &&
                    this.HttpsCargofromCarrier.Equals(httpsInput.HttpsCargofromCarrier))
                ) && 
                (
                    this.HttpsCargoinvolvedParties == httpsInput.HttpsCargoinvolvedParties ||
                    this.HttpsCargoinvolvedParties != null &&
                    httpsInput.HttpsCargoinvolvedParties != null &&
                    this.HttpsCargoinvolvedParties.SequenceEqual(httpsInput.HttpsCargoinvolvedParties)
                ) && 
                (
                    this.HttpsCargoprice == httpsInput.HttpsCargoprice ||
                    (this.HttpsCargoprice != null &&
                    this.HttpsCargoprice.Equals(httpsInput.HttpsCargoprice))
                ) && 
                (
                    this.HttpsCargorequestRef == httpsInput.HttpsCargorequestRef ||
                    (this.HttpsCargorequestRef != null &&
                    this.HttpsCargorequestRef.Equals(httpsInput.HttpsCargorequestRef))
                ) && 
                (
                    this.HttpsCargorouting == httpsInput.HttpsCargorouting ||
                    (this.HttpsCargorouting != null &&
                    this.HttpsCargorouting.Equals(httpsInput.HttpsCargorouting))
                ) && 
                (
                    this.HttpsCargotransportMovement == httpsInput.HttpsCargotransportMovement ||
                    (this.HttpsCargotransportMovement != null &&
                    this.HttpsCargotransportMovement.Equals(httpsInput.HttpsCargotransportMovement))
                ) && 
                (
                    this.HttpsCargobookingOptionStatus == httpsInput.HttpsCargobookingOptionStatus ||
                    (this.HttpsCargobookingOptionStatus != null &&
                    this.HttpsCargobookingOptionStatus.Equals(httpsInput.HttpsCargobookingOptionStatus))
                ) && 
                (
                    this.HttpsCargoproposedWaybillNumber == httpsInput.HttpsCargoproposedWaybillNumber ||
                    (this.HttpsCargoproposedWaybillNumber != null &&
                    this.HttpsCargoproposedWaybillNumber.Equals(httpsInput.HttpsCargoproposedWaybillNumber))
                ) && 
                (
                    this.HttpsCargorequestMatchInd == httpsInput.HttpsCargorequestMatchInd ||
                    this.HttpsCargorequestMatchInd.Equals(httpsInput.HttpsCargorequestMatchInd)
                ) && 
                (
                    this.HttpsCargoshipmentSecurityStatus == httpsInput.HttpsCargoshipmentSecurityStatus ||
                    (this.HttpsCargoshipmentSecurityStatus != null &&
                    this.HttpsCargoshipmentSecurityStatus.Equals(httpsInput.HttpsCargoshipmentSecurityStatus))
                ) && 
                (
                    this.HttpsCargovalidFrom == httpsInput.HttpsCargovalidFrom ||
                    (this.HttpsCargovalidFrom != null &&
                    this.HttpsCargovalidFrom.Equals(httpsInput.HttpsCargovalidFrom))
                ) && 
                (
                    this.HttpsCargovalidUntil == httpsInput.HttpsCargovalidUntil ||
                    (this.HttpsCargovalidUntil != null &&
                    this.HttpsCargovalidUntil.Equals(httpsInput.HttpsCargovalidUntil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.ExternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReferences.GetHashCode();
                }
                if (this.CompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkeletonIndicator.GetHashCode();
                if (this.BookingSegment != null)
                {
                    hashCode = (hashCode * 59) + this.BookingSegment.GetHashCode();
                }
                if (this.BookingTimes != null)
                {
                    hashCode = (hashCode * 59) + this.BookingTimes.GetHashCode();
                }
                if (this.HttpsCargocarrierProductInfo != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocarrierProductInfo.GetHashCode();
                }
                if (this.HttpsCargoforBookingRequest != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoforBookingRequest.GetHashCode();
                }
                if (this.HttpsCargofromCarrier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargofromCarrier.GetHashCode();
                }
                if (this.HttpsCargoinvolvedParties != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoinvolvedParties.GetHashCode();
                }
                if (this.HttpsCargoprice != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoprice.GetHashCode();
                }
                if (this.HttpsCargorequestRef != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargorequestRef.GetHashCode();
                }
                if (this.HttpsCargorouting != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargorouting.GetHashCode();
                }
                if (this.HttpsCargotransportMovement != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotransportMovement.GetHashCode();
                }
                if (this.HttpsCargobookingOptionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobookingOptionStatus.GetHashCode();
                }
                if (this.HttpsCargoproposedWaybillNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoproposedWaybillNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargorequestMatchInd.GetHashCode();
                if (this.HttpsCargoshipmentSecurityStatus != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoshipmentSecurityStatus.GetHashCode();
                }
                if (this.HttpsCargovalidFrom != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovalidFrom.GetHashCode();
                }
                if (this.HttpsCargovalidUntil != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovalidUntil.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
