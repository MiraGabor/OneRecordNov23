/*
 * ONE Record API Documentation
 *
 * This OpenAPI specification describes the API endpoint structure of an ONE Record API implementation.<br/><br/><b>Note:</b><br/>The included schemas can only be used to generate JSON-LD in the extended document form.<br/>However, to be fully ONE Record compliant, any ONE Record API (and any compliant ONE Record client)<br/><b>MUST</b> support at least the expanded, compacted, and flattened document forms.<br/><br/>More information about the ONE Record specification are available on [IATA Github repository](https://github.com/IATA-Cargo/ONE-Record) and on the [ONE Record Developer Portal](https://onerecord.iata.org).
 *
 * The version of the OpenAPI document: 2.0.0-dev
 * Contact: onerecord@iata.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace OneRecord.Api.SDK.Model
{
    /// <summary>
    /// BookingOption
    /// </summary>
    [DataContract(Name = "BookingOption")]
    public partial class BookingOption : IEquatable<BookingOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingOption" /> class.
        /// </summary>
        /// <param name="httpsId">id.</param>
        /// <param name="httpsType">type.</param>
        /// <param name="httpsCargochecks">Cargochecks.</param>
        /// <param name="httpsCargoevents">Cargoevents.</param>
        /// <param name="httpsCargoexternalReferences">CargoexternalReferences.</param>
        /// <param name="httpsCargocompanyIdentifier">CargocompanyIdentifier.</param>
        /// <param name="httpsCargoskeletonIndicator">CargoskeletonIndicator.</param>
        /// <param name="httpsCargobookingSegment">CargobookingSegment.</param>
        /// <param name="httpsCargobookingTimes">CargobookingTimes.</param>
        /// <param name="httpsCargocarrierProductInfo">CargocarrierProductInfo.</param>
        /// <param name="httpsCargoforBookingRequest">CargoforBookingRequest.</param>
        /// <param name="httpsCargofromCarrier">CargofromCarrier.</param>
        /// <param name="httpsCargoinvolvedParties">CargoinvolvedParties.</param>
        /// <param name="httpsCargoprice">Cargoprice.</param>
        /// <param name="httpsCargorequestRef">CargorequestRef.</param>
        /// <param name="httpsCargorouting">Cargorouting.</param>
        /// <param name="httpsCargotransportMovement">CargotransportMovement.</param>
        /// <param name="httpsCargobookingOptionStatus">CargobookingOptionStatus.</param>
        /// <param name="httpsCargoproposedWaybillNumber">CargoproposedWaybillNumber.</param>
        /// <param name="httpsCargorequestMatchInd">CargorequestMatchInd.</param>
        /// <param name="httpsCargoshipmentSecurityStatus">CargoshipmentSecurityStatus.</param>
        /// <param name="httpsCargovalidFrom">CargovalidFrom.</param>
        /// <param name="httpsCargovalidUntil">CargovalidUntil.</param>
        public BookingOption(string httpsId = default(string), List<string> httpsType = default(List<string>), List<Check> httpsCargochecks = default(List<Check>), List<LogisticsEvent> httpsCargoevents = default(List<LogisticsEvent>), List<ExternalReference> httpsCargoexternalReferences = default(List<ExternalReference>), string httpsCargocompanyIdentifier = default(string), bool httpsCargoskeletonIndicator = default(bool), BookingSegment httpsCargobookingSegment = default(BookingSegment), BookingTimes httpsCargobookingTimes = default(BookingTimes), CarrierProduct httpsCargocarrierProductInfo = default(CarrierProduct), BookingRequest httpsCargoforBookingRequest = default(BookingRequest), Carrier httpsCargofromCarrier = default(Carrier), List<Party> httpsCargoinvolvedParties = default(List<Party>), Price httpsCargoprice = default(Price), BookingOptionRequest httpsCargorequestRef = default(BookingOptionRequest), Routing httpsCargorouting = default(Routing), TransportMovement httpsCargotransportMovement = default(TransportMovement), string httpsCargobookingOptionStatus = default(string), string httpsCargoproposedWaybillNumber = default(string), bool httpsCargorequestMatchInd = default(bool), string httpsCargoshipmentSecurityStatus = default(string), DateTime httpsCargovalidFrom = default(DateTime), DateTime httpsCargovalidUntil = default(DateTime))
        {
            this.HttpsId = httpsId;
            this.HttpsType = httpsType;
            this.HttpsCargochecks = httpsCargochecks;
            this.HttpsCargoevents = httpsCargoevents;
            this.HttpsCargoexternalReferences = httpsCargoexternalReferences;
            this.HttpsCargocompanyIdentifier = httpsCargocompanyIdentifier;
            this.HttpsCargoskeletonIndicator = httpsCargoskeletonIndicator;
            this.HttpsCargobookingSegment = httpsCargobookingSegment;
            this.HttpsCargobookingTimes = httpsCargobookingTimes;
            this.HttpsCargocarrierProductInfo = httpsCargocarrierProductInfo;
            this.HttpsCargoforBookingRequest = httpsCargoforBookingRequest;
            this.HttpsCargofromCarrier = httpsCargofromCarrier;
            this.HttpsCargoinvolvedParties = httpsCargoinvolvedParties;
            this.HttpsCargoprice = httpsCargoprice;
            this.HttpsCargorequestRef = httpsCargorequestRef;
            this.HttpsCargorouting = httpsCargorouting;
            this.HttpsCargotransportMovement = httpsCargotransportMovement;
            this.HttpsCargobookingOptionStatus = httpsCargobookingOptionStatus;
            this.HttpsCargoproposedWaybillNumber = httpsCargoproposedWaybillNumber;
            this.HttpsCargorequestMatchInd = httpsCargorequestMatchInd;
            this.HttpsCargoshipmentSecurityStatus = httpsCargoshipmentSecurityStatus;
            this.HttpsCargovalidFrom = httpsCargovalidFrom;
            this.HttpsCargovalidUntil = httpsCargovalidUntil;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public string HttpsId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public List<string> HttpsType { get; set; }

        /// <summary>
        /// Gets or Sets Cargochecks
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#checks", EmitDefaultValue = false)]
        public List<Check> HttpsCargochecks { get; set; }

        /// <summary>
        /// Gets or Sets Cargoevents
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#events", EmitDefaultValue = false)]
        public List<LogisticsEvent> HttpsCargoevents { get; set; }

        /// <summary>
        /// Gets or Sets CargoexternalReferences
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#externalReferences", EmitDefaultValue = false)]
        public List<ExternalReference> HttpsCargoexternalReferences { get; set; }

        /// <summary>
        /// Gets or Sets CargocompanyIdentifier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#companyIdentifier", EmitDefaultValue = false)]
        public string HttpsCargocompanyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CargoskeletonIndicator
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#skeletonIndicator", EmitDefaultValue = true)]
        public bool HttpsCargoskeletonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingSegment
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#bookingSegment", EmitDefaultValue = false)]
        public BookingSegment HttpsCargobookingSegment { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingTimes
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#bookingTimes", EmitDefaultValue = false)]
        public BookingTimes HttpsCargobookingTimes { get; set; }

        /// <summary>
        /// Gets or Sets CargocarrierProductInfo
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#carrierProductInfo", EmitDefaultValue = false)]
        public CarrierProduct HttpsCargocarrierProductInfo { get; set; }

        /// <summary>
        /// Gets or Sets CargoforBookingRequest
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#forBookingRequest", EmitDefaultValue = false)]
        public BookingRequest HttpsCargoforBookingRequest { get; set; }

        /// <summary>
        /// Gets or Sets CargofromCarrier
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#fromCarrier", EmitDefaultValue = false)]
        public Carrier HttpsCargofromCarrier { get; set; }

        /// <summary>
        /// Gets or Sets CargoinvolvedParties
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#involvedParties", EmitDefaultValue = false)]
        public List<Party> HttpsCargoinvolvedParties { get; set; }

        /// <summary>
        /// Gets or Sets Cargoprice
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#price", EmitDefaultValue = false)]
        public Price HttpsCargoprice { get; set; }

        /// <summary>
        /// Gets or Sets CargorequestRef
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#requestRef", EmitDefaultValue = false)]
        public BookingOptionRequest HttpsCargorequestRef { get; set; }

        /// <summary>
        /// Gets or Sets Cargorouting
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#routing", EmitDefaultValue = false)]
        public Routing HttpsCargorouting { get; set; }

        /// <summary>
        /// Gets or Sets CargotransportMovement
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#transportMovement", EmitDefaultValue = false)]
        public TransportMovement HttpsCargotransportMovement { get; set; }

        /// <summary>
        /// Gets or Sets CargobookingOptionStatus
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#bookingOptionStatus", EmitDefaultValue = false)]
        public string HttpsCargobookingOptionStatus { get; set; }

        /// <summary>
        /// Gets or Sets CargoproposedWaybillNumber
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#proposedWaybillNumber", EmitDefaultValue = false)]
        public string HttpsCargoproposedWaybillNumber { get; set; }

        /// <summary>
        /// Gets or Sets CargorequestMatchInd
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#requestMatchInd", EmitDefaultValue = true)]
        public bool HttpsCargorequestMatchInd { get; set; }

        /// <summary>
        /// Gets or Sets CargoshipmentSecurityStatus
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#shipmentSecurityStatus", EmitDefaultValue = false)]
        public string HttpsCargoshipmentSecurityStatus { get; set; }

        /// <summary>
        /// Gets or Sets CargovalidFrom
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#validFrom", EmitDefaultValue = false)]
        public DateTime HttpsCargovalidFrom { get; set; }

        /// <summary>
        /// Gets or Sets CargovalidUntil
        /// </summary>
        [DataMember(Name = "https://onerecord.iata.org/ns/cargo#validUntil", EmitDefaultValue = false)]
        public DateTime HttpsCargovalidUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookingOption {\n");
            sb.Append("  Id: ").Append(HttpsId).Append("\n");
            sb.Append("  Type: ").Append(HttpsType).Append("\n");
            sb.Append("  Cargochecks: ").Append(HttpsCargochecks).Append("\n");
            sb.Append("  Cargoevents: ").Append(HttpsCargoevents).Append("\n");
            sb.Append("  CargoexternalReferences: ").Append(HttpsCargoexternalReferences).Append("\n");
            sb.Append("  CargocompanyIdentifier: ").Append(HttpsCargocompanyIdentifier).Append("\n");
            sb.Append("  CargoskeletonIndicator: ").Append(HttpsCargoskeletonIndicator).Append("\n");
            sb.Append("  CargobookingSegment: ").Append(HttpsCargobookingSegment).Append("\n");
            sb.Append("  CargobookingTimes: ").Append(HttpsCargobookingTimes).Append("\n");
            sb.Append("  CargocarrierProductInfo: ").Append(HttpsCargocarrierProductInfo).Append("\n");
            sb.Append("  CargoforBookingRequest: ").Append(HttpsCargoforBookingRequest).Append("\n");
            sb.Append("  CargofromCarrier: ").Append(HttpsCargofromCarrier).Append("\n");
            sb.Append("  CargoinvolvedParties: ").Append(HttpsCargoinvolvedParties).Append("\n");
            sb.Append("  Cargoprice: ").Append(HttpsCargoprice).Append("\n");
            sb.Append("  CargorequestRef: ").Append(HttpsCargorequestRef).Append("\n");
            sb.Append("  Cargorouting: ").Append(HttpsCargorouting).Append("\n");
            sb.Append("  CargotransportMovement: ").Append(HttpsCargotransportMovement).Append("\n");
            sb.Append("  CargobookingOptionStatus: ").Append(HttpsCargobookingOptionStatus).Append("\n");
            sb.Append("  CargoproposedWaybillNumber: ").Append(HttpsCargoproposedWaybillNumber).Append("\n");
            sb.Append("  CargorequestMatchInd: ").Append(HttpsCargorequestMatchInd).Append("\n");
            sb.Append("  CargoshipmentSecurityStatus: ").Append(HttpsCargoshipmentSecurityStatus).Append("\n");
            sb.Append("  CargovalidFrom: ").Append(HttpsCargovalidFrom).Append("\n");
            sb.Append("  CargovalidUntil: ").Append(HttpsCargovalidUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="httpsInput">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object httpsInput)
        {
            return this.Equals(httpsInput as BookingOption);
        }

        /// <summary>
        /// Returns true if BookingOption instances are equal
        /// </summary>
        /// <param name="httpsInput">Instance of BookingOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingOption httpsInput)
        {
            if (httpsInput == null)
            {
                return false;
            }
            return 
                (
                    this.HttpsId == httpsInput.HttpsId ||
                    (this.HttpsId != null &&
                    this.HttpsId.Equals(httpsInput.HttpsId))
                ) && 
                (
                    this.HttpsType == httpsInput.HttpsType ||
                    this.HttpsType != null &&
                    httpsInput.HttpsType != null &&
                    this.HttpsType.SequenceEqual(httpsInput.HttpsType)
                ) && 
                (
                    this.HttpsCargochecks == httpsInput.HttpsCargochecks ||
                    this.HttpsCargochecks != null &&
                    httpsInput.HttpsCargochecks != null &&
                    this.HttpsCargochecks.SequenceEqual(httpsInput.HttpsCargochecks)
                ) && 
                (
                    this.HttpsCargoevents == httpsInput.HttpsCargoevents ||
                    this.HttpsCargoevents != null &&
                    httpsInput.HttpsCargoevents != null &&
                    this.HttpsCargoevents.SequenceEqual(httpsInput.HttpsCargoevents)
                ) && 
                (
                    this.HttpsCargoexternalReferences == httpsInput.HttpsCargoexternalReferences ||
                    this.HttpsCargoexternalReferences != null &&
                    httpsInput.HttpsCargoexternalReferences != null &&
                    this.HttpsCargoexternalReferences.SequenceEqual(httpsInput.HttpsCargoexternalReferences)
                ) && 
                (
                    this.HttpsCargocompanyIdentifier == httpsInput.HttpsCargocompanyIdentifier ||
                    (this.HttpsCargocompanyIdentifier != null &&
                    this.HttpsCargocompanyIdentifier.Equals(httpsInput.HttpsCargocompanyIdentifier))
                ) && 
                (
                    this.HttpsCargoskeletonIndicator == httpsInput.HttpsCargoskeletonIndicator ||
                    this.HttpsCargoskeletonIndicator.Equals(httpsInput.HttpsCargoskeletonIndicator)
                ) && 
                (
                    this.HttpsCargobookingSegment == httpsInput.HttpsCargobookingSegment ||
                    (this.HttpsCargobookingSegment != null &&
                    this.HttpsCargobookingSegment.Equals(httpsInput.HttpsCargobookingSegment))
                ) && 
                (
                    this.HttpsCargobookingTimes == httpsInput.HttpsCargobookingTimes ||
                    (this.HttpsCargobookingTimes != null &&
                    this.HttpsCargobookingTimes.Equals(httpsInput.HttpsCargobookingTimes))
                ) && 
                (
                    this.HttpsCargocarrierProductInfo == httpsInput.HttpsCargocarrierProductInfo ||
                    (this.HttpsCargocarrierProductInfo != null &&
                    this.HttpsCargocarrierProductInfo.Equals(httpsInput.HttpsCargocarrierProductInfo))
                ) && 
                (
                    this.HttpsCargoforBookingRequest == httpsInput.HttpsCargoforBookingRequest ||
                    (this.HttpsCargoforBookingRequest != null &&
                    this.HttpsCargoforBookingRequest.Equals(httpsInput.HttpsCargoforBookingRequest))
                ) && 
                (
                    this.HttpsCargofromCarrier == httpsInput.HttpsCargofromCarrier ||
                    (this.HttpsCargofromCarrier != null &&
                    this.HttpsCargofromCarrier.Equals(httpsInput.HttpsCargofromCarrier))
                ) && 
                (
                    this.HttpsCargoinvolvedParties == httpsInput.HttpsCargoinvolvedParties ||
                    this.HttpsCargoinvolvedParties != null &&
                    httpsInput.HttpsCargoinvolvedParties != null &&
                    this.HttpsCargoinvolvedParties.SequenceEqual(httpsInput.HttpsCargoinvolvedParties)
                ) && 
                (
                    this.HttpsCargoprice == httpsInput.HttpsCargoprice ||
                    (this.HttpsCargoprice != null &&
                    this.HttpsCargoprice.Equals(httpsInput.HttpsCargoprice))
                ) && 
                (
                    this.HttpsCargorequestRef == httpsInput.HttpsCargorequestRef ||
                    (this.HttpsCargorequestRef != null &&
                    this.HttpsCargorequestRef.Equals(httpsInput.HttpsCargorequestRef))
                ) && 
                (
                    this.HttpsCargorouting == httpsInput.HttpsCargorouting ||
                    (this.HttpsCargorouting != null &&
                    this.HttpsCargorouting.Equals(httpsInput.HttpsCargorouting))
                ) && 
                (
                    this.HttpsCargotransportMovement == httpsInput.HttpsCargotransportMovement ||
                    (this.HttpsCargotransportMovement != null &&
                    this.HttpsCargotransportMovement.Equals(httpsInput.HttpsCargotransportMovement))
                ) && 
                (
                    this.HttpsCargobookingOptionStatus == httpsInput.HttpsCargobookingOptionStatus ||
                    (this.HttpsCargobookingOptionStatus != null &&
                    this.HttpsCargobookingOptionStatus.Equals(httpsInput.HttpsCargobookingOptionStatus))
                ) && 
                (
                    this.HttpsCargoproposedWaybillNumber == httpsInput.HttpsCargoproposedWaybillNumber ||
                    (this.HttpsCargoproposedWaybillNumber != null &&
                    this.HttpsCargoproposedWaybillNumber.Equals(httpsInput.HttpsCargoproposedWaybillNumber))
                ) && 
                (
                    this.HttpsCargorequestMatchInd == httpsInput.HttpsCargorequestMatchInd ||
                    this.HttpsCargorequestMatchInd.Equals(httpsInput.HttpsCargorequestMatchInd)
                ) && 
                (
                    this.HttpsCargoshipmentSecurityStatus == httpsInput.HttpsCargoshipmentSecurityStatus ||
                    (this.HttpsCargoshipmentSecurityStatus != null &&
                    this.HttpsCargoshipmentSecurityStatus.Equals(httpsInput.HttpsCargoshipmentSecurityStatus))
                ) && 
                (
                    this.HttpsCargovalidFrom == httpsInput.HttpsCargovalidFrom ||
                    (this.HttpsCargovalidFrom != null &&
                    this.HttpsCargovalidFrom.Equals(httpsInput.HttpsCargovalidFrom))
                ) && 
                (
                    this.HttpsCargovalidUntil == httpsInput.HttpsCargovalidUntil ||
                    (this.HttpsCargovalidUntil != null &&
                    this.HttpsCargovalidUntil.Equals(httpsInput.HttpsCargovalidUntil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpsId != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsId.GetHashCode();
                }
                if (this.HttpsType != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsType.GetHashCode();
                }
                if (this.HttpsCargochecks != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargochecks.GetHashCode();
                }
                if (this.HttpsCargoevents != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoevents.GetHashCode();
                }
                if (this.HttpsCargoexternalReferences != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoexternalReferences.GetHashCode();
                }
                if (this.HttpsCargocompanyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocompanyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargoskeletonIndicator.GetHashCode();
                if (this.HttpsCargobookingSegment != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobookingSegment.GetHashCode();
                }
                if (this.HttpsCargobookingTimes != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobookingTimes.GetHashCode();
                }
                if (this.HttpsCargocarrierProductInfo != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargocarrierProductInfo.GetHashCode();
                }
                if (this.HttpsCargoforBookingRequest != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoforBookingRequest.GetHashCode();
                }
                if (this.HttpsCargofromCarrier != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargofromCarrier.GetHashCode();
                }
                if (this.HttpsCargoinvolvedParties != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoinvolvedParties.GetHashCode();
                }
                if (this.HttpsCargoprice != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoprice.GetHashCode();
                }
                if (this.HttpsCargorequestRef != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargorequestRef.GetHashCode();
                }
                if (this.HttpsCargorouting != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargorouting.GetHashCode();
                }
                if (this.HttpsCargotransportMovement != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargotransportMovement.GetHashCode();
                }
                if (this.HttpsCargobookingOptionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargobookingOptionStatus.GetHashCode();
                }
                if (this.HttpsCargoproposedWaybillNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoproposedWaybillNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsCargorequestMatchInd.GetHashCode();
                if (this.HttpsCargoshipmentSecurityStatus != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargoshipmentSecurityStatus.GetHashCode();
                }
                if (this.HttpsCargovalidFrom != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovalidFrom.GetHashCode();
                }
                if (this.HttpsCargovalidUntil != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsCargovalidUntil.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="httpsValidationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext httpsValidationContext)
        {
            yield break;
        }
    }

}
